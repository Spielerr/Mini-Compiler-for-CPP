Terminals unused in grammar

    T_TYPE_CLASS
    T_USER_DEFINED_TYPE
    T_ACCESS_PUBLIC
    T_ACCESS_PRIVATE
    T_ACCESS_PROTECTED
    T_BIT_OP_RIGHT_SHIFT
    T_BIT_OP_LEFT_SHIFT
    T_IO_PRINTF
    T_IO_SCANF
    T_IO_GETLINE
    T_DOUBLE_QUOTES_OPEN
    T_DOUBLE_QUOTES_CLOSE
    T_COLON
    T_SCOPE_RESOLUTION
    T_SQ_OPEN
    T_SQ_CLOSE
    T_DOT


Grammar

    0 $accept: START $end

    1 START: INCLUDE BODY
    2      | BODY
    3      | INCLUDE

    4 INCLUDE: INCLUDE T_HEADER_INCLUDE T_REL_OP_LESS_THAN T_HEADER_FILE T_REL_OP_GREATER_THAN
    5        | INCLUDE T_HEADER_INCLUDE T_STRING_LITERAL
    6        | T_HEADER_INCLUDE T_REL_OP_LESS_THAN T_HEADER_FILE T_REL_OP_GREATER_THAN
    7        | T_HEADER_INCLUDE T_STRING_LITERAL

    8 BODY: BODY_BLOCK BODY
    9     | BODY_BLOCK

   10 BODY_BLOCK: FUNCTION
   11           | BLOCK

   12 FUNCTION: FUNCTION_PROTOTYPE
   13         | FUNCTION_DEFINITION
   14         | FUNCTION_DECLARATION

   15 FUNCTION_PROTOTYPE: TYPE T_IDENTIFIER T_PARAN_OPEN TYPE_LIST T_PARAN_CLOSE T_SEMI_COLON
   16                   | TYPE T_IDENTIFIER T_PARAN_OPEN T_PARAN_CLOSE T_SEMI_COLON

   17 TYPE_LIST: TYPE T_COMMA TYPE_LIST
   18          | TYPE

   19 FUNCTION_DEFINITION: TYPE T_IDENTIFIER T_PARAN_OPEN FUNCTION_PARAMETER_LIST T_PARAN_CLOSE T_SEMI_COLON

   20 FUNCTION_DECLARATION: TYPE T_IDENTIFIER T_PARAN_OPEN FUNCTION_PARAMETER_LIST T_PARAN_CLOSE BLOCK
   21                     | TYPE T_IDENTIFIER T_PARAN_OPEN T_PARAN_CLOSE BLOCK

   22 FUNCTION_PARAMETER_LIST: TYPE T_IDENTIFIER T_COMMA FUNCTION_PARAMETER_LIST
   23                        | TYPE T_IDENTIFIER T_OP_ASSIGNMENT EXPRESSION T_COMMA FUNCTION_PARAMETER_LIST
   24                        | TYPE T_IDENTIFIER
   25                        | TYPE T_IDENTIFIER T_OP_ASSIGNMENT EXPRESSION

   26 BLOCK: BLOCK_START STATEMENTS BLOCK_END

   27 BLOCK_START: T_BLOCK_START

   28 BLOCK_END: T_BLOCK_END

   29 STATEMENTS: STATEMENT STATEMENTS
   30           | STATEMENT

   31 IF_BLOCK: T_CONSTRUCT_IF T_PARAN_OPEN EXPRESSION T_PARAN_CLOSE STATEMENT

   32 ELSE_BLOCK: T_CONSTRUCT_ELSE STATEMENT

   33 FOR_BLOCK: T_CONSTRUCT_FOR T_PARAN_OPEN FOR_INIT_STATEMENT T_SEMI_COLON FOR_CONDITION_STATEMENT T_SEMI_COLON FOR_ACTION_STATEMENT T_PARAN_CLOSE STATEMENT

   34 FOR_INIT_STATEMENT: %empty
   35                   | LINE_STATEMENT

   36 FOR_CONDITION_STATEMENT: %empty
   37                        | CONDITIONAL_EXPRESSION

   38 FOR_ACTION_STATEMENT: %empty
   39                     | LINE_STATEMENT

   40 BITWISE_OPERATOR: T_BIT_OP_AND
   41                 | T_BIT_OP_OR
   42                 | T_BIT_OP_XOR

   43 CONDITIONAL_EXPRESSION: EXPRESSION LOGICAL_OPERATOR EXPRESSION_GRAMMAR
   44                       | EXPRESSION RELATIONAL_OPERATOR EXPRESSION_GRAMMAR
   45                       | EXPRESSION BITWISE_OPERATOR EXPRESSION_GRAMMAR

   46 ASSIGNMENT: T_IDENTIFIER ASSIGNMENT_OPERATOR EXPRESSION_GRAMMAR
   47           | T_IDENTIFIER ASSIGNMENT_OPERATOR ASSIGNMENT

   48 ASSIGNMENT_OPERATOR: T_OP_ASSIGNMENT
   49                    | T_OP_ADD_ASSIGNMENT
   50                    | T_OP_SUBTRACT_ASSIGNMENT
   51                    | T_OP_MULTIPLY_ASSIGNMENT
   52                    | T_OP_DIVIDE_ASSIGNMENT
   53                    | T_OP_MOD_ASSIGNMENT

   54 EXPRESSION: ASSIGNMENT
   55           | CONDITIONAL_EXPRESSION
   56           | EXPRESSION_GRAMMAR

   57 EXPRESSION_GRAMMAR: EXPRESSION_GRAMMAR T_OP_ADD EXPRESSION_TERM
   58                   | EXPRESSION_GRAMMAR T_OP_SUBTRACT EXPRESSION_TERM
   59                   | EXPRESSION_TERM

   60 EXPRESSION_TERM: EXPRESSION_TERM T_OP_MULTIPLY EXPRESSION_F
   61                | EXPRESSION_TERM T_OP_DIVIDE EXPRESSION_F
   62                | EXPRESSION_TERM T_OP_MOD EXPRESSION_F
   63                | EXPRESSION_F
   64                | T_BIT_OP_NOT EXPRESSION_F

   65 EXPRESSION_F: IDENTIFIER_OR_LITERAL
   66             | T_PARAN_OPEN EXPRESSION T_PARAN_CLOSE

   67 BLOCK_STATEMENT: IF_BLOCK
   68                | ELSE_BLOCK
   69                | FOR_BLOCK
   70                | BLOCK

   71 STATEMENT: LINE_STATEMENT T_SEMI_COLON
   72          | BLOCK_STATEMENT
   73          | T_SEMI_COLON

   74 JUMP_STATEMENT: T_JUMP_BREAK
   75               | T_JUMP_EXIT
   76               | T_JUMP_CONTINUE

   77 LINE_STATEMENT: VARIABLE_DECLARATION
   78               | EXPRESSION
   79               | COUT
   80               | CIN
   81               | RETURN
   82               | JUMP_STATEMENT

   83 VARIABLE_DECLARATION: TYPE VARIABLE_LIST

   84 VARIABLE_LIST: T_IDENTIFIER T_COMMA VARIABLE_LIST
   85              | ASSIGNMENT T_COMMA VARIABLE_LIST
   86              | T_IDENTIFIER
   87              | ASSIGNMENT

   88 COUT: T_IO_COUT T_IO_EXTRACTION EXTRACTION_LIST

   89 EXTRACTION_LIST: EXPRESSION T_IO_EXTRACTION EXTRACTION_LIST
   90                | EXPRESSION

   91 CIN: T_IO_CIN T_IO_INSERTION INSERTION_LIST

   92 INSERTION_LIST: T_IDENTIFIER T_IO_EXTRACTION INSERTION_LIST
   93               | T_IDENTIFIER

   94 RETURN: T_RETURN EXPRESSION

   95 LOGICAL_OPERATOR: T_LOG_OP_AND
   96                 | T_LOG_OP_OR

   97 RELATIONAL_OPERATOR: T_REL_OP_EQUAL
   98                    | T_REL_OP_GREATER_THAN
   99                    | T_REL_OP_GREATER_THAN_EQUAL
  100                    | T_REL_OP_LESS_THAN
  101                    | T_REL_OP_LESS_THAN_EQUAL
  102                    | T_REL_OP_NOT_EQUAL

  103 IDENTIFIER_OR_LITERAL: T_IDENTIFIER
  104                      | T_IDENTIFIER T_OP_INCREMENT
  105                      | T_OP_DECREMENT T_IDENTIFIER
  106                      | T_CHAR_LITERAL
  107                      | T_NUMBER_LITERAL
  108                      | T_STRING_LITERAL

  109 TYPE: T_TYPE_INT
  110     | T_TYPE_DOUBLE
  111     | T_TYPE_FLOAT
  112     | T_TYPE_CHAR
  113     | T_TYPE_STRING
  114     | T_TYPE_VOID


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    T_TYPE_INT (258) 109
    T_TYPE_FLOAT (259) 111
    T_TYPE_DOUBLE (260) 110
    T_TYPE_STRING (261) 113
    T_TYPE_CHAR (262) 112
    T_TYPE_VOID (263) 114
    T_TYPE_CLASS (264)
    T_USER_DEFINED_TYPE (265)
    T_NUMBER_LITERAL (266) 107
    T_STRING_LITERAL (267) 5 7 108
    T_CHAR_LITERAL (268) 106
    T_IDENTIFIER (269) 15 16 19 20 21 22 23 24 25 46 47 84 86 92 93 103 104 105
    T_CONSTRUCT_IF (270) 31
    T_CONSTRUCT_ELSE (271) 32
    T_CONSTRUCT_FOR (272) 33
    T_BLOCK_START (273) 27
    T_BLOCK_END (274) 28
    T_ACCESS_PUBLIC (275)
    T_ACCESS_PRIVATE (276)
    T_ACCESS_PROTECTED (277)
    T_HEADER_INCLUDE (278) 4 5 6 7
    T_HEADER_FILE (279) 4 6
    T_REL_OP_GREATER_THAN (280) 4 6 98
    T_REL_OP_LESS_THAN (281) 4 6 100
    T_REL_OP_GREATER_THAN_EQUAL (282) 99
    T_REL_OP_LESS_THAN_EQUAL (283) 101
    T_REL_OP_EQUAL (284) 97
    T_REL_OP_NOT_EQUAL (285) 102
    T_LOG_OP_OR (286) 96
    T_LOG_OP_AND (287) 95
    T_BIT_OP_AND (288) 40
    T_BIT_OP_OR (289) 41
    T_BIT_OP_XOR (290) 42
    T_BIT_OP_RIGHT_SHIFT (291)
    T_BIT_OP_LEFT_SHIFT (292)
    T_BIT_OP_NOT (293) 64
    T_OP_ASSIGNMENT (294) 23 25 48
    T_OP_ADD_ASSIGNMENT (295) 49
    T_OP_SUBTRACT_ASSIGNMENT (296) 50
    T_OP_MULTIPLY_ASSIGNMENT (297) 51
    T_OP_DIVIDE_ASSIGNMENT (298) 52
    T_OP_MOD_ASSIGNMENT (299) 53
    T_OP_ADD (300) 57
    T_OP_SUBTRACT (301) 58
    T_OP_MULTIPLY (302) 60
    T_OP_DIVIDE (303) 61
    T_OP_MOD (304) 62
    T_OP_INCREMENT (305) 104
    T_OP_DECREMENT (306) 105
    T_IO_COUT (307) 88
    T_IO_CIN (308) 91
    T_IO_PRINTF (309)
    T_IO_SCANF (310)
    T_IO_GETLINE (311)
    T_IO_INSERTION (312) 91
    T_IO_EXTRACTION (313) 88 89 92
    T_JUMP_BREAK (314) 74
    T_JUMP_EXIT (315) 75
    T_JUMP_CONTINUE (316) 76
    T_PARAN_OPEN (317) 15 16 19 20 21 31 33 66
    T_PARAN_CLOSE (318) 15 16 19 20 21 31 33 66
    T_SEMI_COLON (319) 15 16 19 33 71 73
    T_DOUBLE_QUOTES_OPEN (320)
    T_DOUBLE_QUOTES_CLOSE (321)
    T_COLON (322)
    T_SCOPE_RESOLUTION (323)
    T_SQ_OPEN (324)
    T_SQ_CLOSE (325)
    T_COMMA (326) 17 22 23 84 85
    T_RETURN (327) 94
    T_DOT (328)


Nonterminals, with rules where they appear

    $accept (74)
        on left: 0
    START (75)
        on left: 1 2 3
        on right: 0
    INCLUDE (76)
        on left: 4 5 6 7
        on right: 1 3 4 5
    BODY (77)
        on left: 8 9
        on right: 1 2 8
    BODY_BLOCK (78)
        on left: 10 11
        on right: 8 9
    FUNCTION (79)
        on left: 12 13 14
        on right: 10
    FUNCTION_PROTOTYPE (80)
        on left: 15 16
        on right: 12
    TYPE_LIST (81)
        on left: 17 18
        on right: 15 17
    FUNCTION_DEFINITION (82)
        on left: 19
        on right: 13
    FUNCTION_DECLARATION (83)
        on left: 20 21
        on right: 14
    FUNCTION_PARAMETER_LIST (84)
        on left: 22 23 24 25
        on right: 19 20 22 23
    BLOCK (85)
        on left: 26
        on right: 11 20 21 70
    BLOCK_START (86)
        on left: 27
        on right: 26
    BLOCK_END (87)
        on left: 28
        on right: 26
    STATEMENTS (88)
        on left: 29 30
        on right: 26 29
    IF_BLOCK (89)
        on left: 31
        on right: 67
    ELSE_BLOCK (90)
        on left: 32
        on right: 68
    FOR_BLOCK (91)
        on left: 33
        on right: 69
    FOR_INIT_STATEMENT (92)
        on left: 34 35
        on right: 33
    FOR_CONDITION_STATEMENT (93)
        on left: 36 37
        on right: 33
    FOR_ACTION_STATEMENT (94)
        on left: 38 39
        on right: 33
    BITWISE_OPERATOR (95)
        on left: 40 41 42
        on right: 45
    CONDITIONAL_EXPRESSION (96)
        on left: 43 44 45
        on right: 37 55
    ASSIGNMENT (97)
        on left: 46 47
        on right: 47 54 85 87
    ASSIGNMENT_OPERATOR (98)
        on left: 48 49 50 51 52 53
        on right: 46 47
    EXPRESSION (99)
        on left: 54 55 56
        on right: 23 25 31 43 44 45 66 78 89 90 94
    EXPRESSION_GRAMMAR (100)
        on left: 57 58 59
        on right: 43 44 45 46 56 57 58
    EXPRESSION_TERM (101)
        on left: 60 61 62 63 64
        on right: 57 58 59 60 61 62
    EXPRESSION_F (102)
        on left: 65 66
        on right: 60 61 62 63 64
    BLOCK_STATEMENT (103)
        on left: 67 68 69 70
        on right: 72
    STATEMENT (104)
        on left: 71 72 73
        on right: 29 30 31 32 33
    JUMP_STATEMENT (105)
        on left: 74 75 76
        on right: 82
    LINE_STATEMENT (106)
        on left: 77 78 79 80 81 82
        on right: 35 39 71
    VARIABLE_DECLARATION (107)
        on left: 83
        on right: 77
    VARIABLE_LIST (108)
        on left: 84 85 86 87
        on right: 83 84 85
    COUT (109)
        on left: 88
        on right: 79
    EXTRACTION_LIST (110)
        on left: 89 90
        on right: 88 89
    CIN (111)
        on left: 91
        on right: 80
    INSERTION_LIST (112)
        on left: 92 93
        on right: 91 92
    RETURN (113)
        on left: 94
        on right: 81
    LOGICAL_OPERATOR (114)
        on left: 95 96
        on right: 43
    RELATIONAL_OPERATOR (115)
        on left: 97 98 99 100 101 102
        on right: 44
    IDENTIFIER_OR_LITERAL (116)
        on left: 103 104 105 106 107 108
        on right: 65
    TYPE (117)
        on left: 109 110 111 112 113 114
        on right: 15 16 17 18 19 20 21 22 23 24 25 83


State 0

    0 $accept: . START $end

    T_TYPE_INT        shift, and go to state 1
    T_TYPE_FLOAT      shift, and go to state 2
    T_TYPE_DOUBLE     shift, and go to state 3
    T_TYPE_STRING     shift, and go to state 4
    T_TYPE_CHAR       shift, and go to state 5
    T_TYPE_VOID       shift, and go to state 6
    T_BLOCK_START     shift, and go to state 7
    T_HEADER_INCLUDE  shift, and go to state 8

    START                 go to state 9
    INCLUDE               go to state 10
    BODY                  go to state 11
    BODY_BLOCK            go to state 12
    FUNCTION              go to state 13
    FUNCTION_PROTOTYPE    go to state 14
    FUNCTION_DEFINITION   go to state 15
    FUNCTION_DECLARATION  go to state 16
    BLOCK                 go to state 17
    BLOCK_START           go to state 18
    TYPE                  go to state 19


State 1

  109 TYPE: T_TYPE_INT .

    $default  reduce using rule 109 (TYPE)


State 2

  111 TYPE: T_TYPE_FLOAT .

    $default  reduce using rule 111 (TYPE)


State 3

  110 TYPE: T_TYPE_DOUBLE .

    $default  reduce using rule 110 (TYPE)


State 4

  113 TYPE: T_TYPE_STRING .

    $default  reduce using rule 113 (TYPE)


State 5

  112 TYPE: T_TYPE_CHAR .

    $default  reduce using rule 112 (TYPE)


State 6

  114 TYPE: T_TYPE_VOID .

    $default  reduce using rule 114 (TYPE)


State 7

   27 BLOCK_START: T_BLOCK_START .

    $default  reduce using rule 27 (BLOCK_START)


State 8

    6 INCLUDE: T_HEADER_INCLUDE . T_REL_OP_LESS_THAN T_HEADER_FILE T_REL_OP_GREATER_THAN
    7        | T_HEADER_INCLUDE . T_STRING_LITERAL

    T_STRING_LITERAL    shift, and go to state 20
    T_REL_OP_LESS_THAN  shift, and go to state 21


State 9

    0 $accept: START . $end

    $end  shift, and go to state 22


State 10

    1 START: INCLUDE . BODY
    3      | INCLUDE .
    4 INCLUDE: INCLUDE . T_HEADER_INCLUDE T_REL_OP_LESS_THAN T_HEADER_FILE T_REL_OP_GREATER_THAN
    5        | INCLUDE . T_HEADER_INCLUDE T_STRING_LITERAL

    T_TYPE_INT        shift, and go to state 1
    T_TYPE_FLOAT      shift, and go to state 2
    T_TYPE_DOUBLE     shift, and go to state 3
    T_TYPE_STRING     shift, and go to state 4
    T_TYPE_CHAR       shift, and go to state 5
    T_TYPE_VOID       shift, and go to state 6
    T_BLOCK_START     shift, and go to state 7
    T_HEADER_INCLUDE  shift, and go to state 23

    $default  reduce using rule 3 (START)

    BODY                  go to state 24
    BODY_BLOCK            go to state 12
    FUNCTION              go to state 13
    FUNCTION_PROTOTYPE    go to state 14
    FUNCTION_DEFINITION   go to state 15
    FUNCTION_DECLARATION  go to state 16
    BLOCK                 go to state 17
    BLOCK_START           go to state 18
    TYPE                  go to state 19


State 11

    2 START: BODY .

    $default  reduce using rule 2 (START)


State 12

    8 BODY: BODY_BLOCK . BODY
    9     | BODY_BLOCK .

    T_TYPE_INT     shift, and go to state 1
    T_TYPE_FLOAT   shift, and go to state 2
    T_TYPE_DOUBLE  shift, and go to state 3
    T_TYPE_STRING  shift, and go to state 4
    T_TYPE_CHAR    shift, and go to state 5
    T_TYPE_VOID    shift, and go to state 6
    T_BLOCK_START  shift, and go to state 7

    $default  reduce using rule 9 (BODY)

    BODY                  go to state 25
    BODY_BLOCK            go to state 12
    FUNCTION              go to state 13
    FUNCTION_PROTOTYPE    go to state 14
    FUNCTION_DEFINITION   go to state 15
    FUNCTION_DECLARATION  go to state 16
    BLOCK                 go to state 17
    BLOCK_START           go to state 18
    TYPE                  go to state 19


State 13

   10 BODY_BLOCK: FUNCTION .

    $default  reduce using rule 10 (BODY_BLOCK)


State 14

   12 FUNCTION: FUNCTION_PROTOTYPE .

    $default  reduce using rule 12 (FUNCTION)


State 15

   13 FUNCTION: FUNCTION_DEFINITION .

    $default  reduce using rule 13 (FUNCTION)


State 16

   14 FUNCTION: FUNCTION_DECLARATION .

    $default  reduce using rule 14 (FUNCTION)


State 17

   11 BODY_BLOCK: BLOCK .

    $default  reduce using rule 11 (BODY_BLOCK)


State 18

   26 BLOCK: BLOCK_START . STATEMENTS BLOCK_END

    T_TYPE_INT        shift, and go to state 1
    T_TYPE_FLOAT      shift, and go to state 2
    T_TYPE_DOUBLE     shift, and go to state 3
    T_TYPE_STRING     shift, and go to state 4
    T_TYPE_CHAR       shift, and go to state 5
    T_TYPE_VOID       shift, and go to state 6
    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 29
    T_CONSTRUCT_IF    shift, and go to state 30
    T_CONSTRUCT_ELSE  shift, and go to state 31
    T_CONSTRUCT_FOR   shift, and go to state 32
    T_BLOCK_START     shift, and go to state 7
    T_BIT_OP_NOT      shift, and go to state 33
    T_OP_DECREMENT    shift, and go to state 34
    T_IO_COUT         shift, and go to state 35
    T_IO_CIN          shift, and go to state 36
    T_JUMP_BREAK      shift, and go to state 37
    T_JUMP_EXIT       shift, and go to state 38
    T_JUMP_CONTINUE   shift, and go to state 39
    T_PARAN_OPEN      shift, and go to state 40
    T_SEMI_COLON      shift, and go to state 41
    T_RETURN          shift, and go to state 42

    BLOCK                   go to state 43
    BLOCK_START             go to state 18
    STATEMENTS              go to state 44
    IF_BLOCK                go to state 45
    ELSE_BLOCK              go to state 46
    FOR_BLOCK               go to state 47
    CONDITIONAL_EXPRESSION  go to state 48
    ASSIGNMENT              go to state 49
    EXPRESSION              go to state 50
    EXPRESSION_GRAMMAR      go to state 51
    EXPRESSION_TERM         go to state 52
    EXPRESSION_F            go to state 53
    BLOCK_STATEMENT         go to state 54
    STATEMENT               go to state 55
    JUMP_STATEMENT          go to state 56
    LINE_STATEMENT          go to state 57
    VARIABLE_DECLARATION    go to state 58
    COUT                    go to state 59
    CIN                     go to state 60
    RETURN                  go to state 61
    IDENTIFIER_OR_LITERAL   go to state 62
    TYPE                    go to state 63


State 19

   15 FUNCTION_PROTOTYPE: TYPE . T_IDENTIFIER T_PARAN_OPEN TYPE_LIST T_PARAN_CLOSE T_SEMI_COLON
   16                   | TYPE . T_IDENTIFIER T_PARAN_OPEN T_PARAN_CLOSE T_SEMI_COLON
   19 FUNCTION_DEFINITION: TYPE . T_IDENTIFIER T_PARAN_OPEN FUNCTION_PARAMETER_LIST T_PARAN_CLOSE T_SEMI_COLON
   20 FUNCTION_DECLARATION: TYPE . T_IDENTIFIER T_PARAN_OPEN FUNCTION_PARAMETER_LIST T_PARAN_CLOSE BLOCK
   21                     | TYPE . T_IDENTIFIER T_PARAN_OPEN T_PARAN_CLOSE BLOCK

    T_IDENTIFIER  shift, and go to state 64


State 20

    7 INCLUDE: T_HEADER_INCLUDE T_STRING_LITERAL .

    $default  reduce using rule 7 (INCLUDE)


State 21

    6 INCLUDE: T_HEADER_INCLUDE T_REL_OP_LESS_THAN . T_HEADER_FILE T_REL_OP_GREATER_THAN

    T_HEADER_FILE  shift, and go to state 65


State 22

    0 $accept: START $end .

    $default  accept


State 23

    4 INCLUDE: INCLUDE T_HEADER_INCLUDE . T_REL_OP_LESS_THAN T_HEADER_FILE T_REL_OP_GREATER_THAN
    5        | INCLUDE T_HEADER_INCLUDE . T_STRING_LITERAL

    T_STRING_LITERAL    shift, and go to state 66
    T_REL_OP_LESS_THAN  shift, and go to state 67


State 24

    1 START: INCLUDE BODY .

    $default  reduce using rule 1 (START)


State 25

    8 BODY: BODY_BLOCK BODY .

    $default  reduce using rule 8 (BODY)


State 26

  107 IDENTIFIER_OR_LITERAL: T_NUMBER_LITERAL .

    $default  reduce using rule 107 (IDENTIFIER_OR_LITERAL)


State 27

  108 IDENTIFIER_OR_LITERAL: T_STRING_LITERAL .

    $default  reduce using rule 108 (IDENTIFIER_OR_LITERAL)


State 28

  106 IDENTIFIER_OR_LITERAL: T_CHAR_LITERAL .

    $default  reduce using rule 106 (IDENTIFIER_OR_LITERAL)


State 29

   46 ASSIGNMENT: T_IDENTIFIER . ASSIGNMENT_OPERATOR EXPRESSION_GRAMMAR
   47           | T_IDENTIFIER . ASSIGNMENT_OPERATOR ASSIGNMENT
  103 IDENTIFIER_OR_LITERAL: T_IDENTIFIER .
  104                      | T_IDENTIFIER . T_OP_INCREMENT

    T_OP_ASSIGNMENT           shift, and go to state 68
    T_OP_ADD_ASSIGNMENT       shift, and go to state 69
    T_OP_SUBTRACT_ASSIGNMENT  shift, and go to state 70
    T_OP_MULTIPLY_ASSIGNMENT  shift, and go to state 71
    T_OP_DIVIDE_ASSIGNMENT    shift, and go to state 72
    T_OP_MOD_ASSIGNMENT       shift, and go to state 73
    T_OP_INCREMENT            shift, and go to state 74

    $default  reduce using rule 103 (IDENTIFIER_OR_LITERAL)

    ASSIGNMENT_OPERATOR  go to state 75


State 30

   31 IF_BLOCK: T_CONSTRUCT_IF . T_PARAN_OPEN EXPRESSION T_PARAN_CLOSE STATEMENT

    T_PARAN_OPEN  shift, and go to state 76


State 31

   32 ELSE_BLOCK: T_CONSTRUCT_ELSE . STATEMENT

    T_TYPE_INT        shift, and go to state 1
    T_TYPE_FLOAT      shift, and go to state 2
    T_TYPE_DOUBLE     shift, and go to state 3
    T_TYPE_STRING     shift, and go to state 4
    T_TYPE_CHAR       shift, and go to state 5
    T_TYPE_VOID       shift, and go to state 6
    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 29
    T_CONSTRUCT_IF    shift, and go to state 30
    T_CONSTRUCT_ELSE  shift, and go to state 31
    T_CONSTRUCT_FOR   shift, and go to state 32
    T_BLOCK_START     shift, and go to state 7
    T_BIT_OP_NOT      shift, and go to state 33
    T_OP_DECREMENT    shift, and go to state 34
    T_IO_COUT         shift, and go to state 35
    T_IO_CIN          shift, and go to state 36
    T_JUMP_BREAK      shift, and go to state 37
    T_JUMP_EXIT       shift, and go to state 38
    T_JUMP_CONTINUE   shift, and go to state 39
    T_PARAN_OPEN      shift, and go to state 40
    T_SEMI_COLON      shift, and go to state 41
    T_RETURN          shift, and go to state 42

    BLOCK                   go to state 43
    BLOCK_START             go to state 18
    IF_BLOCK                go to state 45
    ELSE_BLOCK              go to state 46
    FOR_BLOCK               go to state 47
    CONDITIONAL_EXPRESSION  go to state 48
    ASSIGNMENT              go to state 49
    EXPRESSION              go to state 50
    EXPRESSION_GRAMMAR      go to state 51
    EXPRESSION_TERM         go to state 52
    EXPRESSION_F            go to state 53
    BLOCK_STATEMENT         go to state 54
    STATEMENT               go to state 77
    JUMP_STATEMENT          go to state 56
    LINE_STATEMENT          go to state 57
    VARIABLE_DECLARATION    go to state 58
    COUT                    go to state 59
    CIN                     go to state 60
    RETURN                  go to state 61
    IDENTIFIER_OR_LITERAL   go to state 62
    TYPE                    go to state 63


State 32

   33 FOR_BLOCK: T_CONSTRUCT_FOR . T_PARAN_OPEN FOR_INIT_STATEMENT T_SEMI_COLON FOR_CONDITION_STATEMENT T_SEMI_COLON FOR_ACTION_STATEMENT T_PARAN_CLOSE STATEMENT

    T_PARAN_OPEN  shift, and go to state 78


State 33

   64 EXPRESSION_TERM: T_BIT_OP_NOT . EXPRESSION_F

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 79
    T_OP_DECREMENT    shift, and go to state 34
    T_PARAN_OPEN      shift, and go to state 40

    EXPRESSION_F           go to state 80
    IDENTIFIER_OR_LITERAL  go to state 62


State 34

  105 IDENTIFIER_OR_LITERAL: T_OP_DECREMENT . T_IDENTIFIER

    T_IDENTIFIER  shift, and go to state 81


State 35

   88 COUT: T_IO_COUT . T_IO_EXTRACTION EXTRACTION_LIST

    T_IO_EXTRACTION  shift, and go to state 82


State 36

   91 CIN: T_IO_CIN . T_IO_INSERTION INSERTION_LIST

    T_IO_INSERTION  shift, and go to state 83


State 37

   74 JUMP_STATEMENT: T_JUMP_BREAK .

    $default  reduce using rule 74 (JUMP_STATEMENT)


State 38

   75 JUMP_STATEMENT: T_JUMP_EXIT .

    $default  reduce using rule 75 (JUMP_STATEMENT)


State 39

   76 JUMP_STATEMENT: T_JUMP_CONTINUE .

    $default  reduce using rule 76 (JUMP_STATEMENT)


State 40

   66 EXPRESSION_F: T_PARAN_OPEN . EXPRESSION T_PARAN_CLOSE

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 29
    T_BIT_OP_NOT      shift, and go to state 33
    T_OP_DECREMENT    shift, and go to state 34
    T_PARAN_OPEN      shift, and go to state 40

    CONDITIONAL_EXPRESSION  go to state 48
    ASSIGNMENT              go to state 49
    EXPRESSION              go to state 84
    EXPRESSION_GRAMMAR      go to state 51
    EXPRESSION_TERM         go to state 52
    EXPRESSION_F            go to state 53
    IDENTIFIER_OR_LITERAL   go to state 62


State 41

   73 STATEMENT: T_SEMI_COLON .

    $default  reduce using rule 73 (STATEMENT)


State 42

   94 RETURN: T_RETURN . EXPRESSION

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 29
    T_BIT_OP_NOT      shift, and go to state 33
    T_OP_DECREMENT    shift, and go to state 34
    T_PARAN_OPEN      shift, and go to state 40

    CONDITIONAL_EXPRESSION  go to state 48
    ASSIGNMENT              go to state 49
    EXPRESSION              go to state 85
    EXPRESSION_GRAMMAR      go to state 51
    EXPRESSION_TERM         go to state 52
    EXPRESSION_F            go to state 53
    IDENTIFIER_OR_LITERAL   go to state 62


State 43

   70 BLOCK_STATEMENT: BLOCK .

    $default  reduce using rule 70 (BLOCK_STATEMENT)


State 44

   26 BLOCK: BLOCK_START STATEMENTS . BLOCK_END

    T_BLOCK_END  shift, and go to state 86

    BLOCK_END  go to state 87


State 45

   67 BLOCK_STATEMENT: IF_BLOCK .

    $default  reduce using rule 67 (BLOCK_STATEMENT)


State 46

   68 BLOCK_STATEMENT: ELSE_BLOCK .

    $default  reduce using rule 68 (BLOCK_STATEMENT)


State 47

   69 BLOCK_STATEMENT: FOR_BLOCK .

    $default  reduce using rule 69 (BLOCK_STATEMENT)


State 48

   55 EXPRESSION: CONDITIONAL_EXPRESSION .

    $default  reduce using rule 55 (EXPRESSION)


State 49

   54 EXPRESSION: ASSIGNMENT .

    $default  reduce using rule 54 (EXPRESSION)


State 50

   43 CONDITIONAL_EXPRESSION: EXPRESSION . LOGICAL_OPERATOR EXPRESSION_GRAMMAR
   44                       | EXPRESSION . RELATIONAL_OPERATOR EXPRESSION_GRAMMAR
   45                       | EXPRESSION . BITWISE_OPERATOR EXPRESSION_GRAMMAR
   78 LINE_STATEMENT: EXPRESSION .

    T_REL_OP_GREATER_THAN        shift, and go to state 88
    T_REL_OP_LESS_THAN           shift, and go to state 89
    T_REL_OP_GREATER_THAN_EQUAL  shift, and go to state 90
    T_REL_OP_LESS_THAN_EQUAL     shift, and go to state 91
    T_REL_OP_EQUAL               shift, and go to state 92
    T_REL_OP_NOT_EQUAL           shift, and go to state 93
    T_LOG_OP_OR                  shift, and go to state 94
    T_LOG_OP_AND                 shift, and go to state 95
    T_BIT_OP_AND                 shift, and go to state 96
    T_BIT_OP_OR                  shift, and go to state 97
    T_BIT_OP_XOR                 shift, and go to state 98

    $default  reduce using rule 78 (LINE_STATEMENT)

    BITWISE_OPERATOR     go to state 99
    LOGICAL_OPERATOR     go to state 100
    RELATIONAL_OPERATOR  go to state 101


State 51

   56 EXPRESSION: EXPRESSION_GRAMMAR .
   57 EXPRESSION_GRAMMAR: EXPRESSION_GRAMMAR . T_OP_ADD EXPRESSION_TERM
   58                   | EXPRESSION_GRAMMAR . T_OP_SUBTRACT EXPRESSION_TERM

    T_OP_ADD       shift, and go to state 102
    T_OP_SUBTRACT  shift, and go to state 103

    $default  reduce using rule 56 (EXPRESSION)


State 52

   59 EXPRESSION_GRAMMAR: EXPRESSION_TERM .
   60 EXPRESSION_TERM: EXPRESSION_TERM . T_OP_MULTIPLY EXPRESSION_F
   61                | EXPRESSION_TERM . T_OP_DIVIDE EXPRESSION_F
   62                | EXPRESSION_TERM . T_OP_MOD EXPRESSION_F

    T_OP_MULTIPLY  shift, and go to state 104
    T_OP_DIVIDE    shift, and go to state 105
    T_OP_MOD       shift, and go to state 106

    $default  reduce using rule 59 (EXPRESSION_GRAMMAR)


State 53

   63 EXPRESSION_TERM: EXPRESSION_F .

    $default  reduce using rule 63 (EXPRESSION_TERM)


State 54

   72 STATEMENT: BLOCK_STATEMENT .

    $default  reduce using rule 72 (STATEMENT)


State 55

   29 STATEMENTS: STATEMENT . STATEMENTS
   30           | STATEMENT .

    T_TYPE_INT        shift, and go to state 1
    T_TYPE_FLOAT      shift, and go to state 2
    T_TYPE_DOUBLE     shift, and go to state 3
    T_TYPE_STRING     shift, and go to state 4
    T_TYPE_CHAR       shift, and go to state 5
    T_TYPE_VOID       shift, and go to state 6
    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 29
    T_CONSTRUCT_IF    shift, and go to state 30
    T_CONSTRUCT_ELSE  shift, and go to state 31
    T_CONSTRUCT_FOR   shift, and go to state 32
    T_BLOCK_START     shift, and go to state 7
    T_BIT_OP_NOT      shift, and go to state 33
    T_OP_DECREMENT    shift, and go to state 34
    T_IO_COUT         shift, and go to state 35
    T_IO_CIN          shift, and go to state 36
    T_JUMP_BREAK      shift, and go to state 37
    T_JUMP_EXIT       shift, and go to state 38
    T_JUMP_CONTINUE   shift, and go to state 39
    T_PARAN_OPEN      shift, and go to state 40
    T_SEMI_COLON      shift, and go to state 41
    T_RETURN          shift, and go to state 42

    $default  reduce using rule 30 (STATEMENTS)

    BLOCK                   go to state 43
    BLOCK_START             go to state 18
    STATEMENTS              go to state 107
    IF_BLOCK                go to state 45
    ELSE_BLOCK              go to state 46
    FOR_BLOCK               go to state 47
    CONDITIONAL_EXPRESSION  go to state 48
    ASSIGNMENT              go to state 49
    EXPRESSION              go to state 50
    EXPRESSION_GRAMMAR      go to state 51
    EXPRESSION_TERM         go to state 52
    EXPRESSION_F            go to state 53
    BLOCK_STATEMENT         go to state 54
    STATEMENT               go to state 55
    JUMP_STATEMENT          go to state 56
    LINE_STATEMENT          go to state 57
    VARIABLE_DECLARATION    go to state 58
    COUT                    go to state 59
    CIN                     go to state 60
    RETURN                  go to state 61
    IDENTIFIER_OR_LITERAL   go to state 62
    TYPE                    go to state 63


State 56

   82 LINE_STATEMENT: JUMP_STATEMENT .

    $default  reduce using rule 82 (LINE_STATEMENT)


State 57

   71 STATEMENT: LINE_STATEMENT . T_SEMI_COLON

    T_SEMI_COLON  shift, and go to state 108


State 58

   77 LINE_STATEMENT: VARIABLE_DECLARATION .

    $default  reduce using rule 77 (LINE_STATEMENT)


State 59

   79 LINE_STATEMENT: COUT .

    $default  reduce using rule 79 (LINE_STATEMENT)


State 60

   80 LINE_STATEMENT: CIN .

    $default  reduce using rule 80 (LINE_STATEMENT)


State 61

   81 LINE_STATEMENT: RETURN .

    $default  reduce using rule 81 (LINE_STATEMENT)


State 62

   65 EXPRESSION_F: IDENTIFIER_OR_LITERAL .

    $default  reduce using rule 65 (EXPRESSION_F)


State 63

   83 VARIABLE_DECLARATION: TYPE . VARIABLE_LIST

    T_IDENTIFIER  shift, and go to state 109

    ASSIGNMENT     go to state 110
    VARIABLE_LIST  go to state 111


State 64

   15 FUNCTION_PROTOTYPE: TYPE T_IDENTIFIER . T_PARAN_OPEN TYPE_LIST T_PARAN_CLOSE T_SEMI_COLON
   16                   | TYPE T_IDENTIFIER . T_PARAN_OPEN T_PARAN_CLOSE T_SEMI_COLON
   19 FUNCTION_DEFINITION: TYPE T_IDENTIFIER . T_PARAN_OPEN FUNCTION_PARAMETER_LIST T_PARAN_CLOSE T_SEMI_COLON
   20 FUNCTION_DECLARATION: TYPE T_IDENTIFIER . T_PARAN_OPEN FUNCTION_PARAMETER_LIST T_PARAN_CLOSE BLOCK
   21                     | TYPE T_IDENTIFIER . T_PARAN_OPEN T_PARAN_CLOSE BLOCK

    T_PARAN_OPEN  shift, and go to state 112


State 65

    6 INCLUDE: T_HEADER_INCLUDE T_REL_OP_LESS_THAN T_HEADER_FILE . T_REL_OP_GREATER_THAN

    T_REL_OP_GREATER_THAN  shift, and go to state 113


State 66

    5 INCLUDE: INCLUDE T_HEADER_INCLUDE T_STRING_LITERAL .

    $default  reduce using rule 5 (INCLUDE)


State 67

    4 INCLUDE: INCLUDE T_HEADER_INCLUDE T_REL_OP_LESS_THAN . T_HEADER_FILE T_REL_OP_GREATER_THAN

    T_HEADER_FILE  shift, and go to state 114


State 68

   48 ASSIGNMENT_OPERATOR: T_OP_ASSIGNMENT .

    $default  reduce using rule 48 (ASSIGNMENT_OPERATOR)


State 69

   49 ASSIGNMENT_OPERATOR: T_OP_ADD_ASSIGNMENT .

    $default  reduce using rule 49 (ASSIGNMENT_OPERATOR)


State 70

   50 ASSIGNMENT_OPERATOR: T_OP_SUBTRACT_ASSIGNMENT .

    $default  reduce using rule 50 (ASSIGNMENT_OPERATOR)


State 71

   51 ASSIGNMENT_OPERATOR: T_OP_MULTIPLY_ASSIGNMENT .

    $default  reduce using rule 51 (ASSIGNMENT_OPERATOR)


State 72

   52 ASSIGNMENT_OPERATOR: T_OP_DIVIDE_ASSIGNMENT .

    $default  reduce using rule 52 (ASSIGNMENT_OPERATOR)


State 73

   53 ASSIGNMENT_OPERATOR: T_OP_MOD_ASSIGNMENT .

    $default  reduce using rule 53 (ASSIGNMENT_OPERATOR)


State 74

  104 IDENTIFIER_OR_LITERAL: T_IDENTIFIER T_OP_INCREMENT .

    $default  reduce using rule 104 (IDENTIFIER_OR_LITERAL)


State 75

   46 ASSIGNMENT: T_IDENTIFIER ASSIGNMENT_OPERATOR . EXPRESSION_GRAMMAR
   47           | T_IDENTIFIER ASSIGNMENT_OPERATOR . ASSIGNMENT

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 29
    T_BIT_OP_NOT      shift, and go to state 33
    T_OP_DECREMENT    shift, and go to state 34
    T_PARAN_OPEN      shift, and go to state 40

    ASSIGNMENT             go to state 115
    EXPRESSION_GRAMMAR     go to state 116
    EXPRESSION_TERM        go to state 52
    EXPRESSION_F           go to state 53
    IDENTIFIER_OR_LITERAL  go to state 62


State 76

   31 IF_BLOCK: T_CONSTRUCT_IF T_PARAN_OPEN . EXPRESSION T_PARAN_CLOSE STATEMENT

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 29
    T_BIT_OP_NOT      shift, and go to state 33
    T_OP_DECREMENT    shift, and go to state 34
    T_PARAN_OPEN      shift, and go to state 40

    CONDITIONAL_EXPRESSION  go to state 48
    ASSIGNMENT              go to state 49
    EXPRESSION              go to state 117
    EXPRESSION_GRAMMAR      go to state 51
    EXPRESSION_TERM         go to state 52
    EXPRESSION_F            go to state 53
    IDENTIFIER_OR_LITERAL   go to state 62


State 77

   32 ELSE_BLOCK: T_CONSTRUCT_ELSE STATEMENT .

    $default  reduce using rule 32 (ELSE_BLOCK)


State 78

   33 FOR_BLOCK: T_CONSTRUCT_FOR T_PARAN_OPEN . FOR_INIT_STATEMENT T_SEMI_COLON FOR_CONDITION_STATEMENT T_SEMI_COLON FOR_ACTION_STATEMENT T_PARAN_CLOSE STATEMENT

    T_TYPE_INT        shift, and go to state 1
    T_TYPE_FLOAT      shift, and go to state 2
    T_TYPE_DOUBLE     shift, and go to state 3
    T_TYPE_STRING     shift, and go to state 4
    T_TYPE_CHAR       shift, and go to state 5
    T_TYPE_VOID       shift, and go to state 6
    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 29
    T_BIT_OP_NOT      shift, and go to state 33
    T_OP_DECREMENT    shift, and go to state 34
    T_IO_COUT         shift, and go to state 35
    T_IO_CIN          shift, and go to state 36
    T_JUMP_BREAK      shift, and go to state 37
    T_JUMP_EXIT       shift, and go to state 38
    T_JUMP_CONTINUE   shift, and go to state 39
    T_PARAN_OPEN      shift, and go to state 40
    T_RETURN          shift, and go to state 42

    $default  reduce using rule 34 (FOR_INIT_STATEMENT)

    FOR_INIT_STATEMENT      go to state 118
    CONDITIONAL_EXPRESSION  go to state 48
    ASSIGNMENT              go to state 49
    EXPRESSION              go to state 50
    EXPRESSION_GRAMMAR      go to state 51
    EXPRESSION_TERM         go to state 52
    EXPRESSION_F            go to state 53
    JUMP_STATEMENT          go to state 56
    LINE_STATEMENT          go to state 119
    VARIABLE_DECLARATION    go to state 58
    COUT                    go to state 59
    CIN                     go to state 60
    RETURN                  go to state 61
    IDENTIFIER_OR_LITERAL   go to state 62
    TYPE                    go to state 63


State 79

  103 IDENTIFIER_OR_LITERAL: T_IDENTIFIER .
  104                      | T_IDENTIFIER . T_OP_INCREMENT

    T_OP_INCREMENT  shift, and go to state 74

    $default  reduce using rule 103 (IDENTIFIER_OR_LITERAL)


State 80

   64 EXPRESSION_TERM: T_BIT_OP_NOT EXPRESSION_F .

    $default  reduce using rule 64 (EXPRESSION_TERM)


State 81

  105 IDENTIFIER_OR_LITERAL: T_OP_DECREMENT T_IDENTIFIER .

    $default  reduce using rule 105 (IDENTIFIER_OR_LITERAL)


State 82

   88 COUT: T_IO_COUT T_IO_EXTRACTION . EXTRACTION_LIST

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 29
    T_BIT_OP_NOT      shift, and go to state 33
    T_OP_DECREMENT    shift, and go to state 34
    T_PARAN_OPEN      shift, and go to state 40

    CONDITIONAL_EXPRESSION  go to state 48
    ASSIGNMENT              go to state 49
    EXPRESSION              go to state 120
    EXPRESSION_GRAMMAR      go to state 51
    EXPRESSION_TERM         go to state 52
    EXPRESSION_F            go to state 53
    EXTRACTION_LIST         go to state 121
    IDENTIFIER_OR_LITERAL   go to state 62


State 83

   91 CIN: T_IO_CIN T_IO_INSERTION . INSERTION_LIST

    T_IDENTIFIER  shift, and go to state 122

    INSERTION_LIST  go to state 123


State 84

   43 CONDITIONAL_EXPRESSION: EXPRESSION . LOGICAL_OPERATOR EXPRESSION_GRAMMAR
   44                       | EXPRESSION . RELATIONAL_OPERATOR EXPRESSION_GRAMMAR
   45                       | EXPRESSION . BITWISE_OPERATOR EXPRESSION_GRAMMAR
   66 EXPRESSION_F: T_PARAN_OPEN EXPRESSION . T_PARAN_CLOSE

    T_REL_OP_GREATER_THAN        shift, and go to state 88
    T_REL_OP_LESS_THAN           shift, and go to state 89
    T_REL_OP_GREATER_THAN_EQUAL  shift, and go to state 90
    T_REL_OP_LESS_THAN_EQUAL     shift, and go to state 91
    T_REL_OP_EQUAL               shift, and go to state 92
    T_REL_OP_NOT_EQUAL           shift, and go to state 93
    T_LOG_OP_OR                  shift, and go to state 94
    T_LOG_OP_AND                 shift, and go to state 95
    T_BIT_OP_AND                 shift, and go to state 96
    T_BIT_OP_OR                  shift, and go to state 97
    T_BIT_OP_XOR                 shift, and go to state 98
    T_PARAN_CLOSE                shift, and go to state 124

    BITWISE_OPERATOR     go to state 99
    LOGICAL_OPERATOR     go to state 100
    RELATIONAL_OPERATOR  go to state 101


State 85

   43 CONDITIONAL_EXPRESSION: EXPRESSION . LOGICAL_OPERATOR EXPRESSION_GRAMMAR
   44                       | EXPRESSION . RELATIONAL_OPERATOR EXPRESSION_GRAMMAR
   45                       | EXPRESSION . BITWISE_OPERATOR EXPRESSION_GRAMMAR
   94 RETURN: T_RETURN EXPRESSION .

    T_REL_OP_GREATER_THAN        shift, and go to state 88
    T_REL_OP_LESS_THAN           shift, and go to state 89
    T_REL_OP_GREATER_THAN_EQUAL  shift, and go to state 90
    T_REL_OP_LESS_THAN_EQUAL     shift, and go to state 91
    T_REL_OP_EQUAL               shift, and go to state 92
    T_REL_OP_NOT_EQUAL           shift, and go to state 93
    T_LOG_OP_OR                  shift, and go to state 94
    T_LOG_OP_AND                 shift, and go to state 95
    T_BIT_OP_AND                 shift, and go to state 96
    T_BIT_OP_OR                  shift, and go to state 97
    T_BIT_OP_XOR                 shift, and go to state 98

    $default  reduce using rule 94 (RETURN)

    BITWISE_OPERATOR     go to state 99
    LOGICAL_OPERATOR     go to state 100
    RELATIONAL_OPERATOR  go to state 101


State 86

   28 BLOCK_END: T_BLOCK_END .

    $default  reduce using rule 28 (BLOCK_END)


State 87

   26 BLOCK: BLOCK_START STATEMENTS BLOCK_END .

    $default  reduce using rule 26 (BLOCK)


State 88

   98 RELATIONAL_OPERATOR: T_REL_OP_GREATER_THAN .

    $default  reduce using rule 98 (RELATIONAL_OPERATOR)


State 89

  100 RELATIONAL_OPERATOR: T_REL_OP_LESS_THAN .

    $default  reduce using rule 100 (RELATIONAL_OPERATOR)


State 90

   99 RELATIONAL_OPERATOR: T_REL_OP_GREATER_THAN_EQUAL .

    $default  reduce using rule 99 (RELATIONAL_OPERATOR)


State 91

  101 RELATIONAL_OPERATOR: T_REL_OP_LESS_THAN_EQUAL .

    $default  reduce using rule 101 (RELATIONAL_OPERATOR)


State 92

   97 RELATIONAL_OPERATOR: T_REL_OP_EQUAL .

    $default  reduce using rule 97 (RELATIONAL_OPERATOR)


State 93

  102 RELATIONAL_OPERATOR: T_REL_OP_NOT_EQUAL .

    $default  reduce using rule 102 (RELATIONAL_OPERATOR)


State 94

   96 LOGICAL_OPERATOR: T_LOG_OP_OR .

    $default  reduce using rule 96 (LOGICAL_OPERATOR)


State 95

   95 LOGICAL_OPERATOR: T_LOG_OP_AND .

    $default  reduce using rule 95 (LOGICAL_OPERATOR)


State 96

   40 BITWISE_OPERATOR: T_BIT_OP_AND .

    $default  reduce using rule 40 (BITWISE_OPERATOR)


State 97

   41 BITWISE_OPERATOR: T_BIT_OP_OR .

    $default  reduce using rule 41 (BITWISE_OPERATOR)


State 98

   42 BITWISE_OPERATOR: T_BIT_OP_XOR .

    $default  reduce using rule 42 (BITWISE_OPERATOR)


State 99

   45 CONDITIONAL_EXPRESSION: EXPRESSION BITWISE_OPERATOR . EXPRESSION_GRAMMAR

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 79
    T_BIT_OP_NOT      shift, and go to state 33
    T_OP_DECREMENT    shift, and go to state 34
    T_PARAN_OPEN      shift, and go to state 40

    EXPRESSION_GRAMMAR     go to state 125
    EXPRESSION_TERM        go to state 52
    EXPRESSION_F           go to state 53
    IDENTIFIER_OR_LITERAL  go to state 62


State 100

   43 CONDITIONAL_EXPRESSION: EXPRESSION LOGICAL_OPERATOR . EXPRESSION_GRAMMAR

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 79
    T_BIT_OP_NOT      shift, and go to state 33
    T_OP_DECREMENT    shift, and go to state 34
    T_PARAN_OPEN      shift, and go to state 40

    EXPRESSION_GRAMMAR     go to state 126
    EXPRESSION_TERM        go to state 52
    EXPRESSION_F           go to state 53
    IDENTIFIER_OR_LITERAL  go to state 62


State 101

   44 CONDITIONAL_EXPRESSION: EXPRESSION RELATIONAL_OPERATOR . EXPRESSION_GRAMMAR

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 79
    T_BIT_OP_NOT      shift, and go to state 33
    T_OP_DECREMENT    shift, and go to state 34
    T_PARAN_OPEN      shift, and go to state 40

    EXPRESSION_GRAMMAR     go to state 127
    EXPRESSION_TERM        go to state 52
    EXPRESSION_F           go to state 53
    IDENTIFIER_OR_LITERAL  go to state 62


State 102

   57 EXPRESSION_GRAMMAR: EXPRESSION_GRAMMAR T_OP_ADD . EXPRESSION_TERM

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 79
    T_BIT_OP_NOT      shift, and go to state 33
    T_OP_DECREMENT    shift, and go to state 34
    T_PARAN_OPEN      shift, and go to state 40

    EXPRESSION_TERM        go to state 128
    EXPRESSION_F           go to state 53
    IDENTIFIER_OR_LITERAL  go to state 62


State 103

   58 EXPRESSION_GRAMMAR: EXPRESSION_GRAMMAR T_OP_SUBTRACT . EXPRESSION_TERM

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 79
    T_BIT_OP_NOT      shift, and go to state 33
    T_OP_DECREMENT    shift, and go to state 34
    T_PARAN_OPEN      shift, and go to state 40

    EXPRESSION_TERM        go to state 129
    EXPRESSION_F           go to state 53
    IDENTIFIER_OR_LITERAL  go to state 62


State 104

   60 EXPRESSION_TERM: EXPRESSION_TERM T_OP_MULTIPLY . EXPRESSION_F

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 79
    T_OP_DECREMENT    shift, and go to state 34
    T_PARAN_OPEN      shift, and go to state 40

    EXPRESSION_F           go to state 130
    IDENTIFIER_OR_LITERAL  go to state 62


State 105

   61 EXPRESSION_TERM: EXPRESSION_TERM T_OP_DIVIDE . EXPRESSION_F

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 79
    T_OP_DECREMENT    shift, and go to state 34
    T_PARAN_OPEN      shift, and go to state 40

    EXPRESSION_F           go to state 131
    IDENTIFIER_OR_LITERAL  go to state 62


State 106

   62 EXPRESSION_TERM: EXPRESSION_TERM T_OP_MOD . EXPRESSION_F

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 79
    T_OP_DECREMENT    shift, and go to state 34
    T_PARAN_OPEN      shift, and go to state 40

    EXPRESSION_F           go to state 132
    IDENTIFIER_OR_LITERAL  go to state 62


State 107

   29 STATEMENTS: STATEMENT STATEMENTS .

    $default  reduce using rule 29 (STATEMENTS)


State 108

   71 STATEMENT: LINE_STATEMENT T_SEMI_COLON .

    $default  reduce using rule 71 (STATEMENT)


State 109

   46 ASSIGNMENT: T_IDENTIFIER . ASSIGNMENT_OPERATOR EXPRESSION_GRAMMAR
   47           | T_IDENTIFIER . ASSIGNMENT_OPERATOR ASSIGNMENT
   84 VARIABLE_LIST: T_IDENTIFIER . T_COMMA VARIABLE_LIST
   86              | T_IDENTIFIER .

    T_OP_ASSIGNMENT           shift, and go to state 68
    T_OP_ADD_ASSIGNMENT       shift, and go to state 69
    T_OP_SUBTRACT_ASSIGNMENT  shift, and go to state 70
    T_OP_MULTIPLY_ASSIGNMENT  shift, and go to state 71
    T_OP_DIVIDE_ASSIGNMENT    shift, and go to state 72
    T_OP_MOD_ASSIGNMENT       shift, and go to state 73
    T_COMMA                   shift, and go to state 133

    $default  reduce using rule 86 (VARIABLE_LIST)

    ASSIGNMENT_OPERATOR  go to state 75


State 110

   85 VARIABLE_LIST: ASSIGNMENT . T_COMMA VARIABLE_LIST
   87              | ASSIGNMENT .

    T_COMMA  shift, and go to state 134

    $default  reduce using rule 87 (VARIABLE_LIST)


State 111

   83 VARIABLE_DECLARATION: TYPE VARIABLE_LIST .

    $default  reduce using rule 83 (VARIABLE_DECLARATION)


State 112

   15 FUNCTION_PROTOTYPE: TYPE T_IDENTIFIER T_PARAN_OPEN . TYPE_LIST T_PARAN_CLOSE T_SEMI_COLON
   16                   | TYPE T_IDENTIFIER T_PARAN_OPEN . T_PARAN_CLOSE T_SEMI_COLON
   19 FUNCTION_DEFINITION: TYPE T_IDENTIFIER T_PARAN_OPEN . FUNCTION_PARAMETER_LIST T_PARAN_CLOSE T_SEMI_COLON
   20 FUNCTION_DECLARATION: TYPE T_IDENTIFIER T_PARAN_OPEN . FUNCTION_PARAMETER_LIST T_PARAN_CLOSE BLOCK
   21                     | TYPE T_IDENTIFIER T_PARAN_OPEN . T_PARAN_CLOSE BLOCK

    T_TYPE_INT     shift, and go to state 1
    T_TYPE_FLOAT   shift, and go to state 2
    T_TYPE_DOUBLE  shift, and go to state 3
    T_TYPE_STRING  shift, and go to state 4
    T_TYPE_CHAR    shift, and go to state 5
    T_TYPE_VOID    shift, and go to state 6
    T_PARAN_CLOSE  shift, and go to state 135

    TYPE_LIST                go to state 136
    FUNCTION_PARAMETER_LIST  go to state 137
    TYPE                     go to state 138


State 113

    6 INCLUDE: T_HEADER_INCLUDE T_REL_OP_LESS_THAN T_HEADER_FILE T_REL_OP_GREATER_THAN .

    $default  reduce using rule 6 (INCLUDE)


State 114

    4 INCLUDE: INCLUDE T_HEADER_INCLUDE T_REL_OP_LESS_THAN T_HEADER_FILE . T_REL_OP_GREATER_THAN

    T_REL_OP_GREATER_THAN  shift, and go to state 139


State 115

   47 ASSIGNMENT: T_IDENTIFIER ASSIGNMENT_OPERATOR ASSIGNMENT .

    $default  reduce using rule 47 (ASSIGNMENT)


State 116

   46 ASSIGNMENT: T_IDENTIFIER ASSIGNMENT_OPERATOR EXPRESSION_GRAMMAR .
   57 EXPRESSION_GRAMMAR: EXPRESSION_GRAMMAR . T_OP_ADD EXPRESSION_TERM
   58                   | EXPRESSION_GRAMMAR . T_OP_SUBTRACT EXPRESSION_TERM

    T_OP_ADD       shift, and go to state 102
    T_OP_SUBTRACT  shift, and go to state 103

    $default  reduce using rule 46 (ASSIGNMENT)


State 117

   31 IF_BLOCK: T_CONSTRUCT_IF T_PARAN_OPEN EXPRESSION . T_PARAN_CLOSE STATEMENT
   43 CONDITIONAL_EXPRESSION: EXPRESSION . LOGICAL_OPERATOR EXPRESSION_GRAMMAR
   44                       | EXPRESSION . RELATIONAL_OPERATOR EXPRESSION_GRAMMAR
   45                       | EXPRESSION . BITWISE_OPERATOR EXPRESSION_GRAMMAR

    T_REL_OP_GREATER_THAN        shift, and go to state 88
    T_REL_OP_LESS_THAN           shift, and go to state 89
    T_REL_OP_GREATER_THAN_EQUAL  shift, and go to state 90
    T_REL_OP_LESS_THAN_EQUAL     shift, and go to state 91
    T_REL_OP_EQUAL               shift, and go to state 92
    T_REL_OP_NOT_EQUAL           shift, and go to state 93
    T_LOG_OP_OR                  shift, and go to state 94
    T_LOG_OP_AND                 shift, and go to state 95
    T_BIT_OP_AND                 shift, and go to state 96
    T_BIT_OP_OR                  shift, and go to state 97
    T_BIT_OP_XOR                 shift, and go to state 98
    T_PARAN_CLOSE                shift, and go to state 140

    BITWISE_OPERATOR     go to state 99
    LOGICAL_OPERATOR     go to state 100
    RELATIONAL_OPERATOR  go to state 101


State 118

   33 FOR_BLOCK: T_CONSTRUCT_FOR T_PARAN_OPEN FOR_INIT_STATEMENT . T_SEMI_COLON FOR_CONDITION_STATEMENT T_SEMI_COLON FOR_ACTION_STATEMENT T_PARAN_CLOSE STATEMENT

    T_SEMI_COLON  shift, and go to state 141


State 119

   35 FOR_INIT_STATEMENT: LINE_STATEMENT .

    $default  reduce using rule 35 (FOR_INIT_STATEMENT)


State 120

   43 CONDITIONAL_EXPRESSION: EXPRESSION . LOGICAL_OPERATOR EXPRESSION_GRAMMAR
   44                       | EXPRESSION . RELATIONAL_OPERATOR EXPRESSION_GRAMMAR
   45                       | EXPRESSION . BITWISE_OPERATOR EXPRESSION_GRAMMAR
   89 EXTRACTION_LIST: EXPRESSION . T_IO_EXTRACTION EXTRACTION_LIST
   90                | EXPRESSION .

    T_REL_OP_GREATER_THAN        shift, and go to state 88
    T_REL_OP_LESS_THAN           shift, and go to state 89
    T_REL_OP_GREATER_THAN_EQUAL  shift, and go to state 90
    T_REL_OP_LESS_THAN_EQUAL     shift, and go to state 91
    T_REL_OP_EQUAL               shift, and go to state 92
    T_REL_OP_NOT_EQUAL           shift, and go to state 93
    T_LOG_OP_OR                  shift, and go to state 94
    T_LOG_OP_AND                 shift, and go to state 95
    T_BIT_OP_AND                 shift, and go to state 96
    T_BIT_OP_OR                  shift, and go to state 97
    T_BIT_OP_XOR                 shift, and go to state 98
    T_IO_EXTRACTION              shift, and go to state 142

    $default  reduce using rule 90 (EXTRACTION_LIST)

    BITWISE_OPERATOR     go to state 99
    LOGICAL_OPERATOR     go to state 100
    RELATIONAL_OPERATOR  go to state 101


State 121

   88 COUT: T_IO_COUT T_IO_EXTRACTION EXTRACTION_LIST .

    $default  reduce using rule 88 (COUT)


State 122

   92 INSERTION_LIST: T_IDENTIFIER . T_IO_EXTRACTION INSERTION_LIST
   93               | T_IDENTIFIER .

    T_IO_EXTRACTION  shift, and go to state 143

    $default  reduce using rule 93 (INSERTION_LIST)


State 123

   91 CIN: T_IO_CIN T_IO_INSERTION INSERTION_LIST .

    $default  reduce using rule 91 (CIN)


State 124

   66 EXPRESSION_F: T_PARAN_OPEN EXPRESSION T_PARAN_CLOSE .

    $default  reduce using rule 66 (EXPRESSION_F)


State 125

   45 CONDITIONAL_EXPRESSION: EXPRESSION BITWISE_OPERATOR EXPRESSION_GRAMMAR .
   57 EXPRESSION_GRAMMAR: EXPRESSION_GRAMMAR . T_OP_ADD EXPRESSION_TERM
   58                   | EXPRESSION_GRAMMAR . T_OP_SUBTRACT EXPRESSION_TERM

    T_OP_ADD       shift, and go to state 102
    T_OP_SUBTRACT  shift, and go to state 103

    $default  reduce using rule 45 (CONDITIONAL_EXPRESSION)


State 126

   43 CONDITIONAL_EXPRESSION: EXPRESSION LOGICAL_OPERATOR EXPRESSION_GRAMMAR .
   57 EXPRESSION_GRAMMAR: EXPRESSION_GRAMMAR . T_OP_ADD EXPRESSION_TERM
   58                   | EXPRESSION_GRAMMAR . T_OP_SUBTRACT EXPRESSION_TERM

    T_OP_ADD       shift, and go to state 102
    T_OP_SUBTRACT  shift, and go to state 103

    $default  reduce using rule 43 (CONDITIONAL_EXPRESSION)


State 127

   44 CONDITIONAL_EXPRESSION: EXPRESSION RELATIONAL_OPERATOR EXPRESSION_GRAMMAR .
   57 EXPRESSION_GRAMMAR: EXPRESSION_GRAMMAR . T_OP_ADD EXPRESSION_TERM
   58                   | EXPRESSION_GRAMMAR . T_OP_SUBTRACT EXPRESSION_TERM

    T_OP_ADD       shift, and go to state 102
    T_OP_SUBTRACT  shift, and go to state 103

    $default  reduce using rule 44 (CONDITIONAL_EXPRESSION)


State 128

   57 EXPRESSION_GRAMMAR: EXPRESSION_GRAMMAR T_OP_ADD EXPRESSION_TERM .
   60 EXPRESSION_TERM: EXPRESSION_TERM . T_OP_MULTIPLY EXPRESSION_F
   61                | EXPRESSION_TERM . T_OP_DIVIDE EXPRESSION_F
   62                | EXPRESSION_TERM . T_OP_MOD EXPRESSION_F

    T_OP_MULTIPLY  shift, and go to state 104
    T_OP_DIVIDE    shift, and go to state 105
    T_OP_MOD       shift, and go to state 106

    $default  reduce using rule 57 (EXPRESSION_GRAMMAR)


State 129

   58 EXPRESSION_GRAMMAR: EXPRESSION_GRAMMAR T_OP_SUBTRACT EXPRESSION_TERM .
   60 EXPRESSION_TERM: EXPRESSION_TERM . T_OP_MULTIPLY EXPRESSION_F
   61                | EXPRESSION_TERM . T_OP_DIVIDE EXPRESSION_F
   62                | EXPRESSION_TERM . T_OP_MOD EXPRESSION_F

    T_OP_MULTIPLY  shift, and go to state 104
    T_OP_DIVIDE    shift, and go to state 105
    T_OP_MOD       shift, and go to state 106

    $default  reduce using rule 58 (EXPRESSION_GRAMMAR)


State 130

   60 EXPRESSION_TERM: EXPRESSION_TERM T_OP_MULTIPLY EXPRESSION_F .

    $default  reduce using rule 60 (EXPRESSION_TERM)


State 131

   61 EXPRESSION_TERM: EXPRESSION_TERM T_OP_DIVIDE EXPRESSION_F .

    $default  reduce using rule 61 (EXPRESSION_TERM)


State 132

   62 EXPRESSION_TERM: EXPRESSION_TERM T_OP_MOD EXPRESSION_F .

    $default  reduce using rule 62 (EXPRESSION_TERM)


State 133

   84 VARIABLE_LIST: T_IDENTIFIER T_COMMA . VARIABLE_LIST

    T_IDENTIFIER  shift, and go to state 109

    ASSIGNMENT     go to state 110
    VARIABLE_LIST  go to state 144


State 134

   85 VARIABLE_LIST: ASSIGNMENT T_COMMA . VARIABLE_LIST

    T_IDENTIFIER  shift, and go to state 109

    ASSIGNMENT     go to state 110
    VARIABLE_LIST  go to state 145


State 135

   16 FUNCTION_PROTOTYPE: TYPE T_IDENTIFIER T_PARAN_OPEN T_PARAN_CLOSE . T_SEMI_COLON
   21 FUNCTION_DECLARATION: TYPE T_IDENTIFIER T_PARAN_OPEN T_PARAN_CLOSE . BLOCK

    T_BLOCK_START  shift, and go to state 7
    T_SEMI_COLON   shift, and go to state 146

    BLOCK        go to state 147
    BLOCK_START  go to state 18


State 136

   15 FUNCTION_PROTOTYPE: TYPE T_IDENTIFIER T_PARAN_OPEN TYPE_LIST . T_PARAN_CLOSE T_SEMI_COLON

    T_PARAN_CLOSE  shift, and go to state 148


State 137

   19 FUNCTION_DEFINITION: TYPE T_IDENTIFIER T_PARAN_OPEN FUNCTION_PARAMETER_LIST . T_PARAN_CLOSE T_SEMI_COLON
   20 FUNCTION_DECLARATION: TYPE T_IDENTIFIER T_PARAN_OPEN FUNCTION_PARAMETER_LIST . T_PARAN_CLOSE BLOCK

    T_PARAN_CLOSE  shift, and go to state 149


State 138

   17 TYPE_LIST: TYPE . T_COMMA TYPE_LIST
   18          | TYPE .
   22 FUNCTION_PARAMETER_LIST: TYPE . T_IDENTIFIER T_COMMA FUNCTION_PARAMETER_LIST
   23                        | TYPE . T_IDENTIFIER T_OP_ASSIGNMENT EXPRESSION T_COMMA FUNCTION_PARAMETER_LIST
   24                        | TYPE . T_IDENTIFIER
   25                        | TYPE . T_IDENTIFIER T_OP_ASSIGNMENT EXPRESSION

    T_IDENTIFIER  shift, and go to state 150
    T_COMMA       shift, and go to state 151

    $default  reduce using rule 18 (TYPE_LIST)


State 139

    4 INCLUDE: INCLUDE T_HEADER_INCLUDE T_REL_OP_LESS_THAN T_HEADER_FILE T_REL_OP_GREATER_THAN .

    $default  reduce using rule 4 (INCLUDE)


State 140

   31 IF_BLOCK: T_CONSTRUCT_IF T_PARAN_OPEN EXPRESSION T_PARAN_CLOSE . STATEMENT

    T_TYPE_INT        shift, and go to state 1
    T_TYPE_FLOAT      shift, and go to state 2
    T_TYPE_DOUBLE     shift, and go to state 3
    T_TYPE_STRING     shift, and go to state 4
    T_TYPE_CHAR       shift, and go to state 5
    T_TYPE_VOID       shift, and go to state 6
    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 29
    T_CONSTRUCT_IF    shift, and go to state 30
    T_CONSTRUCT_ELSE  shift, and go to state 31
    T_CONSTRUCT_FOR   shift, and go to state 32
    T_BLOCK_START     shift, and go to state 7
    T_BIT_OP_NOT      shift, and go to state 33
    T_OP_DECREMENT    shift, and go to state 34
    T_IO_COUT         shift, and go to state 35
    T_IO_CIN          shift, and go to state 36
    T_JUMP_BREAK      shift, and go to state 37
    T_JUMP_EXIT       shift, and go to state 38
    T_JUMP_CONTINUE   shift, and go to state 39
    T_PARAN_OPEN      shift, and go to state 40
    T_SEMI_COLON      shift, and go to state 41
    T_RETURN          shift, and go to state 42

    BLOCK                   go to state 43
    BLOCK_START             go to state 18
    IF_BLOCK                go to state 45
    ELSE_BLOCK              go to state 46
    FOR_BLOCK               go to state 47
    CONDITIONAL_EXPRESSION  go to state 48
    ASSIGNMENT              go to state 49
    EXPRESSION              go to state 50
    EXPRESSION_GRAMMAR      go to state 51
    EXPRESSION_TERM         go to state 52
    EXPRESSION_F            go to state 53
    BLOCK_STATEMENT         go to state 54
    STATEMENT               go to state 152
    JUMP_STATEMENT          go to state 56
    LINE_STATEMENT          go to state 57
    VARIABLE_DECLARATION    go to state 58
    COUT                    go to state 59
    CIN                     go to state 60
    RETURN                  go to state 61
    IDENTIFIER_OR_LITERAL   go to state 62
    TYPE                    go to state 63


State 141

   33 FOR_BLOCK: T_CONSTRUCT_FOR T_PARAN_OPEN FOR_INIT_STATEMENT T_SEMI_COLON . FOR_CONDITION_STATEMENT T_SEMI_COLON FOR_ACTION_STATEMENT T_PARAN_CLOSE STATEMENT

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 29
    T_BIT_OP_NOT      shift, and go to state 33
    T_OP_DECREMENT    shift, and go to state 34
    T_PARAN_OPEN      shift, and go to state 40

    $default  reduce using rule 36 (FOR_CONDITION_STATEMENT)

    FOR_CONDITION_STATEMENT  go to state 153
    CONDITIONAL_EXPRESSION   go to state 154
    ASSIGNMENT               go to state 49
    EXPRESSION               go to state 155
    EXPRESSION_GRAMMAR       go to state 51
    EXPRESSION_TERM          go to state 52
    EXPRESSION_F             go to state 53
    IDENTIFIER_OR_LITERAL    go to state 62


State 142

   89 EXTRACTION_LIST: EXPRESSION T_IO_EXTRACTION . EXTRACTION_LIST

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 29
    T_BIT_OP_NOT      shift, and go to state 33
    T_OP_DECREMENT    shift, and go to state 34
    T_PARAN_OPEN      shift, and go to state 40

    CONDITIONAL_EXPRESSION  go to state 48
    ASSIGNMENT              go to state 49
    EXPRESSION              go to state 120
    EXPRESSION_GRAMMAR      go to state 51
    EXPRESSION_TERM         go to state 52
    EXPRESSION_F            go to state 53
    EXTRACTION_LIST         go to state 156
    IDENTIFIER_OR_LITERAL   go to state 62


State 143

   92 INSERTION_LIST: T_IDENTIFIER T_IO_EXTRACTION . INSERTION_LIST

    T_IDENTIFIER  shift, and go to state 122

    INSERTION_LIST  go to state 157


State 144

   84 VARIABLE_LIST: T_IDENTIFIER T_COMMA VARIABLE_LIST .

    $default  reduce using rule 84 (VARIABLE_LIST)


State 145

   85 VARIABLE_LIST: ASSIGNMENT T_COMMA VARIABLE_LIST .

    $default  reduce using rule 85 (VARIABLE_LIST)


State 146

   16 FUNCTION_PROTOTYPE: TYPE T_IDENTIFIER T_PARAN_OPEN T_PARAN_CLOSE T_SEMI_COLON .

    $default  reduce using rule 16 (FUNCTION_PROTOTYPE)


State 147

   21 FUNCTION_DECLARATION: TYPE T_IDENTIFIER T_PARAN_OPEN T_PARAN_CLOSE BLOCK .

    $default  reduce using rule 21 (FUNCTION_DECLARATION)


State 148

   15 FUNCTION_PROTOTYPE: TYPE T_IDENTIFIER T_PARAN_OPEN TYPE_LIST T_PARAN_CLOSE . T_SEMI_COLON

    T_SEMI_COLON  shift, and go to state 158


State 149

   19 FUNCTION_DEFINITION: TYPE T_IDENTIFIER T_PARAN_OPEN FUNCTION_PARAMETER_LIST T_PARAN_CLOSE . T_SEMI_COLON
   20 FUNCTION_DECLARATION: TYPE T_IDENTIFIER T_PARAN_OPEN FUNCTION_PARAMETER_LIST T_PARAN_CLOSE . BLOCK

    T_BLOCK_START  shift, and go to state 7
    T_SEMI_COLON   shift, and go to state 159

    BLOCK        go to state 160
    BLOCK_START  go to state 18


State 150

   22 FUNCTION_PARAMETER_LIST: TYPE T_IDENTIFIER . T_COMMA FUNCTION_PARAMETER_LIST
   23                        | TYPE T_IDENTIFIER . T_OP_ASSIGNMENT EXPRESSION T_COMMA FUNCTION_PARAMETER_LIST
   24                        | TYPE T_IDENTIFIER .
   25                        | TYPE T_IDENTIFIER . T_OP_ASSIGNMENT EXPRESSION

    T_OP_ASSIGNMENT  shift, and go to state 161
    T_COMMA          shift, and go to state 162

    $default  reduce using rule 24 (FUNCTION_PARAMETER_LIST)


State 151

   17 TYPE_LIST: TYPE T_COMMA . TYPE_LIST

    T_TYPE_INT     shift, and go to state 1
    T_TYPE_FLOAT   shift, and go to state 2
    T_TYPE_DOUBLE  shift, and go to state 3
    T_TYPE_STRING  shift, and go to state 4
    T_TYPE_CHAR    shift, and go to state 5
    T_TYPE_VOID    shift, and go to state 6

    TYPE_LIST  go to state 163
    TYPE       go to state 164


State 152

   31 IF_BLOCK: T_CONSTRUCT_IF T_PARAN_OPEN EXPRESSION T_PARAN_CLOSE STATEMENT .

    $default  reduce using rule 31 (IF_BLOCK)


State 153

   33 FOR_BLOCK: T_CONSTRUCT_FOR T_PARAN_OPEN FOR_INIT_STATEMENT T_SEMI_COLON FOR_CONDITION_STATEMENT . T_SEMI_COLON FOR_ACTION_STATEMENT T_PARAN_CLOSE STATEMENT

    T_SEMI_COLON  shift, and go to state 165


State 154

   37 FOR_CONDITION_STATEMENT: CONDITIONAL_EXPRESSION .
   55 EXPRESSION: CONDITIONAL_EXPRESSION .

    T_SEMI_COLON  reduce using rule 37 (FOR_CONDITION_STATEMENT)
    $default      reduce using rule 55 (EXPRESSION)


State 155

   43 CONDITIONAL_EXPRESSION: EXPRESSION . LOGICAL_OPERATOR EXPRESSION_GRAMMAR
   44                       | EXPRESSION . RELATIONAL_OPERATOR EXPRESSION_GRAMMAR
   45                       | EXPRESSION . BITWISE_OPERATOR EXPRESSION_GRAMMAR

    T_REL_OP_GREATER_THAN        shift, and go to state 88
    T_REL_OP_LESS_THAN           shift, and go to state 89
    T_REL_OP_GREATER_THAN_EQUAL  shift, and go to state 90
    T_REL_OP_LESS_THAN_EQUAL     shift, and go to state 91
    T_REL_OP_EQUAL               shift, and go to state 92
    T_REL_OP_NOT_EQUAL           shift, and go to state 93
    T_LOG_OP_OR                  shift, and go to state 94
    T_LOG_OP_AND                 shift, and go to state 95
    T_BIT_OP_AND                 shift, and go to state 96
    T_BIT_OP_OR                  shift, and go to state 97
    T_BIT_OP_XOR                 shift, and go to state 98

    BITWISE_OPERATOR     go to state 99
    LOGICAL_OPERATOR     go to state 100
    RELATIONAL_OPERATOR  go to state 101


State 156

   89 EXTRACTION_LIST: EXPRESSION T_IO_EXTRACTION EXTRACTION_LIST .

    $default  reduce using rule 89 (EXTRACTION_LIST)


State 157

   92 INSERTION_LIST: T_IDENTIFIER T_IO_EXTRACTION INSERTION_LIST .

    $default  reduce using rule 92 (INSERTION_LIST)


State 158

   15 FUNCTION_PROTOTYPE: TYPE T_IDENTIFIER T_PARAN_OPEN TYPE_LIST T_PARAN_CLOSE T_SEMI_COLON .

    $default  reduce using rule 15 (FUNCTION_PROTOTYPE)


State 159

   19 FUNCTION_DEFINITION: TYPE T_IDENTIFIER T_PARAN_OPEN FUNCTION_PARAMETER_LIST T_PARAN_CLOSE T_SEMI_COLON .

    $default  reduce using rule 19 (FUNCTION_DEFINITION)


State 160

   20 FUNCTION_DECLARATION: TYPE T_IDENTIFIER T_PARAN_OPEN FUNCTION_PARAMETER_LIST T_PARAN_CLOSE BLOCK .

    $default  reduce using rule 20 (FUNCTION_DECLARATION)


State 161

   23 FUNCTION_PARAMETER_LIST: TYPE T_IDENTIFIER T_OP_ASSIGNMENT . EXPRESSION T_COMMA FUNCTION_PARAMETER_LIST
   25                        | TYPE T_IDENTIFIER T_OP_ASSIGNMENT . EXPRESSION

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 29
    T_BIT_OP_NOT      shift, and go to state 33
    T_OP_DECREMENT    shift, and go to state 34
    T_PARAN_OPEN      shift, and go to state 40

    CONDITIONAL_EXPRESSION  go to state 48
    ASSIGNMENT              go to state 49
    EXPRESSION              go to state 166
    EXPRESSION_GRAMMAR      go to state 51
    EXPRESSION_TERM         go to state 52
    EXPRESSION_F            go to state 53
    IDENTIFIER_OR_LITERAL   go to state 62


State 162

   22 FUNCTION_PARAMETER_LIST: TYPE T_IDENTIFIER T_COMMA . FUNCTION_PARAMETER_LIST

    T_TYPE_INT     shift, and go to state 1
    T_TYPE_FLOAT   shift, and go to state 2
    T_TYPE_DOUBLE  shift, and go to state 3
    T_TYPE_STRING  shift, and go to state 4
    T_TYPE_CHAR    shift, and go to state 5
    T_TYPE_VOID    shift, and go to state 6

    FUNCTION_PARAMETER_LIST  go to state 167
    TYPE                     go to state 168


State 163

   17 TYPE_LIST: TYPE T_COMMA TYPE_LIST .

    $default  reduce using rule 17 (TYPE_LIST)


State 164

   17 TYPE_LIST: TYPE . T_COMMA TYPE_LIST
   18          | TYPE .

    T_COMMA  shift, and go to state 151

    $default  reduce using rule 18 (TYPE_LIST)


State 165

   33 FOR_BLOCK: T_CONSTRUCT_FOR T_PARAN_OPEN FOR_INIT_STATEMENT T_SEMI_COLON FOR_CONDITION_STATEMENT T_SEMI_COLON . FOR_ACTION_STATEMENT T_PARAN_CLOSE STATEMENT

    T_TYPE_INT        shift, and go to state 1
    T_TYPE_FLOAT      shift, and go to state 2
    T_TYPE_DOUBLE     shift, and go to state 3
    T_TYPE_STRING     shift, and go to state 4
    T_TYPE_CHAR       shift, and go to state 5
    T_TYPE_VOID       shift, and go to state 6
    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 29
    T_BIT_OP_NOT      shift, and go to state 33
    T_OP_DECREMENT    shift, and go to state 34
    T_IO_COUT         shift, and go to state 35
    T_IO_CIN          shift, and go to state 36
    T_JUMP_BREAK      shift, and go to state 37
    T_JUMP_EXIT       shift, and go to state 38
    T_JUMP_CONTINUE   shift, and go to state 39
    T_PARAN_OPEN      shift, and go to state 40
    T_RETURN          shift, and go to state 42

    $default  reduce using rule 38 (FOR_ACTION_STATEMENT)

    FOR_ACTION_STATEMENT    go to state 169
    CONDITIONAL_EXPRESSION  go to state 48
    ASSIGNMENT              go to state 49
    EXPRESSION              go to state 50
    EXPRESSION_GRAMMAR      go to state 51
    EXPRESSION_TERM         go to state 52
    EXPRESSION_F            go to state 53
    JUMP_STATEMENT          go to state 56
    LINE_STATEMENT          go to state 170
    VARIABLE_DECLARATION    go to state 58
    COUT                    go to state 59
    CIN                     go to state 60
    RETURN                  go to state 61
    IDENTIFIER_OR_LITERAL   go to state 62
    TYPE                    go to state 63


State 166

   23 FUNCTION_PARAMETER_LIST: TYPE T_IDENTIFIER T_OP_ASSIGNMENT EXPRESSION . T_COMMA FUNCTION_PARAMETER_LIST
   25                        | TYPE T_IDENTIFIER T_OP_ASSIGNMENT EXPRESSION .
   43 CONDITIONAL_EXPRESSION: EXPRESSION . LOGICAL_OPERATOR EXPRESSION_GRAMMAR
   44                       | EXPRESSION . RELATIONAL_OPERATOR EXPRESSION_GRAMMAR
   45                       | EXPRESSION . BITWISE_OPERATOR EXPRESSION_GRAMMAR

    T_REL_OP_GREATER_THAN        shift, and go to state 88
    T_REL_OP_LESS_THAN           shift, and go to state 89
    T_REL_OP_GREATER_THAN_EQUAL  shift, and go to state 90
    T_REL_OP_LESS_THAN_EQUAL     shift, and go to state 91
    T_REL_OP_EQUAL               shift, and go to state 92
    T_REL_OP_NOT_EQUAL           shift, and go to state 93
    T_LOG_OP_OR                  shift, and go to state 94
    T_LOG_OP_AND                 shift, and go to state 95
    T_BIT_OP_AND                 shift, and go to state 96
    T_BIT_OP_OR                  shift, and go to state 97
    T_BIT_OP_XOR                 shift, and go to state 98
    T_COMMA                      shift, and go to state 171

    $default  reduce using rule 25 (FUNCTION_PARAMETER_LIST)

    BITWISE_OPERATOR     go to state 99
    LOGICAL_OPERATOR     go to state 100
    RELATIONAL_OPERATOR  go to state 101


State 167

   22 FUNCTION_PARAMETER_LIST: TYPE T_IDENTIFIER T_COMMA FUNCTION_PARAMETER_LIST .

    $default  reduce using rule 22 (FUNCTION_PARAMETER_LIST)


State 168

   22 FUNCTION_PARAMETER_LIST: TYPE . T_IDENTIFIER T_COMMA FUNCTION_PARAMETER_LIST
   23                        | TYPE . T_IDENTIFIER T_OP_ASSIGNMENT EXPRESSION T_COMMA FUNCTION_PARAMETER_LIST
   24                        | TYPE . T_IDENTIFIER
   25                        | TYPE . T_IDENTIFIER T_OP_ASSIGNMENT EXPRESSION

    T_IDENTIFIER  shift, and go to state 150


State 169

   33 FOR_BLOCK: T_CONSTRUCT_FOR T_PARAN_OPEN FOR_INIT_STATEMENT T_SEMI_COLON FOR_CONDITION_STATEMENT T_SEMI_COLON FOR_ACTION_STATEMENT . T_PARAN_CLOSE STATEMENT

    T_PARAN_CLOSE  shift, and go to state 172


State 170

   39 FOR_ACTION_STATEMENT: LINE_STATEMENT .

    $default  reduce using rule 39 (FOR_ACTION_STATEMENT)


State 171

   23 FUNCTION_PARAMETER_LIST: TYPE T_IDENTIFIER T_OP_ASSIGNMENT EXPRESSION T_COMMA . FUNCTION_PARAMETER_LIST

    T_TYPE_INT     shift, and go to state 1
    T_TYPE_FLOAT   shift, and go to state 2
    T_TYPE_DOUBLE  shift, and go to state 3
    T_TYPE_STRING  shift, and go to state 4
    T_TYPE_CHAR    shift, and go to state 5
    T_TYPE_VOID    shift, and go to state 6

    FUNCTION_PARAMETER_LIST  go to state 173
    TYPE                     go to state 168


State 172

   33 FOR_BLOCK: T_CONSTRUCT_FOR T_PARAN_OPEN FOR_INIT_STATEMENT T_SEMI_COLON FOR_CONDITION_STATEMENT T_SEMI_COLON FOR_ACTION_STATEMENT T_PARAN_CLOSE . STATEMENT

    T_TYPE_INT        shift, and go to state 1
    T_TYPE_FLOAT      shift, and go to state 2
    T_TYPE_DOUBLE     shift, and go to state 3
    T_TYPE_STRING     shift, and go to state 4
    T_TYPE_CHAR       shift, and go to state 5
    T_TYPE_VOID       shift, and go to state 6
    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 29
    T_CONSTRUCT_IF    shift, and go to state 30
    T_CONSTRUCT_ELSE  shift, and go to state 31
    T_CONSTRUCT_FOR   shift, and go to state 32
    T_BLOCK_START     shift, and go to state 7
    T_BIT_OP_NOT      shift, and go to state 33
    T_OP_DECREMENT    shift, and go to state 34
    T_IO_COUT         shift, and go to state 35
    T_IO_CIN          shift, and go to state 36
    T_JUMP_BREAK      shift, and go to state 37
    T_JUMP_EXIT       shift, and go to state 38
    T_JUMP_CONTINUE   shift, and go to state 39
    T_PARAN_OPEN      shift, and go to state 40
    T_SEMI_COLON      shift, and go to state 41
    T_RETURN          shift, and go to state 42

    BLOCK                   go to state 43
    BLOCK_START             go to state 18
    IF_BLOCK                go to state 45
    ELSE_BLOCK              go to state 46
    FOR_BLOCK               go to state 47
    CONDITIONAL_EXPRESSION  go to state 48
    ASSIGNMENT              go to state 49
    EXPRESSION              go to state 50
    EXPRESSION_GRAMMAR      go to state 51
    EXPRESSION_TERM         go to state 52
    EXPRESSION_F            go to state 53
    BLOCK_STATEMENT         go to state 54
    STATEMENT               go to state 174
    JUMP_STATEMENT          go to state 56
    LINE_STATEMENT          go to state 57
    VARIABLE_DECLARATION    go to state 58
    COUT                    go to state 59
    CIN                     go to state 60
    RETURN                  go to state 61
    IDENTIFIER_OR_LITERAL   go to state 62
    TYPE                    go to state 63


State 173

   23 FUNCTION_PARAMETER_LIST: TYPE T_IDENTIFIER T_OP_ASSIGNMENT EXPRESSION T_COMMA FUNCTION_PARAMETER_LIST .

    $default  reduce using rule 23 (FUNCTION_PARAMETER_LIST)


State 174

   33 FOR_BLOCK: T_CONSTRUCT_FOR T_PARAN_OPEN FOR_INIT_STATEMENT T_SEMI_COLON FOR_CONDITION_STATEMENT T_SEMI_COLON FOR_ACTION_STATEMENT T_PARAN_CLOSE STATEMENT .

    $default  reduce using rule 33 (FOR_BLOCK)

Terminals unused in grammar

    T_TYPE_CLASS
    T_USER_DEFINED_TYPE
    T_ACCESS_PUBLIC
    T_ACCESS_PRIVATE
    T_ACCESS_PROTECTED
    T_BIT_OP_AND
    T_BIT_OP_OR
    T_BIT_OP_XOR
    T_BIT_OP_RIGHT_SHIFT
    T_BIT_OP_LEFT_SHIFT
    T_OP_INCREMENT
    T_OP_DECREMENT
    T_IO_CIN
    T_IO_PRINTF
    T_IO_SCANF
    T_IO_GETLINE
    T_IO_INSERTION
    T_DOUBLE_QUOTES_OPEN
    T_DOUBLE_QUOTES_CLOSE
    T_COLON
    T_SCOPE_RESOLUTION
    T_SQ_OPEN
    T_SQ_CLOSE
    T_DOT


Grammar

    0 $accept: START $end

    1 START: INCLUDE BODY
    2      | BODY
    3      | INCLUDE

    4 INCLUDE: INCLUDE T_HEADER_INCLUDE T_REL_OP_LESS_THAN T_HEADER_FILE T_REL_OP_GREATER_THAN
    5        | INCLUDE T_HEADER_INCLUDE T_STRING_LITERAL
    6        | T_HEADER_INCLUDE T_REL_OP_LESS_THAN T_HEADER_FILE T_REL_OP_GREATER_THAN
    7        | T_HEADER_INCLUDE T_STRING_LITERAL

    8 BODY: BODY_BLOCK BODY
    9     | BODY_BLOCK

   10 BODY_BLOCK: FUNCTION
   11           | BLOCK

   12 FUNCTION: FUNCTION_PROTOTYPE
   13         | FUNCTION_DEFINITION
   14         | FUNCTION_DECLARATION

   15 FUNCTION_PROTOTYPE: TYPE T_IDENTIFIER T_PARAN_OPEN TYPE_LIST T_PARAN_CLOSE T_SEMI_COLON
   16                   | TYPE T_IDENTIFIER T_PARAN_OPEN T_PARAN_CLOSE T_SEMI_COLON

   17 TYPE_LIST: TYPE T_COMMA TYPE_LIST
   18          | TYPE

   19 FUNCTION_DEFINITION: TYPE T_IDENTIFIER T_PARAN_OPEN FUNCTION_PARAMETER_LIST T_PARAN_CLOSE T_SEMI_COLON

   20 FUNCTION_DECLARATION: TYPE T_IDENTIFIER T_PARAN_OPEN FUNCTION_PARAMETER_LIST T_PARAN_CLOSE BLOCK
   21                     | TYPE T_IDENTIFIER T_PARAN_OPEN T_PARAN_CLOSE BLOCK

   22 FUNCTION_PARAMETER_LIST: TYPE T_IDENTIFIER T_COMMA FUNCTION_PARAMETER_LIST
   23                        | TYPE T_IDENTIFIER T_OP_ASSIGNMENT EXPRESSION T_COMMA FUNCTION_PARAMETER_LIST
   24                        | TYPE T_IDENTIFIER
   25                        | TYPE T_IDENTIFIER T_OP_ASSIGNMENT EXPRESSION

   26 BLOCK: BLOCK_START STATEMENTS BLOCK_END

   27 BLOCK_START: T_BLOCK_START

   28 BLOCK_END: T_BLOCK_END

   29 STATEMENTS: STATEMENT STATEMENTS
   30           | STATEMENT

   31 IF_BLOCK: T_CONSTRUCT_IF T_PARAN_OPEN EXPRESSION T_PARAN_CLOSE STATEMENT

   32 ELSE_BLOCK: T_CONSTRUCT_ELSE STATEMENT

   33 FOR_BLOCK: T_CONSTRUCT_FOR T_PARAN_OPEN FOR_INIT_STATEMENT T_SEMI_COLON FOR_CONDITION_STATEMENT T_SEMI_COLON FOR_ACTION_STATEMENT T_PARAN_CLOSE STATEMENT

   34 FOR_INIT_STATEMENT: %empty
   35                   | LINE_STATEMENT

   36 FOR_CONDITION_STATEMENT: %empty
   37                        | CONDITIONAL_EXPRESSION

   38 FOR_ACTION_STATEMENT: %empty
   39                     | LINE_STATEMENT

   40 CONDITIONAL_EXPRESSION: EXPRESSION LOGICAL_OPERATOR EXPRESSION_GRAMMAR
   41                       | EXPRESSION RELATIONAL_OPERATOR EXPRESSION_GRAMMAR

   42 ASSIGNMENT: T_IDENTIFIER T_OP_ASSIGNMENT EXPRESSION_GRAMMAR
   43           | T_IDENTIFIER T_OP_ASSIGNMENT ASSIGNMENT

   44 EXPRESSION: ASSIGNMENT
   45           | CONDITIONAL_EXPRESSION
   46           | EXPRESSION_GRAMMAR

   47 EXPRESSION_GRAMMAR: EXPRESSION_GRAMMAR T_OP_ADD EXPRESSION_TERM
   48                   | EXPRESSION_GRAMMAR T_OP_SUBTRACT EXPRESSION_TERM
   49                   | EXPRESSION_TERM

   50 EXPRESSION_TERM: EXPRESSION_TERM T_OP_MULTIPLY EXPRESSION_F
   51                | EXPRESSION_TERM T_OP_DIVIDE EXPRESSION_F
   52                | EXPRESSION_F

   53 EXPRESSION_F: IDENTIFIER_OR_LITERAL
   54             | T_PARAN_OPEN EXPRESSION T_PARAN_CLOSE

   55 BLOCK_STATEMENT: IF_BLOCK
   56                | ELSE_BLOCK
   57                | FOR_BLOCK
   58                | BLOCK

   59 STATEMENT: LINE_STATEMENT T_SEMI_COLON
   60          | BLOCK_STATEMENT
   61          | T_SEMI_COLON

   62 LINE_STATEMENT: VARIABLE_DECLARATION
   63               | EXPRESSION
   64               | COUT
   65               | RETURN

   66 VARIABLE_DECLARATION: TYPE VARIABLE_LIST

   67 VARIABLE_LIST: T_IDENTIFIER T_COMMA VARIABLE_LIST
   68              | ASSIGNMENT T_COMMA VARIABLE_LIST
   69              | T_IDENTIFIER
   70              | ASSIGNMENT

   71 COUT: T_IO_COUT T_IO_EXTRACTION EXTRACTION_LIST

   72 EXTRACTION_LIST: EXPRESSION T_IO_EXTRACTION EXTRACTION_LIST
   73                | EXPRESSION

   74 RETURN: T_RETURN EXPRESSION

   75 LOGICAL_OPERATOR: T_LOG_OP_AND
   76                 | T_LOG_OP_OR

   77 RELATIONAL_OPERATOR: T_REL_OP_EQUAL
   78                    | T_REL_OP_GREATER_THAN
   79                    | T_REL_OP_GREATER_THAN_EQUAL
   80                    | T_REL_OP_LESS_THAN
   81                    | T_REL_OP_LESS_THAN_EQUAL

   82 IDENTIFIER_OR_LITERAL: T_IDENTIFIER
   83                      | T_CHAR_LITERAL
   84                      | T_NUMBER_LITERAL
   85                      | T_STRING_LITERAL

   86 TYPE: T_TYPE_INT
   87     | T_TYPE_DOUBLE
   88     | T_TYPE_FLOAT
   89     | T_TYPE_CHAR
   90     | T_TYPE_STRING
   91     | T_TYPE_VOID


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    T_TYPE_INT (258) 86
    T_TYPE_FLOAT (259) 88
    T_TYPE_DOUBLE (260) 87
    T_TYPE_STRING (261) 90
    T_TYPE_CHAR (262) 89
    T_TYPE_VOID (263) 91
    T_TYPE_CLASS (264)
    T_USER_DEFINED_TYPE (265)
    T_NUMBER_LITERAL (266) 84
    T_STRING_LITERAL (267) 5 7 85
    T_CHAR_LITERAL (268) 83
    T_IDENTIFIER (269) 15 16 19 20 21 22 23 24 25 42 43 67 69 82
    T_CONSTRUCT_IF (270) 31
    T_CONSTRUCT_ELSE (271) 32
    T_CONSTRUCT_FOR (272) 33
    T_BLOCK_START (273) 27
    T_BLOCK_END (274) 28
    T_ACCESS_PUBLIC (275)
    T_ACCESS_PRIVATE (276)
    T_ACCESS_PROTECTED (277)
    T_HEADER_INCLUDE (278) 4 5 6 7
    T_HEADER_FILE (279) 4 6
    T_REL_OP_GREATER_THAN (280) 4 6 78
    T_REL_OP_LESS_THAN (281) 4 6 80
    T_REL_OP_GREATER_THAN_EQUAL (282) 79
    T_REL_OP_LESS_THAN_EQUAL (283) 81
    T_REL_OP_EQUAL (284) 77
    T_LOG_OP_OR (285) 76
    T_LOG_OP_AND (286) 75
    T_BIT_OP_AND (287)
    T_BIT_OP_OR (288)
    T_BIT_OP_XOR (289)
    T_BIT_OP_RIGHT_SHIFT (290)
    T_BIT_OP_LEFT_SHIFT (291)
    T_OP_ASSIGNMENT (292) 23 25 42 43
    T_OP_ADD (293) 47
    T_OP_SUBTRACT (294) 48
    T_OP_MULTIPLY (295) 50
    T_OP_DIVIDE (296) 51
    T_OP_INCREMENT (297)
    T_OP_DECREMENT (298)
    T_IO_COUT (299) 71
    T_IO_CIN (300)
    T_IO_PRINTF (301)
    T_IO_SCANF (302)
    T_IO_GETLINE (303)
    T_IO_INSERTION (304)
    T_IO_EXTRACTION (305) 71 72
    T_PARAN_OPEN (306) 15 16 19 20 21 31 33 54
    T_PARAN_CLOSE (307) 15 16 19 20 21 31 33 54
    T_SEMI_COLON (308) 15 16 19 33 59 61
    T_DOUBLE_QUOTES_OPEN (309)
    T_DOUBLE_QUOTES_CLOSE (310)
    T_COLON (311)
    T_SCOPE_RESOLUTION (312)
    T_SQ_OPEN (313)
    T_SQ_CLOSE (314)
    T_COMMA (315) 17 22 23 67 68
    T_RETURN (316) 74
    T_DOT (317)


Nonterminals, with rules where they appear

    $accept (63)
        on left: 0
    START (64)
        on left: 1 2 3
        on right: 0
    INCLUDE (65)
        on left: 4 5 6 7
        on right: 1 3 4 5
    BODY (66)
        on left: 8 9
        on right: 1 2 8
    BODY_BLOCK (67)
        on left: 10 11
        on right: 8 9
    FUNCTION (68)
        on left: 12 13 14
        on right: 10
    FUNCTION_PROTOTYPE (69)
        on left: 15 16
        on right: 12
    TYPE_LIST (70)
        on left: 17 18
        on right: 15 17
    FUNCTION_DEFINITION (71)
        on left: 19
        on right: 13
    FUNCTION_DECLARATION (72)
        on left: 20 21
        on right: 14
    FUNCTION_PARAMETER_LIST (73)
        on left: 22 23 24 25
        on right: 19 20 22 23
    BLOCK (74)
        on left: 26
        on right: 11 20 21 58
    BLOCK_START (75)
        on left: 27
        on right: 26
    BLOCK_END (76)
        on left: 28
        on right: 26
    STATEMENTS (77)
        on left: 29 30
        on right: 26 29
    IF_BLOCK (78)
        on left: 31
        on right: 55
    ELSE_BLOCK (79)
        on left: 32
        on right: 56
    FOR_BLOCK (80)
        on left: 33
        on right: 57
    FOR_INIT_STATEMENT (81)
        on left: 34 35
        on right: 33
    FOR_CONDITION_STATEMENT (82)
        on left: 36 37
        on right: 33
    FOR_ACTION_STATEMENT (83)
        on left: 38 39
        on right: 33
    CONDITIONAL_EXPRESSION (84)
        on left: 40 41
        on right: 37 45
    ASSIGNMENT (85)
        on left: 42 43
        on right: 43 44 68 70
    EXPRESSION (86)
        on left: 44 45 46
        on right: 23 25 31 40 41 54 63 72 73 74
    EXPRESSION_GRAMMAR (87)
        on left: 47 48 49
        on right: 40 41 42 46 47 48
    EXPRESSION_TERM (88)
        on left: 50 51 52
        on right: 47 48 49 50 51
    EXPRESSION_F (89)
        on left: 53 54
        on right: 50 51 52
    BLOCK_STATEMENT (90)
        on left: 55 56 57 58
        on right: 60
    STATEMENT (91)
        on left: 59 60 61
        on right: 29 30 31 32 33
    LINE_STATEMENT (92)
        on left: 62 63 64 65
        on right: 35 39 59
    VARIABLE_DECLARATION (93)
        on left: 66
        on right: 62
    VARIABLE_LIST (94)
        on left: 67 68 69 70
        on right: 66 67 68
    COUT (95)
        on left: 71
        on right: 64
    EXTRACTION_LIST (96)
        on left: 72 73
        on right: 71 72
    RETURN (97)
        on left: 74
        on right: 65
    LOGICAL_OPERATOR (98)
        on left: 75 76
        on right: 40
    RELATIONAL_OPERATOR (99)
        on left: 77 78 79 80 81
        on right: 41
    IDENTIFIER_OR_LITERAL (100)
        on left: 82 83 84 85
        on right: 53
    TYPE (101)
        on left: 86 87 88 89 90 91
        on right: 15 16 17 18 19 20 21 22 23 24 25 66


State 0

    0 $accept: . START $end

    T_TYPE_INT        shift, and go to state 1
    T_TYPE_FLOAT      shift, and go to state 2
    T_TYPE_DOUBLE     shift, and go to state 3
    T_TYPE_STRING     shift, and go to state 4
    T_TYPE_CHAR       shift, and go to state 5
    T_TYPE_VOID       shift, and go to state 6
    T_BLOCK_START     shift, and go to state 7
    T_HEADER_INCLUDE  shift, and go to state 8

    START                 go to state 9
    INCLUDE               go to state 10
    BODY                  go to state 11
    BODY_BLOCK            go to state 12
    FUNCTION              go to state 13
    FUNCTION_PROTOTYPE    go to state 14
    FUNCTION_DEFINITION   go to state 15
    FUNCTION_DECLARATION  go to state 16
    BLOCK                 go to state 17
    BLOCK_START           go to state 18
    TYPE                  go to state 19


State 1

   86 TYPE: T_TYPE_INT .

    $default  reduce using rule 86 (TYPE)


State 2

   88 TYPE: T_TYPE_FLOAT .

    $default  reduce using rule 88 (TYPE)


State 3

   87 TYPE: T_TYPE_DOUBLE .

    $default  reduce using rule 87 (TYPE)


State 4

   90 TYPE: T_TYPE_STRING .

    $default  reduce using rule 90 (TYPE)


State 5

   89 TYPE: T_TYPE_CHAR .

    $default  reduce using rule 89 (TYPE)


State 6

   91 TYPE: T_TYPE_VOID .

    $default  reduce using rule 91 (TYPE)


State 7

   27 BLOCK_START: T_BLOCK_START .

    $default  reduce using rule 27 (BLOCK_START)


State 8

    6 INCLUDE: T_HEADER_INCLUDE . T_REL_OP_LESS_THAN T_HEADER_FILE T_REL_OP_GREATER_THAN
    7        | T_HEADER_INCLUDE . T_STRING_LITERAL

    T_STRING_LITERAL    shift, and go to state 20
    T_REL_OP_LESS_THAN  shift, and go to state 21


State 9

    0 $accept: START . $end

    $end  shift, and go to state 22


State 10

    1 START: INCLUDE . BODY
    3      | INCLUDE .
    4 INCLUDE: INCLUDE . T_HEADER_INCLUDE T_REL_OP_LESS_THAN T_HEADER_FILE T_REL_OP_GREATER_THAN
    5        | INCLUDE . T_HEADER_INCLUDE T_STRING_LITERAL

    T_TYPE_INT        shift, and go to state 1
    T_TYPE_FLOAT      shift, and go to state 2
    T_TYPE_DOUBLE     shift, and go to state 3
    T_TYPE_STRING     shift, and go to state 4
    T_TYPE_CHAR       shift, and go to state 5
    T_TYPE_VOID       shift, and go to state 6
    T_BLOCK_START     shift, and go to state 7
    T_HEADER_INCLUDE  shift, and go to state 23

    $default  reduce using rule 3 (START)

    BODY                  go to state 24
    BODY_BLOCK            go to state 12
    FUNCTION              go to state 13
    FUNCTION_PROTOTYPE    go to state 14
    FUNCTION_DEFINITION   go to state 15
    FUNCTION_DECLARATION  go to state 16
    BLOCK                 go to state 17
    BLOCK_START           go to state 18
    TYPE                  go to state 19


State 11

    2 START: BODY .

    $default  reduce using rule 2 (START)


State 12

    8 BODY: BODY_BLOCK . BODY
    9     | BODY_BLOCK .

    T_TYPE_INT     shift, and go to state 1
    T_TYPE_FLOAT   shift, and go to state 2
    T_TYPE_DOUBLE  shift, and go to state 3
    T_TYPE_STRING  shift, and go to state 4
    T_TYPE_CHAR    shift, and go to state 5
    T_TYPE_VOID    shift, and go to state 6
    T_BLOCK_START  shift, and go to state 7

    $default  reduce using rule 9 (BODY)

    BODY                  go to state 25
    BODY_BLOCK            go to state 12
    FUNCTION              go to state 13
    FUNCTION_PROTOTYPE    go to state 14
    FUNCTION_DEFINITION   go to state 15
    FUNCTION_DECLARATION  go to state 16
    BLOCK                 go to state 17
    BLOCK_START           go to state 18
    TYPE                  go to state 19


State 13

   10 BODY_BLOCK: FUNCTION .

    $default  reduce using rule 10 (BODY_BLOCK)


State 14

   12 FUNCTION: FUNCTION_PROTOTYPE .

    $default  reduce using rule 12 (FUNCTION)


State 15

   13 FUNCTION: FUNCTION_DEFINITION .

    $default  reduce using rule 13 (FUNCTION)


State 16

   14 FUNCTION: FUNCTION_DECLARATION .

    $default  reduce using rule 14 (FUNCTION)


State 17

   11 BODY_BLOCK: BLOCK .

    $default  reduce using rule 11 (BODY_BLOCK)


State 18

   26 BLOCK: BLOCK_START . STATEMENTS BLOCK_END

    T_TYPE_INT        shift, and go to state 1
    T_TYPE_FLOAT      shift, and go to state 2
    T_TYPE_DOUBLE     shift, and go to state 3
    T_TYPE_STRING     shift, and go to state 4
    T_TYPE_CHAR       shift, and go to state 5
    T_TYPE_VOID       shift, and go to state 6
    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 29
    T_CONSTRUCT_IF    shift, and go to state 30
    T_CONSTRUCT_ELSE  shift, and go to state 31
    T_CONSTRUCT_FOR   shift, and go to state 32
    T_BLOCK_START     shift, and go to state 7
    T_IO_COUT         shift, and go to state 33
    T_PARAN_OPEN      shift, and go to state 34
    T_SEMI_COLON      shift, and go to state 35
    T_RETURN          shift, and go to state 36

    BLOCK                   go to state 37
    BLOCK_START             go to state 18
    STATEMENTS              go to state 38
    IF_BLOCK                go to state 39
    ELSE_BLOCK              go to state 40
    FOR_BLOCK               go to state 41
    CONDITIONAL_EXPRESSION  go to state 42
    ASSIGNMENT              go to state 43
    EXPRESSION              go to state 44
    EXPRESSION_GRAMMAR      go to state 45
    EXPRESSION_TERM         go to state 46
    EXPRESSION_F            go to state 47
    BLOCK_STATEMENT         go to state 48
    STATEMENT               go to state 49
    LINE_STATEMENT          go to state 50
    VARIABLE_DECLARATION    go to state 51
    COUT                    go to state 52
    RETURN                  go to state 53
    IDENTIFIER_OR_LITERAL   go to state 54
    TYPE                    go to state 55


State 19

   15 FUNCTION_PROTOTYPE: TYPE . T_IDENTIFIER T_PARAN_OPEN TYPE_LIST T_PARAN_CLOSE T_SEMI_COLON
   16                   | TYPE . T_IDENTIFIER T_PARAN_OPEN T_PARAN_CLOSE T_SEMI_COLON
   19 FUNCTION_DEFINITION: TYPE . T_IDENTIFIER T_PARAN_OPEN FUNCTION_PARAMETER_LIST T_PARAN_CLOSE T_SEMI_COLON
   20 FUNCTION_DECLARATION: TYPE . T_IDENTIFIER T_PARAN_OPEN FUNCTION_PARAMETER_LIST T_PARAN_CLOSE BLOCK
   21                     | TYPE . T_IDENTIFIER T_PARAN_OPEN T_PARAN_CLOSE BLOCK

    T_IDENTIFIER  shift, and go to state 56


State 20

    7 INCLUDE: T_HEADER_INCLUDE T_STRING_LITERAL .

    $default  reduce using rule 7 (INCLUDE)


State 21

    6 INCLUDE: T_HEADER_INCLUDE T_REL_OP_LESS_THAN . T_HEADER_FILE T_REL_OP_GREATER_THAN

    T_HEADER_FILE  shift, and go to state 57


State 22

    0 $accept: START $end .

    $default  accept


State 23

    4 INCLUDE: INCLUDE T_HEADER_INCLUDE . T_REL_OP_LESS_THAN T_HEADER_FILE T_REL_OP_GREATER_THAN
    5        | INCLUDE T_HEADER_INCLUDE . T_STRING_LITERAL

    T_STRING_LITERAL    shift, and go to state 58
    T_REL_OP_LESS_THAN  shift, and go to state 59


State 24

    1 START: INCLUDE BODY .

    $default  reduce using rule 1 (START)


State 25

    8 BODY: BODY_BLOCK BODY .

    $default  reduce using rule 8 (BODY)


State 26

   84 IDENTIFIER_OR_LITERAL: T_NUMBER_LITERAL .

    $default  reduce using rule 84 (IDENTIFIER_OR_LITERAL)


State 27

   85 IDENTIFIER_OR_LITERAL: T_STRING_LITERAL .

    $default  reduce using rule 85 (IDENTIFIER_OR_LITERAL)


State 28

   83 IDENTIFIER_OR_LITERAL: T_CHAR_LITERAL .

    $default  reduce using rule 83 (IDENTIFIER_OR_LITERAL)


State 29

   42 ASSIGNMENT: T_IDENTIFIER . T_OP_ASSIGNMENT EXPRESSION_GRAMMAR
   43           | T_IDENTIFIER . T_OP_ASSIGNMENT ASSIGNMENT
   82 IDENTIFIER_OR_LITERAL: T_IDENTIFIER .

    T_OP_ASSIGNMENT  shift, and go to state 60

    $default  reduce using rule 82 (IDENTIFIER_OR_LITERAL)


State 30

   31 IF_BLOCK: T_CONSTRUCT_IF . T_PARAN_OPEN EXPRESSION T_PARAN_CLOSE STATEMENT

    T_PARAN_OPEN  shift, and go to state 61


State 31

   32 ELSE_BLOCK: T_CONSTRUCT_ELSE . STATEMENT

    T_TYPE_INT        shift, and go to state 1
    T_TYPE_FLOAT      shift, and go to state 2
    T_TYPE_DOUBLE     shift, and go to state 3
    T_TYPE_STRING     shift, and go to state 4
    T_TYPE_CHAR       shift, and go to state 5
    T_TYPE_VOID       shift, and go to state 6
    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 29
    T_CONSTRUCT_IF    shift, and go to state 30
    T_CONSTRUCT_ELSE  shift, and go to state 31
    T_CONSTRUCT_FOR   shift, and go to state 32
    T_BLOCK_START     shift, and go to state 7
    T_IO_COUT         shift, and go to state 33
    T_PARAN_OPEN      shift, and go to state 34
    T_SEMI_COLON      shift, and go to state 35
    T_RETURN          shift, and go to state 36

    BLOCK                   go to state 37
    BLOCK_START             go to state 18
    IF_BLOCK                go to state 39
    ELSE_BLOCK              go to state 40
    FOR_BLOCK               go to state 41
    CONDITIONAL_EXPRESSION  go to state 42
    ASSIGNMENT              go to state 43
    EXPRESSION              go to state 44
    EXPRESSION_GRAMMAR      go to state 45
    EXPRESSION_TERM         go to state 46
    EXPRESSION_F            go to state 47
    BLOCK_STATEMENT         go to state 48
    STATEMENT               go to state 62
    LINE_STATEMENT          go to state 50
    VARIABLE_DECLARATION    go to state 51
    COUT                    go to state 52
    RETURN                  go to state 53
    IDENTIFIER_OR_LITERAL   go to state 54
    TYPE                    go to state 55


State 32

   33 FOR_BLOCK: T_CONSTRUCT_FOR . T_PARAN_OPEN FOR_INIT_STATEMENT T_SEMI_COLON FOR_CONDITION_STATEMENT T_SEMI_COLON FOR_ACTION_STATEMENT T_PARAN_CLOSE STATEMENT

    T_PARAN_OPEN  shift, and go to state 63


State 33

   71 COUT: T_IO_COUT . T_IO_EXTRACTION EXTRACTION_LIST

    T_IO_EXTRACTION  shift, and go to state 64


State 34

   54 EXPRESSION_F: T_PARAN_OPEN . EXPRESSION T_PARAN_CLOSE

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 29
    T_PARAN_OPEN      shift, and go to state 34

    CONDITIONAL_EXPRESSION  go to state 42
    ASSIGNMENT              go to state 43
    EXPRESSION              go to state 65
    EXPRESSION_GRAMMAR      go to state 45
    EXPRESSION_TERM         go to state 46
    EXPRESSION_F            go to state 47
    IDENTIFIER_OR_LITERAL   go to state 54


State 35

   61 STATEMENT: T_SEMI_COLON .

    $default  reduce using rule 61 (STATEMENT)


State 36

   74 RETURN: T_RETURN . EXPRESSION

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 29
    T_PARAN_OPEN      shift, and go to state 34

    CONDITIONAL_EXPRESSION  go to state 42
    ASSIGNMENT              go to state 43
    EXPRESSION              go to state 66
    EXPRESSION_GRAMMAR      go to state 45
    EXPRESSION_TERM         go to state 46
    EXPRESSION_F            go to state 47
    IDENTIFIER_OR_LITERAL   go to state 54


State 37

   58 BLOCK_STATEMENT: BLOCK .

    $default  reduce using rule 58 (BLOCK_STATEMENT)


State 38

   26 BLOCK: BLOCK_START STATEMENTS . BLOCK_END

    T_BLOCK_END  shift, and go to state 67

    BLOCK_END  go to state 68


State 39

   55 BLOCK_STATEMENT: IF_BLOCK .

    $default  reduce using rule 55 (BLOCK_STATEMENT)


State 40

   56 BLOCK_STATEMENT: ELSE_BLOCK .

    $default  reduce using rule 56 (BLOCK_STATEMENT)


State 41

   57 BLOCK_STATEMENT: FOR_BLOCK .

    $default  reduce using rule 57 (BLOCK_STATEMENT)


State 42

   45 EXPRESSION: CONDITIONAL_EXPRESSION .

    $default  reduce using rule 45 (EXPRESSION)


State 43

   44 EXPRESSION: ASSIGNMENT .

    $default  reduce using rule 44 (EXPRESSION)


State 44

   40 CONDITIONAL_EXPRESSION: EXPRESSION . LOGICAL_OPERATOR EXPRESSION_GRAMMAR
   41                       | EXPRESSION . RELATIONAL_OPERATOR EXPRESSION_GRAMMAR
   63 LINE_STATEMENT: EXPRESSION .

    T_REL_OP_GREATER_THAN        shift, and go to state 69
    T_REL_OP_LESS_THAN           shift, and go to state 70
    T_REL_OP_GREATER_THAN_EQUAL  shift, and go to state 71
    T_REL_OP_LESS_THAN_EQUAL     shift, and go to state 72
    T_REL_OP_EQUAL               shift, and go to state 73
    T_LOG_OP_OR                  shift, and go to state 74
    T_LOG_OP_AND                 shift, and go to state 75

    $default  reduce using rule 63 (LINE_STATEMENT)

    LOGICAL_OPERATOR     go to state 76
    RELATIONAL_OPERATOR  go to state 77


State 45

   46 EXPRESSION: EXPRESSION_GRAMMAR .
   47 EXPRESSION_GRAMMAR: EXPRESSION_GRAMMAR . T_OP_ADD EXPRESSION_TERM
   48                   | EXPRESSION_GRAMMAR . T_OP_SUBTRACT EXPRESSION_TERM

    T_OP_ADD       shift, and go to state 78
    T_OP_SUBTRACT  shift, and go to state 79

    $default  reduce using rule 46 (EXPRESSION)


State 46

   49 EXPRESSION_GRAMMAR: EXPRESSION_TERM .
   50 EXPRESSION_TERM: EXPRESSION_TERM . T_OP_MULTIPLY EXPRESSION_F
   51                | EXPRESSION_TERM . T_OP_DIVIDE EXPRESSION_F

    T_OP_MULTIPLY  shift, and go to state 80
    T_OP_DIVIDE    shift, and go to state 81

    $default  reduce using rule 49 (EXPRESSION_GRAMMAR)


State 47

   52 EXPRESSION_TERM: EXPRESSION_F .

    $default  reduce using rule 52 (EXPRESSION_TERM)


State 48

   60 STATEMENT: BLOCK_STATEMENT .

    $default  reduce using rule 60 (STATEMENT)


State 49

   29 STATEMENTS: STATEMENT . STATEMENTS
   30           | STATEMENT .

    T_TYPE_INT        shift, and go to state 1
    T_TYPE_FLOAT      shift, and go to state 2
    T_TYPE_DOUBLE     shift, and go to state 3
    T_TYPE_STRING     shift, and go to state 4
    T_TYPE_CHAR       shift, and go to state 5
    T_TYPE_VOID       shift, and go to state 6
    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 29
    T_CONSTRUCT_IF    shift, and go to state 30
    T_CONSTRUCT_ELSE  shift, and go to state 31
    T_CONSTRUCT_FOR   shift, and go to state 32
    T_BLOCK_START     shift, and go to state 7
    T_IO_COUT         shift, and go to state 33
    T_PARAN_OPEN      shift, and go to state 34
    T_SEMI_COLON      shift, and go to state 35
    T_RETURN          shift, and go to state 36

    $default  reduce using rule 30 (STATEMENTS)

    BLOCK                   go to state 37
    BLOCK_START             go to state 18
    STATEMENTS              go to state 82
    IF_BLOCK                go to state 39
    ELSE_BLOCK              go to state 40
    FOR_BLOCK               go to state 41
    CONDITIONAL_EXPRESSION  go to state 42
    ASSIGNMENT              go to state 43
    EXPRESSION              go to state 44
    EXPRESSION_GRAMMAR      go to state 45
    EXPRESSION_TERM         go to state 46
    EXPRESSION_F            go to state 47
    BLOCK_STATEMENT         go to state 48
    STATEMENT               go to state 49
    LINE_STATEMENT          go to state 50
    VARIABLE_DECLARATION    go to state 51
    COUT                    go to state 52
    RETURN                  go to state 53
    IDENTIFIER_OR_LITERAL   go to state 54
    TYPE                    go to state 55


State 50

   59 STATEMENT: LINE_STATEMENT . T_SEMI_COLON

    T_SEMI_COLON  shift, and go to state 83


State 51

   62 LINE_STATEMENT: VARIABLE_DECLARATION .

    $default  reduce using rule 62 (LINE_STATEMENT)


State 52

   64 LINE_STATEMENT: COUT .

    $default  reduce using rule 64 (LINE_STATEMENT)


State 53

   65 LINE_STATEMENT: RETURN .

    $default  reduce using rule 65 (LINE_STATEMENT)


State 54

   53 EXPRESSION_F: IDENTIFIER_OR_LITERAL .

    $default  reduce using rule 53 (EXPRESSION_F)


State 55

   66 VARIABLE_DECLARATION: TYPE . VARIABLE_LIST

    T_IDENTIFIER  shift, and go to state 84

    ASSIGNMENT     go to state 85
    VARIABLE_LIST  go to state 86


State 56

   15 FUNCTION_PROTOTYPE: TYPE T_IDENTIFIER . T_PARAN_OPEN TYPE_LIST T_PARAN_CLOSE T_SEMI_COLON
   16                   | TYPE T_IDENTIFIER . T_PARAN_OPEN T_PARAN_CLOSE T_SEMI_COLON
   19 FUNCTION_DEFINITION: TYPE T_IDENTIFIER . T_PARAN_OPEN FUNCTION_PARAMETER_LIST T_PARAN_CLOSE T_SEMI_COLON
   20 FUNCTION_DECLARATION: TYPE T_IDENTIFIER . T_PARAN_OPEN FUNCTION_PARAMETER_LIST T_PARAN_CLOSE BLOCK
   21                     | TYPE T_IDENTIFIER . T_PARAN_OPEN T_PARAN_CLOSE BLOCK

    T_PARAN_OPEN  shift, and go to state 87


State 57

    6 INCLUDE: T_HEADER_INCLUDE T_REL_OP_LESS_THAN T_HEADER_FILE . T_REL_OP_GREATER_THAN

    T_REL_OP_GREATER_THAN  shift, and go to state 88


State 58

    5 INCLUDE: INCLUDE T_HEADER_INCLUDE T_STRING_LITERAL .

    $default  reduce using rule 5 (INCLUDE)


State 59

    4 INCLUDE: INCLUDE T_HEADER_INCLUDE T_REL_OP_LESS_THAN . T_HEADER_FILE T_REL_OP_GREATER_THAN

    T_HEADER_FILE  shift, and go to state 89


State 60

   42 ASSIGNMENT: T_IDENTIFIER T_OP_ASSIGNMENT . EXPRESSION_GRAMMAR
   43           | T_IDENTIFIER T_OP_ASSIGNMENT . ASSIGNMENT

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 29
    T_PARAN_OPEN      shift, and go to state 34

    ASSIGNMENT             go to state 90
    EXPRESSION_GRAMMAR     go to state 91
    EXPRESSION_TERM        go to state 46
    EXPRESSION_F           go to state 47
    IDENTIFIER_OR_LITERAL  go to state 54


State 61

   31 IF_BLOCK: T_CONSTRUCT_IF T_PARAN_OPEN . EXPRESSION T_PARAN_CLOSE STATEMENT

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 29
    T_PARAN_OPEN      shift, and go to state 34

    CONDITIONAL_EXPRESSION  go to state 42
    ASSIGNMENT              go to state 43
    EXPRESSION              go to state 92
    EXPRESSION_GRAMMAR      go to state 45
    EXPRESSION_TERM         go to state 46
    EXPRESSION_F            go to state 47
    IDENTIFIER_OR_LITERAL   go to state 54


State 62

   32 ELSE_BLOCK: T_CONSTRUCT_ELSE STATEMENT .

    $default  reduce using rule 32 (ELSE_BLOCK)


State 63

   33 FOR_BLOCK: T_CONSTRUCT_FOR T_PARAN_OPEN . FOR_INIT_STATEMENT T_SEMI_COLON FOR_CONDITION_STATEMENT T_SEMI_COLON FOR_ACTION_STATEMENT T_PARAN_CLOSE STATEMENT

    T_TYPE_INT        shift, and go to state 1
    T_TYPE_FLOAT      shift, and go to state 2
    T_TYPE_DOUBLE     shift, and go to state 3
    T_TYPE_STRING     shift, and go to state 4
    T_TYPE_CHAR       shift, and go to state 5
    T_TYPE_VOID       shift, and go to state 6
    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 29
    T_IO_COUT         shift, and go to state 33
    T_PARAN_OPEN      shift, and go to state 34
    T_RETURN          shift, and go to state 36

    $default  reduce using rule 34 (FOR_INIT_STATEMENT)

    FOR_INIT_STATEMENT      go to state 93
    CONDITIONAL_EXPRESSION  go to state 42
    ASSIGNMENT              go to state 43
    EXPRESSION              go to state 44
    EXPRESSION_GRAMMAR      go to state 45
    EXPRESSION_TERM         go to state 46
    EXPRESSION_F            go to state 47
    LINE_STATEMENT          go to state 94
    VARIABLE_DECLARATION    go to state 51
    COUT                    go to state 52
    RETURN                  go to state 53
    IDENTIFIER_OR_LITERAL   go to state 54
    TYPE                    go to state 55


State 64

   71 COUT: T_IO_COUT T_IO_EXTRACTION . EXTRACTION_LIST

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 29
    T_PARAN_OPEN      shift, and go to state 34

    CONDITIONAL_EXPRESSION  go to state 42
    ASSIGNMENT              go to state 43
    EXPRESSION              go to state 95
    EXPRESSION_GRAMMAR      go to state 45
    EXPRESSION_TERM         go to state 46
    EXPRESSION_F            go to state 47
    EXTRACTION_LIST         go to state 96
    IDENTIFIER_OR_LITERAL   go to state 54


State 65

   40 CONDITIONAL_EXPRESSION: EXPRESSION . LOGICAL_OPERATOR EXPRESSION_GRAMMAR
   41                       | EXPRESSION . RELATIONAL_OPERATOR EXPRESSION_GRAMMAR
   54 EXPRESSION_F: T_PARAN_OPEN EXPRESSION . T_PARAN_CLOSE

    T_REL_OP_GREATER_THAN        shift, and go to state 69
    T_REL_OP_LESS_THAN           shift, and go to state 70
    T_REL_OP_GREATER_THAN_EQUAL  shift, and go to state 71
    T_REL_OP_LESS_THAN_EQUAL     shift, and go to state 72
    T_REL_OP_EQUAL               shift, and go to state 73
    T_LOG_OP_OR                  shift, and go to state 74
    T_LOG_OP_AND                 shift, and go to state 75
    T_PARAN_CLOSE                shift, and go to state 97

    LOGICAL_OPERATOR     go to state 76
    RELATIONAL_OPERATOR  go to state 77


State 66

   40 CONDITIONAL_EXPRESSION: EXPRESSION . LOGICAL_OPERATOR EXPRESSION_GRAMMAR
   41                       | EXPRESSION . RELATIONAL_OPERATOR EXPRESSION_GRAMMAR
   74 RETURN: T_RETURN EXPRESSION .

    T_REL_OP_GREATER_THAN        shift, and go to state 69
    T_REL_OP_LESS_THAN           shift, and go to state 70
    T_REL_OP_GREATER_THAN_EQUAL  shift, and go to state 71
    T_REL_OP_LESS_THAN_EQUAL     shift, and go to state 72
    T_REL_OP_EQUAL               shift, and go to state 73
    T_LOG_OP_OR                  shift, and go to state 74
    T_LOG_OP_AND                 shift, and go to state 75

    $default  reduce using rule 74 (RETURN)

    LOGICAL_OPERATOR     go to state 76
    RELATIONAL_OPERATOR  go to state 77


State 67

   28 BLOCK_END: T_BLOCK_END .

    $default  reduce using rule 28 (BLOCK_END)


State 68

   26 BLOCK: BLOCK_START STATEMENTS BLOCK_END .

    $default  reduce using rule 26 (BLOCK)


State 69

   78 RELATIONAL_OPERATOR: T_REL_OP_GREATER_THAN .

    $default  reduce using rule 78 (RELATIONAL_OPERATOR)


State 70

   80 RELATIONAL_OPERATOR: T_REL_OP_LESS_THAN .

    $default  reduce using rule 80 (RELATIONAL_OPERATOR)


State 71

   79 RELATIONAL_OPERATOR: T_REL_OP_GREATER_THAN_EQUAL .

    $default  reduce using rule 79 (RELATIONAL_OPERATOR)


State 72

   81 RELATIONAL_OPERATOR: T_REL_OP_LESS_THAN_EQUAL .

    $default  reduce using rule 81 (RELATIONAL_OPERATOR)


State 73

   77 RELATIONAL_OPERATOR: T_REL_OP_EQUAL .

    $default  reduce using rule 77 (RELATIONAL_OPERATOR)


State 74

   76 LOGICAL_OPERATOR: T_LOG_OP_OR .

    $default  reduce using rule 76 (LOGICAL_OPERATOR)


State 75

   75 LOGICAL_OPERATOR: T_LOG_OP_AND .

    $default  reduce using rule 75 (LOGICAL_OPERATOR)


State 76

   40 CONDITIONAL_EXPRESSION: EXPRESSION LOGICAL_OPERATOR . EXPRESSION_GRAMMAR

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 98
    T_PARAN_OPEN      shift, and go to state 34

    EXPRESSION_GRAMMAR     go to state 99
    EXPRESSION_TERM        go to state 46
    EXPRESSION_F           go to state 47
    IDENTIFIER_OR_LITERAL  go to state 54


State 77

   41 CONDITIONAL_EXPRESSION: EXPRESSION RELATIONAL_OPERATOR . EXPRESSION_GRAMMAR

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 98
    T_PARAN_OPEN      shift, and go to state 34

    EXPRESSION_GRAMMAR     go to state 100
    EXPRESSION_TERM        go to state 46
    EXPRESSION_F           go to state 47
    IDENTIFIER_OR_LITERAL  go to state 54


State 78

   47 EXPRESSION_GRAMMAR: EXPRESSION_GRAMMAR T_OP_ADD . EXPRESSION_TERM

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 98
    T_PARAN_OPEN      shift, and go to state 34

    EXPRESSION_TERM        go to state 101
    EXPRESSION_F           go to state 47
    IDENTIFIER_OR_LITERAL  go to state 54


State 79

   48 EXPRESSION_GRAMMAR: EXPRESSION_GRAMMAR T_OP_SUBTRACT . EXPRESSION_TERM

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 98
    T_PARAN_OPEN      shift, and go to state 34

    EXPRESSION_TERM        go to state 102
    EXPRESSION_F           go to state 47
    IDENTIFIER_OR_LITERAL  go to state 54


State 80

   50 EXPRESSION_TERM: EXPRESSION_TERM T_OP_MULTIPLY . EXPRESSION_F

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 98
    T_PARAN_OPEN      shift, and go to state 34

    EXPRESSION_F           go to state 103
    IDENTIFIER_OR_LITERAL  go to state 54


State 81

   51 EXPRESSION_TERM: EXPRESSION_TERM T_OP_DIVIDE . EXPRESSION_F

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 98
    T_PARAN_OPEN      shift, and go to state 34

    EXPRESSION_F           go to state 104
    IDENTIFIER_OR_LITERAL  go to state 54


State 82

   29 STATEMENTS: STATEMENT STATEMENTS .

    $default  reduce using rule 29 (STATEMENTS)


State 83

   59 STATEMENT: LINE_STATEMENT T_SEMI_COLON .

    $default  reduce using rule 59 (STATEMENT)


State 84

   42 ASSIGNMENT: T_IDENTIFIER . T_OP_ASSIGNMENT EXPRESSION_GRAMMAR
   43           | T_IDENTIFIER . T_OP_ASSIGNMENT ASSIGNMENT
   67 VARIABLE_LIST: T_IDENTIFIER . T_COMMA VARIABLE_LIST
   69              | T_IDENTIFIER .

    T_OP_ASSIGNMENT  shift, and go to state 60
    T_COMMA          shift, and go to state 105

    $default  reduce using rule 69 (VARIABLE_LIST)


State 85

   68 VARIABLE_LIST: ASSIGNMENT . T_COMMA VARIABLE_LIST
   70              | ASSIGNMENT .

    T_COMMA  shift, and go to state 106

    $default  reduce using rule 70 (VARIABLE_LIST)


State 86

   66 VARIABLE_DECLARATION: TYPE VARIABLE_LIST .

    $default  reduce using rule 66 (VARIABLE_DECLARATION)


State 87

   15 FUNCTION_PROTOTYPE: TYPE T_IDENTIFIER T_PARAN_OPEN . TYPE_LIST T_PARAN_CLOSE T_SEMI_COLON
   16                   | TYPE T_IDENTIFIER T_PARAN_OPEN . T_PARAN_CLOSE T_SEMI_COLON
   19 FUNCTION_DEFINITION: TYPE T_IDENTIFIER T_PARAN_OPEN . FUNCTION_PARAMETER_LIST T_PARAN_CLOSE T_SEMI_COLON
   20 FUNCTION_DECLARATION: TYPE T_IDENTIFIER T_PARAN_OPEN . FUNCTION_PARAMETER_LIST T_PARAN_CLOSE BLOCK
   21                     | TYPE T_IDENTIFIER T_PARAN_OPEN . T_PARAN_CLOSE BLOCK

    T_TYPE_INT     shift, and go to state 1
    T_TYPE_FLOAT   shift, and go to state 2
    T_TYPE_DOUBLE  shift, and go to state 3
    T_TYPE_STRING  shift, and go to state 4
    T_TYPE_CHAR    shift, and go to state 5
    T_TYPE_VOID    shift, and go to state 6
    T_PARAN_CLOSE  shift, and go to state 107

    TYPE_LIST                go to state 108
    FUNCTION_PARAMETER_LIST  go to state 109
    TYPE                     go to state 110


State 88

    6 INCLUDE: T_HEADER_INCLUDE T_REL_OP_LESS_THAN T_HEADER_FILE T_REL_OP_GREATER_THAN .

    $default  reduce using rule 6 (INCLUDE)


State 89

    4 INCLUDE: INCLUDE T_HEADER_INCLUDE T_REL_OP_LESS_THAN T_HEADER_FILE . T_REL_OP_GREATER_THAN

    T_REL_OP_GREATER_THAN  shift, and go to state 111


State 90

   43 ASSIGNMENT: T_IDENTIFIER T_OP_ASSIGNMENT ASSIGNMENT .

    $default  reduce using rule 43 (ASSIGNMENT)


State 91

   42 ASSIGNMENT: T_IDENTIFIER T_OP_ASSIGNMENT EXPRESSION_GRAMMAR .
   47 EXPRESSION_GRAMMAR: EXPRESSION_GRAMMAR . T_OP_ADD EXPRESSION_TERM
   48                   | EXPRESSION_GRAMMAR . T_OP_SUBTRACT EXPRESSION_TERM

    T_OP_ADD       shift, and go to state 78
    T_OP_SUBTRACT  shift, and go to state 79

    $default  reduce using rule 42 (ASSIGNMENT)


State 92

   31 IF_BLOCK: T_CONSTRUCT_IF T_PARAN_OPEN EXPRESSION . T_PARAN_CLOSE STATEMENT
   40 CONDITIONAL_EXPRESSION: EXPRESSION . LOGICAL_OPERATOR EXPRESSION_GRAMMAR
   41                       | EXPRESSION . RELATIONAL_OPERATOR EXPRESSION_GRAMMAR

    T_REL_OP_GREATER_THAN        shift, and go to state 69
    T_REL_OP_LESS_THAN           shift, and go to state 70
    T_REL_OP_GREATER_THAN_EQUAL  shift, and go to state 71
    T_REL_OP_LESS_THAN_EQUAL     shift, and go to state 72
    T_REL_OP_EQUAL               shift, and go to state 73
    T_LOG_OP_OR                  shift, and go to state 74
    T_LOG_OP_AND                 shift, and go to state 75
    T_PARAN_CLOSE                shift, and go to state 112

    LOGICAL_OPERATOR     go to state 76
    RELATIONAL_OPERATOR  go to state 77


State 93

   33 FOR_BLOCK: T_CONSTRUCT_FOR T_PARAN_OPEN FOR_INIT_STATEMENT . T_SEMI_COLON FOR_CONDITION_STATEMENT T_SEMI_COLON FOR_ACTION_STATEMENT T_PARAN_CLOSE STATEMENT

    T_SEMI_COLON  shift, and go to state 113


State 94

   35 FOR_INIT_STATEMENT: LINE_STATEMENT .

    $default  reduce using rule 35 (FOR_INIT_STATEMENT)


State 95

   40 CONDITIONAL_EXPRESSION: EXPRESSION . LOGICAL_OPERATOR EXPRESSION_GRAMMAR
   41                       | EXPRESSION . RELATIONAL_OPERATOR EXPRESSION_GRAMMAR
   72 EXTRACTION_LIST: EXPRESSION . T_IO_EXTRACTION EXTRACTION_LIST
   73                | EXPRESSION .

    T_REL_OP_GREATER_THAN        shift, and go to state 69
    T_REL_OP_LESS_THAN           shift, and go to state 70
    T_REL_OP_GREATER_THAN_EQUAL  shift, and go to state 71
    T_REL_OP_LESS_THAN_EQUAL     shift, and go to state 72
    T_REL_OP_EQUAL               shift, and go to state 73
    T_LOG_OP_OR                  shift, and go to state 74
    T_LOG_OP_AND                 shift, and go to state 75
    T_IO_EXTRACTION              shift, and go to state 114

    $default  reduce using rule 73 (EXTRACTION_LIST)

    LOGICAL_OPERATOR     go to state 76
    RELATIONAL_OPERATOR  go to state 77


State 96

   71 COUT: T_IO_COUT T_IO_EXTRACTION EXTRACTION_LIST .

    $default  reduce using rule 71 (COUT)


State 97

   54 EXPRESSION_F: T_PARAN_OPEN EXPRESSION T_PARAN_CLOSE .

    $default  reduce using rule 54 (EXPRESSION_F)


State 98

   82 IDENTIFIER_OR_LITERAL: T_IDENTIFIER .

    $default  reduce using rule 82 (IDENTIFIER_OR_LITERAL)


State 99

   40 CONDITIONAL_EXPRESSION: EXPRESSION LOGICAL_OPERATOR EXPRESSION_GRAMMAR .
   47 EXPRESSION_GRAMMAR: EXPRESSION_GRAMMAR . T_OP_ADD EXPRESSION_TERM
   48                   | EXPRESSION_GRAMMAR . T_OP_SUBTRACT EXPRESSION_TERM

    T_OP_ADD       shift, and go to state 78
    T_OP_SUBTRACT  shift, and go to state 79

    $default  reduce using rule 40 (CONDITIONAL_EXPRESSION)


State 100

   41 CONDITIONAL_EXPRESSION: EXPRESSION RELATIONAL_OPERATOR EXPRESSION_GRAMMAR .
   47 EXPRESSION_GRAMMAR: EXPRESSION_GRAMMAR . T_OP_ADD EXPRESSION_TERM
   48                   | EXPRESSION_GRAMMAR . T_OP_SUBTRACT EXPRESSION_TERM

    T_OP_ADD       shift, and go to state 78
    T_OP_SUBTRACT  shift, and go to state 79

    $default  reduce using rule 41 (CONDITIONAL_EXPRESSION)


State 101

   47 EXPRESSION_GRAMMAR: EXPRESSION_GRAMMAR T_OP_ADD EXPRESSION_TERM .
   50 EXPRESSION_TERM: EXPRESSION_TERM . T_OP_MULTIPLY EXPRESSION_F
   51                | EXPRESSION_TERM . T_OP_DIVIDE EXPRESSION_F

    T_OP_MULTIPLY  shift, and go to state 80
    T_OP_DIVIDE    shift, and go to state 81

    $default  reduce using rule 47 (EXPRESSION_GRAMMAR)


State 102

   48 EXPRESSION_GRAMMAR: EXPRESSION_GRAMMAR T_OP_SUBTRACT EXPRESSION_TERM .
   50 EXPRESSION_TERM: EXPRESSION_TERM . T_OP_MULTIPLY EXPRESSION_F
   51                | EXPRESSION_TERM . T_OP_DIVIDE EXPRESSION_F

    T_OP_MULTIPLY  shift, and go to state 80
    T_OP_DIVIDE    shift, and go to state 81

    $default  reduce using rule 48 (EXPRESSION_GRAMMAR)


State 103

   50 EXPRESSION_TERM: EXPRESSION_TERM T_OP_MULTIPLY EXPRESSION_F .

    $default  reduce using rule 50 (EXPRESSION_TERM)


State 104

   51 EXPRESSION_TERM: EXPRESSION_TERM T_OP_DIVIDE EXPRESSION_F .

    $default  reduce using rule 51 (EXPRESSION_TERM)


State 105

   67 VARIABLE_LIST: T_IDENTIFIER T_COMMA . VARIABLE_LIST

    T_IDENTIFIER  shift, and go to state 84

    ASSIGNMENT     go to state 85
    VARIABLE_LIST  go to state 115


State 106

   68 VARIABLE_LIST: ASSIGNMENT T_COMMA . VARIABLE_LIST

    T_IDENTIFIER  shift, and go to state 84

    ASSIGNMENT     go to state 85
    VARIABLE_LIST  go to state 116


State 107

   16 FUNCTION_PROTOTYPE: TYPE T_IDENTIFIER T_PARAN_OPEN T_PARAN_CLOSE . T_SEMI_COLON
   21 FUNCTION_DECLARATION: TYPE T_IDENTIFIER T_PARAN_OPEN T_PARAN_CLOSE . BLOCK

    T_BLOCK_START  shift, and go to state 7
    T_SEMI_COLON   shift, and go to state 117

    BLOCK        go to state 118
    BLOCK_START  go to state 18


State 108

   15 FUNCTION_PROTOTYPE: TYPE T_IDENTIFIER T_PARAN_OPEN TYPE_LIST . T_PARAN_CLOSE T_SEMI_COLON

    T_PARAN_CLOSE  shift, and go to state 119


State 109

   19 FUNCTION_DEFINITION: TYPE T_IDENTIFIER T_PARAN_OPEN FUNCTION_PARAMETER_LIST . T_PARAN_CLOSE T_SEMI_COLON
   20 FUNCTION_DECLARATION: TYPE T_IDENTIFIER T_PARAN_OPEN FUNCTION_PARAMETER_LIST . T_PARAN_CLOSE BLOCK

    T_PARAN_CLOSE  shift, and go to state 120


State 110

   17 TYPE_LIST: TYPE . T_COMMA TYPE_LIST
   18          | TYPE .
   22 FUNCTION_PARAMETER_LIST: TYPE . T_IDENTIFIER T_COMMA FUNCTION_PARAMETER_LIST
   23                        | TYPE . T_IDENTIFIER T_OP_ASSIGNMENT EXPRESSION T_COMMA FUNCTION_PARAMETER_LIST
   24                        | TYPE . T_IDENTIFIER
   25                        | TYPE . T_IDENTIFIER T_OP_ASSIGNMENT EXPRESSION

    T_IDENTIFIER  shift, and go to state 121
    T_COMMA       shift, and go to state 122

    $default  reduce using rule 18 (TYPE_LIST)


State 111

    4 INCLUDE: INCLUDE T_HEADER_INCLUDE T_REL_OP_LESS_THAN T_HEADER_FILE T_REL_OP_GREATER_THAN .

    $default  reduce using rule 4 (INCLUDE)


State 112

   31 IF_BLOCK: T_CONSTRUCT_IF T_PARAN_OPEN EXPRESSION T_PARAN_CLOSE . STATEMENT

    T_TYPE_INT        shift, and go to state 1
    T_TYPE_FLOAT      shift, and go to state 2
    T_TYPE_DOUBLE     shift, and go to state 3
    T_TYPE_STRING     shift, and go to state 4
    T_TYPE_CHAR       shift, and go to state 5
    T_TYPE_VOID       shift, and go to state 6
    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 29
    T_CONSTRUCT_IF    shift, and go to state 30
    T_CONSTRUCT_ELSE  shift, and go to state 31
    T_CONSTRUCT_FOR   shift, and go to state 32
    T_BLOCK_START     shift, and go to state 7
    T_IO_COUT         shift, and go to state 33
    T_PARAN_OPEN      shift, and go to state 34
    T_SEMI_COLON      shift, and go to state 35
    T_RETURN          shift, and go to state 36

    BLOCK                   go to state 37
    BLOCK_START             go to state 18
    IF_BLOCK                go to state 39
    ELSE_BLOCK              go to state 40
    FOR_BLOCK               go to state 41
    CONDITIONAL_EXPRESSION  go to state 42
    ASSIGNMENT              go to state 43
    EXPRESSION              go to state 44
    EXPRESSION_GRAMMAR      go to state 45
    EXPRESSION_TERM         go to state 46
    EXPRESSION_F            go to state 47
    BLOCK_STATEMENT         go to state 48
    STATEMENT               go to state 123
    LINE_STATEMENT          go to state 50
    VARIABLE_DECLARATION    go to state 51
    COUT                    go to state 52
    RETURN                  go to state 53
    IDENTIFIER_OR_LITERAL   go to state 54
    TYPE                    go to state 55


State 113

   33 FOR_BLOCK: T_CONSTRUCT_FOR T_PARAN_OPEN FOR_INIT_STATEMENT T_SEMI_COLON . FOR_CONDITION_STATEMENT T_SEMI_COLON FOR_ACTION_STATEMENT T_PARAN_CLOSE STATEMENT

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 29
    T_PARAN_OPEN      shift, and go to state 34

    $default  reduce using rule 36 (FOR_CONDITION_STATEMENT)

    FOR_CONDITION_STATEMENT  go to state 124
    CONDITIONAL_EXPRESSION   go to state 125
    ASSIGNMENT               go to state 43
    EXPRESSION               go to state 126
    EXPRESSION_GRAMMAR       go to state 45
    EXPRESSION_TERM          go to state 46
    EXPRESSION_F             go to state 47
    IDENTIFIER_OR_LITERAL    go to state 54


State 114

   72 EXTRACTION_LIST: EXPRESSION T_IO_EXTRACTION . EXTRACTION_LIST

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 29
    T_PARAN_OPEN      shift, and go to state 34

    CONDITIONAL_EXPRESSION  go to state 42
    ASSIGNMENT              go to state 43
    EXPRESSION              go to state 95
    EXPRESSION_GRAMMAR      go to state 45
    EXPRESSION_TERM         go to state 46
    EXPRESSION_F            go to state 47
    EXTRACTION_LIST         go to state 127
    IDENTIFIER_OR_LITERAL   go to state 54


State 115

   67 VARIABLE_LIST: T_IDENTIFIER T_COMMA VARIABLE_LIST .

    $default  reduce using rule 67 (VARIABLE_LIST)


State 116

   68 VARIABLE_LIST: ASSIGNMENT T_COMMA VARIABLE_LIST .

    $default  reduce using rule 68 (VARIABLE_LIST)


State 117

   16 FUNCTION_PROTOTYPE: TYPE T_IDENTIFIER T_PARAN_OPEN T_PARAN_CLOSE T_SEMI_COLON .

    $default  reduce using rule 16 (FUNCTION_PROTOTYPE)


State 118

   21 FUNCTION_DECLARATION: TYPE T_IDENTIFIER T_PARAN_OPEN T_PARAN_CLOSE BLOCK .

    $default  reduce using rule 21 (FUNCTION_DECLARATION)


State 119

   15 FUNCTION_PROTOTYPE: TYPE T_IDENTIFIER T_PARAN_OPEN TYPE_LIST T_PARAN_CLOSE . T_SEMI_COLON

    T_SEMI_COLON  shift, and go to state 128


State 120

   19 FUNCTION_DEFINITION: TYPE T_IDENTIFIER T_PARAN_OPEN FUNCTION_PARAMETER_LIST T_PARAN_CLOSE . T_SEMI_COLON
   20 FUNCTION_DECLARATION: TYPE T_IDENTIFIER T_PARAN_OPEN FUNCTION_PARAMETER_LIST T_PARAN_CLOSE . BLOCK

    T_BLOCK_START  shift, and go to state 7
    T_SEMI_COLON   shift, and go to state 129

    BLOCK        go to state 130
    BLOCK_START  go to state 18


State 121

   22 FUNCTION_PARAMETER_LIST: TYPE T_IDENTIFIER . T_COMMA FUNCTION_PARAMETER_LIST
   23                        | TYPE T_IDENTIFIER . T_OP_ASSIGNMENT EXPRESSION T_COMMA FUNCTION_PARAMETER_LIST
   24                        | TYPE T_IDENTIFIER .
   25                        | TYPE T_IDENTIFIER . T_OP_ASSIGNMENT EXPRESSION

    T_OP_ASSIGNMENT  shift, and go to state 131
    T_COMMA          shift, and go to state 132

    $default  reduce using rule 24 (FUNCTION_PARAMETER_LIST)


State 122

   17 TYPE_LIST: TYPE T_COMMA . TYPE_LIST

    T_TYPE_INT     shift, and go to state 1
    T_TYPE_FLOAT   shift, and go to state 2
    T_TYPE_DOUBLE  shift, and go to state 3
    T_TYPE_STRING  shift, and go to state 4
    T_TYPE_CHAR    shift, and go to state 5
    T_TYPE_VOID    shift, and go to state 6

    TYPE_LIST  go to state 133
    TYPE       go to state 134


State 123

   31 IF_BLOCK: T_CONSTRUCT_IF T_PARAN_OPEN EXPRESSION T_PARAN_CLOSE STATEMENT .

    $default  reduce using rule 31 (IF_BLOCK)


State 124

   33 FOR_BLOCK: T_CONSTRUCT_FOR T_PARAN_OPEN FOR_INIT_STATEMENT T_SEMI_COLON FOR_CONDITION_STATEMENT . T_SEMI_COLON FOR_ACTION_STATEMENT T_PARAN_CLOSE STATEMENT

    T_SEMI_COLON  shift, and go to state 135


State 125

   37 FOR_CONDITION_STATEMENT: CONDITIONAL_EXPRESSION .
   45 EXPRESSION: CONDITIONAL_EXPRESSION .

    T_SEMI_COLON  reduce using rule 37 (FOR_CONDITION_STATEMENT)
    $default      reduce using rule 45 (EXPRESSION)


State 126

   40 CONDITIONAL_EXPRESSION: EXPRESSION . LOGICAL_OPERATOR EXPRESSION_GRAMMAR
   41                       | EXPRESSION . RELATIONAL_OPERATOR EXPRESSION_GRAMMAR

    T_REL_OP_GREATER_THAN        shift, and go to state 69
    T_REL_OP_LESS_THAN           shift, and go to state 70
    T_REL_OP_GREATER_THAN_EQUAL  shift, and go to state 71
    T_REL_OP_LESS_THAN_EQUAL     shift, and go to state 72
    T_REL_OP_EQUAL               shift, and go to state 73
    T_LOG_OP_OR                  shift, and go to state 74
    T_LOG_OP_AND                 shift, and go to state 75

    LOGICAL_OPERATOR     go to state 76
    RELATIONAL_OPERATOR  go to state 77


State 127

   72 EXTRACTION_LIST: EXPRESSION T_IO_EXTRACTION EXTRACTION_LIST .

    $default  reduce using rule 72 (EXTRACTION_LIST)


State 128

   15 FUNCTION_PROTOTYPE: TYPE T_IDENTIFIER T_PARAN_OPEN TYPE_LIST T_PARAN_CLOSE T_SEMI_COLON .

    $default  reduce using rule 15 (FUNCTION_PROTOTYPE)


State 129

   19 FUNCTION_DEFINITION: TYPE T_IDENTIFIER T_PARAN_OPEN FUNCTION_PARAMETER_LIST T_PARAN_CLOSE T_SEMI_COLON .

    $default  reduce using rule 19 (FUNCTION_DEFINITION)


State 130

   20 FUNCTION_DECLARATION: TYPE T_IDENTIFIER T_PARAN_OPEN FUNCTION_PARAMETER_LIST T_PARAN_CLOSE BLOCK .

    $default  reduce using rule 20 (FUNCTION_DECLARATION)


State 131

   23 FUNCTION_PARAMETER_LIST: TYPE T_IDENTIFIER T_OP_ASSIGNMENT . EXPRESSION T_COMMA FUNCTION_PARAMETER_LIST
   25                        | TYPE T_IDENTIFIER T_OP_ASSIGNMENT . EXPRESSION

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 29
    T_PARAN_OPEN      shift, and go to state 34

    CONDITIONAL_EXPRESSION  go to state 42
    ASSIGNMENT              go to state 43
    EXPRESSION              go to state 136
    EXPRESSION_GRAMMAR      go to state 45
    EXPRESSION_TERM         go to state 46
    EXPRESSION_F            go to state 47
    IDENTIFIER_OR_LITERAL   go to state 54


State 132

   22 FUNCTION_PARAMETER_LIST: TYPE T_IDENTIFIER T_COMMA . FUNCTION_PARAMETER_LIST

    T_TYPE_INT     shift, and go to state 1
    T_TYPE_FLOAT   shift, and go to state 2
    T_TYPE_DOUBLE  shift, and go to state 3
    T_TYPE_STRING  shift, and go to state 4
    T_TYPE_CHAR    shift, and go to state 5
    T_TYPE_VOID    shift, and go to state 6

    FUNCTION_PARAMETER_LIST  go to state 137
    TYPE                     go to state 138


State 133

   17 TYPE_LIST: TYPE T_COMMA TYPE_LIST .

    $default  reduce using rule 17 (TYPE_LIST)


State 134

   17 TYPE_LIST: TYPE . T_COMMA TYPE_LIST
   18          | TYPE .

    T_COMMA  shift, and go to state 122

    $default  reduce using rule 18 (TYPE_LIST)


State 135

   33 FOR_BLOCK: T_CONSTRUCT_FOR T_PARAN_OPEN FOR_INIT_STATEMENT T_SEMI_COLON FOR_CONDITION_STATEMENT T_SEMI_COLON . FOR_ACTION_STATEMENT T_PARAN_CLOSE STATEMENT

    T_TYPE_INT        shift, and go to state 1
    T_TYPE_FLOAT      shift, and go to state 2
    T_TYPE_DOUBLE     shift, and go to state 3
    T_TYPE_STRING     shift, and go to state 4
    T_TYPE_CHAR       shift, and go to state 5
    T_TYPE_VOID       shift, and go to state 6
    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 29
    T_IO_COUT         shift, and go to state 33
    T_PARAN_OPEN      shift, and go to state 34
    T_RETURN          shift, and go to state 36

    $default  reduce using rule 38 (FOR_ACTION_STATEMENT)

    FOR_ACTION_STATEMENT    go to state 139
    CONDITIONAL_EXPRESSION  go to state 42
    ASSIGNMENT              go to state 43
    EXPRESSION              go to state 44
    EXPRESSION_GRAMMAR      go to state 45
    EXPRESSION_TERM         go to state 46
    EXPRESSION_F            go to state 47
    LINE_STATEMENT          go to state 140
    VARIABLE_DECLARATION    go to state 51
    COUT                    go to state 52
    RETURN                  go to state 53
    IDENTIFIER_OR_LITERAL   go to state 54
    TYPE                    go to state 55


State 136

   23 FUNCTION_PARAMETER_LIST: TYPE T_IDENTIFIER T_OP_ASSIGNMENT EXPRESSION . T_COMMA FUNCTION_PARAMETER_LIST
   25                        | TYPE T_IDENTIFIER T_OP_ASSIGNMENT EXPRESSION .
   40 CONDITIONAL_EXPRESSION: EXPRESSION . LOGICAL_OPERATOR EXPRESSION_GRAMMAR
   41                       | EXPRESSION . RELATIONAL_OPERATOR EXPRESSION_GRAMMAR

    T_REL_OP_GREATER_THAN        shift, and go to state 69
    T_REL_OP_LESS_THAN           shift, and go to state 70
    T_REL_OP_GREATER_THAN_EQUAL  shift, and go to state 71
    T_REL_OP_LESS_THAN_EQUAL     shift, and go to state 72
    T_REL_OP_EQUAL               shift, and go to state 73
    T_LOG_OP_OR                  shift, and go to state 74
    T_LOG_OP_AND                 shift, and go to state 75
    T_COMMA                      shift, and go to state 141

    $default  reduce using rule 25 (FUNCTION_PARAMETER_LIST)

    LOGICAL_OPERATOR     go to state 76
    RELATIONAL_OPERATOR  go to state 77


State 137

   22 FUNCTION_PARAMETER_LIST: TYPE T_IDENTIFIER T_COMMA FUNCTION_PARAMETER_LIST .

    $default  reduce using rule 22 (FUNCTION_PARAMETER_LIST)


State 138

   22 FUNCTION_PARAMETER_LIST: TYPE . T_IDENTIFIER T_COMMA FUNCTION_PARAMETER_LIST
   23                        | TYPE . T_IDENTIFIER T_OP_ASSIGNMENT EXPRESSION T_COMMA FUNCTION_PARAMETER_LIST
   24                        | TYPE . T_IDENTIFIER
   25                        | TYPE . T_IDENTIFIER T_OP_ASSIGNMENT EXPRESSION

    T_IDENTIFIER  shift, and go to state 121


State 139

   33 FOR_BLOCK: T_CONSTRUCT_FOR T_PARAN_OPEN FOR_INIT_STATEMENT T_SEMI_COLON FOR_CONDITION_STATEMENT T_SEMI_COLON FOR_ACTION_STATEMENT . T_PARAN_CLOSE STATEMENT

    T_PARAN_CLOSE  shift, and go to state 142


State 140

   39 FOR_ACTION_STATEMENT: LINE_STATEMENT .

    $default  reduce using rule 39 (FOR_ACTION_STATEMENT)


State 141

   23 FUNCTION_PARAMETER_LIST: TYPE T_IDENTIFIER T_OP_ASSIGNMENT EXPRESSION T_COMMA . FUNCTION_PARAMETER_LIST

    T_TYPE_INT     shift, and go to state 1
    T_TYPE_FLOAT   shift, and go to state 2
    T_TYPE_DOUBLE  shift, and go to state 3
    T_TYPE_STRING  shift, and go to state 4
    T_TYPE_CHAR    shift, and go to state 5
    T_TYPE_VOID    shift, and go to state 6

    FUNCTION_PARAMETER_LIST  go to state 143
    TYPE                     go to state 138


State 142

   33 FOR_BLOCK: T_CONSTRUCT_FOR T_PARAN_OPEN FOR_INIT_STATEMENT T_SEMI_COLON FOR_CONDITION_STATEMENT T_SEMI_COLON FOR_ACTION_STATEMENT T_PARAN_CLOSE . STATEMENT

    T_TYPE_INT        shift, and go to state 1
    T_TYPE_FLOAT      shift, and go to state 2
    T_TYPE_DOUBLE     shift, and go to state 3
    T_TYPE_STRING     shift, and go to state 4
    T_TYPE_CHAR       shift, and go to state 5
    T_TYPE_VOID       shift, and go to state 6
    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 29
    T_CONSTRUCT_IF    shift, and go to state 30
    T_CONSTRUCT_ELSE  shift, and go to state 31
    T_CONSTRUCT_FOR   shift, and go to state 32
    T_BLOCK_START     shift, and go to state 7
    T_IO_COUT         shift, and go to state 33
    T_PARAN_OPEN      shift, and go to state 34
    T_SEMI_COLON      shift, and go to state 35
    T_RETURN          shift, and go to state 36

    BLOCK                   go to state 37
    BLOCK_START             go to state 18
    IF_BLOCK                go to state 39
    ELSE_BLOCK              go to state 40
    FOR_BLOCK               go to state 41
    CONDITIONAL_EXPRESSION  go to state 42
    ASSIGNMENT              go to state 43
    EXPRESSION              go to state 44
    EXPRESSION_GRAMMAR      go to state 45
    EXPRESSION_TERM         go to state 46
    EXPRESSION_F            go to state 47
    BLOCK_STATEMENT         go to state 48
    STATEMENT               go to state 144
    LINE_STATEMENT          go to state 50
    VARIABLE_DECLARATION    go to state 51
    COUT                    go to state 52
    RETURN                  go to state 53
    IDENTIFIER_OR_LITERAL   go to state 54
    TYPE                    go to state 55


State 143

   23 FUNCTION_PARAMETER_LIST: TYPE T_IDENTIFIER T_OP_ASSIGNMENT EXPRESSION T_COMMA FUNCTION_PARAMETER_LIST .

    $default  reduce using rule 23 (FUNCTION_PARAMETER_LIST)


State 144

   33 FOR_BLOCK: T_CONSTRUCT_FOR T_PARAN_OPEN FOR_INIT_STATEMENT T_SEMI_COLON FOR_CONDITION_STATEMENT T_SEMI_COLON FOR_ACTION_STATEMENT T_PARAN_CLOSE STATEMENT .

    $default  reduce using rule 33 (FOR_BLOCK)

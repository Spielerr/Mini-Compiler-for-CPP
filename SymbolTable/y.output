Terminals unused in grammar

    T_TYPE_CLASS
    T_USER_DEFINED_TYPE
    T_ACCESS_PUBLIC
    T_ACCESS_PRIVATE
    T_ACCESS_PROTECTED
    T_BIT_OP_RIGHT_SHIFT
    T_BIT_OP_LEFT_SHIFT
    T_IO_PRINTF
    T_IO_SCANF
    T_IO_GETLINE
    T_DOUBLE_QUOTES_OPEN
    T_DOUBLE_QUOTES_CLOSE
    T_COLON
    T_SCOPE_RESOLUTION
    '.'
    T_SQ_BRACKET
    T_COMMENT


Grammar

    0 $accept: START $end

    1 START: INCLUDE BODY
    2      | BODY
    3      | INCLUDE

    4 INCLUDE: INCLUDE T_HEADER_INCLUDE '<' T_HEADER_FILE '>'
    5        | INCLUDE T_HEADER_INCLUDE T_STRING_LITERAL
    6        | T_HEADER_INCLUDE '<' T_HEADER_FILE '>'
    7        | T_HEADER_INCLUDE T_STRING_LITERAL

    8 BODY: BODY_BLOCK BODY
    9     | BODY_BLOCK

   10 BODY_BLOCK: FUNCTION
   11           | BLOCK

   12 FUNCTION: FUNCTION_PROTOTYPE
   13         | FUNCTION_DEFINITION
   14         | FUNCTION_DECLARATION

   15 FUNCTION_PROTOTYPE: FUNCTION_PREFIX TYPE_LIST ')' ';'
   16                   | FUNCTION_PREFIX ')' ';'

   17 TYPE_LIST: TYPE ',' TYPE_LIST
   18          | TYPE

   19 FUNCTION_DEFINITION: FUNCTION_PREFIX FUNCTION_PARAMETER_LIST ')' ';'

   20 FUNCTION_DECLARATION: FUNCTION_PREFIX FUNCTION_PARAMETER_LIST ')' '{' STATEMENTS '}'
   21                     | FUNCTION_PREFIX ')' '{' STATEMENTS '}'

   22 FUNCTION_PARAMETER_LIST: TYPE T_IDENTIFIER ',' FUNCTION_PARAMETER_LIST
   23                        | TYPE T_IDENTIFIER '=' EXPRESSION ',' FUNCTION_PARAMETER_LIST
   24                        | TYPE T_IDENTIFIER
   25                        | TYPE T_IDENTIFIER '=' EXPRESSION

   26 FUNCTION_PREFIX: TYPE T_IDENTIFIER '('

   27 BLOCK: BLOCK_START STATEMENTS BLOCK_END

   28 BLOCK_START: '{'

   29 BLOCK_END: '}'

   30 STATEMENTS: STATEMENT STATEMENTS
   31           | STATEMENT

   32 SINGLE_LINE_IF: IF_PREFIX LINE_STATEMENT ';'
   33               | IF_PREFIX ';'
   34               | IF_PREFIX CONSTRUCT

   35 BLOCK_IF: T_CONSTRUCT_IF '(' EXPRESSION ')' BLOCK

   36 IF_PREFIX: T_CONSTRUCT_IF '(' EXPRESSION ')'

   37 SINGLE_LINE_ELSE: ELSE_PREFIX LINE_STATEMENT ';'
   38                 | ELSE_PREFIX ';'
   39                 | ELSE_PREFIX CONSTRUCT

   40 BLOCK_ELSE: T_CONSTRUCT_ELSE BLOCK

   41 ELSE_PREFIX: T_CONSTRUCT_ELSE

   42 SINGLE_LINE_FOR: FOR_PREFIX FOR_INIT_STATEMENT ';' FOR_CONDITION_STATEMENT ';' FOR_ACTION_STATEMENT ')' LINE_STATEMENT ';'
   43                | FOR_PREFIX FOR_INIT_STATEMENT ';' FOR_CONDITION_STATEMENT ';' FOR_ACTION_STATEMENT ')' ';'
   44                | FOR_PREFIX FOR_INIT_STATEMENT ';' FOR_CONDITION_STATEMENT ';' FOR_ACTION_STATEMENT ')' CONSTRUCT

   45 BLOCK_FOR: FOR_PREFIX FOR_INIT_STATEMENT ';' FOR_CONDITION_STATEMENT ';' FOR_ACTION_STATEMENT ')' '{' STATEMENTS '}'

   46 FOR_PREFIX: T_CONSTRUCT_FOR '('

   47 FOR_INIT_STATEMENT: %empty
   48                   | LINE_STATEMENT

   49 FOR_CONDITION_STATEMENT: %empty
   50                        | CONDITIONAL_EXPRESSION

   51 FOR_ACTION_STATEMENT: %empty
   52                     | LINE_STATEMENT

   53 BITWISE_OPERATOR: '&'
   54                 | '|'
   55                 | '^'

   56 CONDITIONAL_EXPRESSION: EXPRESSION LOGICAL_OPERATOR EXPRESSION_GRAMMAR
   57                       | EXPRESSION RELATIONAL_OPERATOR EXPRESSION_GRAMMAR
   58                       | EXPRESSION BITWISE_OPERATOR EXPRESSION_GRAMMAR

   59 ASSIGNMENT: T_IDENTIFIER ASSIGNMENT_OPERATOR EXPRESSION_GRAMMAR
   60           | T_IDENTIFIER ASSIGNMENT_OPERATOR ASSIGNMENT
   61           | T_IDENTIFIER '[' EXPRESSION ']' ASSIGNMENT_OPERATOR EXPRESSION_GRAMMAR
   62           | T_IDENTIFIER '[' EXPRESSION ']' ASSIGNMENT_OPERATOR ASSIGNMENT

   63 ASSIGNMENT_OPERATOR: '='
   64                    | T_OP_ADD_ASSIGNMENT
   65                    | T_OP_SUBTRACT_ASSIGNMENT
   66                    | T_OP_MULTIPLY_ASSIGNMENT
   67                    | T_OP_DIVIDE_ASSIGNMENT
   68                    | T_OP_MOD_ASSIGNMENT

   69 EXPRESSION: ASSIGNMENT
   70           | CONDITIONAL_EXPRESSION
   71           | EXPRESSION_GRAMMAR

   72 EXPRESSION_GRAMMAR: EXPRESSION_GRAMMAR '+' EXPRESSION_TERM
   73                   | EXPRESSION_GRAMMAR '-' EXPRESSION_TERM
   74                   | EXPRESSION_TERM

   75 EXPRESSION_TERM: EXPRESSION_TERM '*' EXPRESSION_F
   76                | EXPRESSION_TERM '/' EXPRESSION_F
   77                | EXPRESSION_TERM '%' EXPRESSION_F
   78                | EXPRESSION_F
   79                | '!' EXPRESSION_F

   80 EXPRESSION_F: IDENTIFIER_OR_LITERAL
   81             | '(' EXPRESSION ')'
   82             | '+' EXPRESSION_F
   83             | '-' EXPRESSION_F

   84 CONSTRUCT: SINGLE_LINE_CONSTRUCT
   85          | BLOCK_CONSTRUCT

   86 BLOCK_CONSTRUCT: BLOCK_FOR
   87                | BLOCK_IF
   88                | BLOCK_ELSE

   89 SINGLE_LINE_CONSTRUCT: SINGLE_LINE_FOR
   90                      | SINGLE_LINE_IF
   91                      | SINGLE_LINE_ELSE

   92 STATEMENT: LINE_STATEMENT ';'
   93          | CONSTRUCT
   94          | BLOCK
   95          | ';'

   96 JUMP_STATEMENT: T_JUMP_BREAK
   97               | T_JUMP_EXIT
   98               | T_JUMP_CONTINUE

   99 LINE_STATEMENT: VARIABLE_DECLARATION
  100               | EXPRESSION
  101               | COUT
  102               | CIN
  103               | RETURN
  104               | JUMP_STATEMENT

  105 VARIABLE_DECLARATION: VARIABLE_DECLARATION_TYPE VARIABLE_LIST

  106 VARIABLE_DECLARATION_TYPE: TYPE

  107 VARIABLE_LIST: VARIABLE_DECLARATION_IDENTIFIER ',' VARIABLE_LIST
  108              | VARIABLE_DECLARATION_IDENTIFIER '=' EXPRESSION ',' VARIABLE_LIST
  109              | VARIABLE_DECLARATION_IDENTIFIER
  110              | VARIABLE_DECLARATION_IDENTIFIER '=' EXPRESSION
  111              | ARRAY_VARIABLE_DECLARATION_IDENTIFIER_WITH_SIZE ',' VARIABLE_LIST
  112              | ARRAY_VARIABLE_DECLARATION_IDENTIFIER '=' ARRAY_LIST ',' VARIABLE_LIST
  113              | ARRAY_VARIABLE_DECLARATION_IDENTIFIER_WITH_SIZE
  114              | ARRAY_VARIABLE_DECLARATION_IDENTIFIER '=' ARRAY_LIST

  115 VARIABLE_DECLARATION_IDENTIFIER: T_IDENTIFIER

  116 ARRAY_VARIABLE_DECLARATION_IDENTIFIER: T_IDENTIFIER '[' ']'
  117                                      | T_IDENTIFIER '[' EXPRESSION ']'

  118 ARRAY_VARIABLE_DECLARATION_IDENTIFIER_WITH_SIZE: T_IDENTIFIER '[' EXPRESSION ']'

  119 ARRAY_LIST: '{' LITERAL_LIST '}'

  120 LITERAL_LIST: IDENTIFIER_OR_LITERAL ',' LITERAL_LIST
  121             | IDENTIFIER_OR_LITERAL

  122 COUT: T_IO_COUT T_IO_INSERTION INSERTION_LIST

  123 INSERTION_LIST: EXPRESSION T_IO_INSERTION INSERTION_LIST
  124               | EXPRESSION

  125 CIN: T_IO_CIN T_IO_EXTRACTION EXTRACTION_LIST

  126 EXTRACTION_LIST: T_IDENTIFIER T_IO_EXTRACTION EXTRACTION_LIST
  127                | T_IDENTIFIER

  128 RETURN: T_RETURN EXPRESSION

  129 LOGICAL_OPERATOR: T_LOG_OP_AND
  130                 | T_LOG_OP_OR

  131 RELATIONAL_OPERATOR: T_REL_OP_EQUAL
  132                    | '>'
  133                    | T_REL_OP_GREATER_THAN_EQUAL
  134                    | '<'
  135                    | T_REL_OP_LESS_THAN_EQUAL
  136                    | T_REL_OP_NOT_EQUAL

  137 IDENTIFIER_OR_LITERAL: T_IDENTIFIER
  138                      | T_IDENTIFIER '(' ')'
  139                      | T_IDENTIFIER '(' LITERAL_LIST ')'
  140                      | T_IDENTIFIER UNARY_OPERATOR
  141                      | UNARY_OPERATOR T_IDENTIFIER
  142                      | T_IDENTIFIER '[' EXPRESSION ']'
  143                      | UNARY_OPERATOR T_IDENTIFIER '[' EXPRESSION ']'
  144                      | T_IDENTIFIER '[' EXPRESSION ']' UNARY_OPERATOR
  145                      | T_CHAR_LITERAL
  146                      | T_NUMBER_LITERAL
  147                      | T_STRING_LITERAL
  148                      | T_BOOL_LITERAL

  149 UNARY_OPERATOR: T_OP_INCREMENT
  150               | T_OP_DECREMENT

  151 TYPE: T_TYPE_INT
  152     | T_TYPE_DOUBLE
  153     | T_TYPE_FLOAT
  154     | T_TYPE_CHAR
  155     | T_TYPE_STRING
  156     | T_TYPE_VOID
  157     | T_TYPE_BOOL


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 79
    '%' (37) 77
    '&' (38) 53
    '(' (40) 26 35 36 46 81 138 139
    ')' (41) 15 16 19 20 21 35 36 42 43 44 45 81 138 139
    '*' (42) 75
    '+' (43) 72 82
    ',' (44) 17 22 23 107 108 111 112 120
    '-' (45) 73 83
    '.' (46)
    '/' (47) 76
    ';' (59) 15 16 19 32 33 37 38 42 43 44 45 92 95
    '<' (60) 4 6 134
    '=' (61) 23 25 63 108 110 112 114
    '>' (62) 4 6 132
    '[' (91) 61 62 116 117 118 142 143 144
    ']' (93) 61 62 116 117 118 142 143 144
    '^' (94) 55
    '{' (123) 20 21 28 45 119
    '|' (124) 54
    '}' (125) 20 21 29 45 119
    error (256)
    T_TYPE_INT (258) 151
    T_TYPE_FLOAT (259) 153
    T_TYPE_DOUBLE (260) 152
    T_TYPE_BOOL (261) 157
    T_TYPE_STRING (262) 155
    T_TYPE_CHAR (263) 154
    T_TYPE_VOID (264) 156
    T_TYPE_CLASS (265)
    T_USER_DEFINED_TYPE (266)
    T_IDENTIFIER (267) 22 23 24 25 26 59 60 61 62 115 116 117 118 126 127 137 138 139 140 141 142 143 144
    T_CHAR_LITERAL (268) 145
    T_STRING_LITERAL (269) 5 7 147
    T_NUMBER_LITERAL (270) 146
    T_BOOL_LITERAL (271) 148
    T_CONSTRUCT_IF (272) 35 36
    T_CONSTRUCT_ELSE (273) 40 41
    T_CONSTRUCT_FOR (274) 46
    T_ACCESS_PUBLIC (275)
    T_ACCESS_PRIVATE (276)
    T_ACCESS_PROTECTED (277)
    T_HEADER_INCLUDE (278) 4 5 6 7
    T_HEADER_FILE (279) 4 6
    T_REL_OP_GREATER_THAN_EQUAL (280) 133
    T_REL_OP_LESS_THAN_EQUAL (281) 135
    T_REL_OP_EQUAL (282) 131
    T_REL_OP_NOT_EQUAL (283) 136
    T_LOG_OP_OR (284) 130
    T_LOG_OP_AND (285) 129
    T_BIT_OP_RIGHT_SHIFT (286)
    T_BIT_OP_LEFT_SHIFT (287)
    T_OP_ADD_ASSIGNMENT (288) 64
    T_OP_SUBTRACT_ASSIGNMENT (289) 65
    T_OP_MULTIPLY_ASSIGNMENT (290) 66
    T_OP_DIVIDE_ASSIGNMENT (291) 67
    T_OP_MOD_ASSIGNMENT (292) 68
    T_OP_INCREMENT (293) 149
    T_OP_DECREMENT (294) 150
    T_IO_COUT (295) 122
    T_IO_CIN (296) 125
    T_IO_PRINTF (297)
    T_IO_SCANF (298)
    T_IO_GETLINE (299)
    T_IO_INSERTION (300) 122 123
    T_IO_EXTRACTION (301) 125 126
    T_JUMP_BREAK (302) 96
    T_JUMP_EXIT (303) 97
    T_JUMP_CONTINUE (304) 98
    T_DOUBLE_QUOTES_OPEN (305)
    T_DOUBLE_QUOTES_CLOSE (306)
    T_COLON (307)
    T_SCOPE_RESOLUTION (308)
    T_RETURN (309) 128
    T_SQ_BRACKET (310)
    T_COMMENT (311)


Nonterminals, with rules where they appear

    $accept (78)
        on left: 0
    START (79)
        on left: 1 2 3
        on right: 0
    INCLUDE (80)
        on left: 4 5 6 7
        on right: 1 3 4 5
    BODY (81)
        on left: 8 9
        on right: 1 2 8
    BODY_BLOCK (82)
        on left: 10 11
        on right: 8 9
    FUNCTION (83)
        on left: 12 13 14
        on right: 10
    FUNCTION_PROTOTYPE (84)
        on left: 15 16
        on right: 12
    TYPE_LIST (85)
        on left: 17 18
        on right: 15 17
    FUNCTION_DEFINITION (86)
        on left: 19
        on right: 13
    FUNCTION_DECLARATION (87)
        on left: 20 21
        on right: 14
    FUNCTION_PARAMETER_LIST (88)
        on left: 22 23 24 25
        on right: 19 20 22 23
    FUNCTION_PREFIX (89)
        on left: 26
        on right: 15 16 19 20 21
    BLOCK (90)
        on left: 27
        on right: 11 35 40 94
    BLOCK_START (91)
        on left: 28
        on right: 27
    BLOCK_END (92)
        on left: 29
        on right: 27
    STATEMENTS (93)
        on left: 30 31
        on right: 20 21 27 30 45
    SINGLE_LINE_IF (94)
        on left: 32 33 34
        on right: 90
    BLOCK_IF (95)
        on left: 35
        on right: 87
    IF_PREFIX (96)
        on left: 36
        on right: 32 33 34
    SINGLE_LINE_ELSE (97)
        on left: 37 38 39
        on right: 91
    BLOCK_ELSE (98)
        on left: 40
        on right: 88
    ELSE_PREFIX (99)
        on left: 41
        on right: 37 38 39
    SINGLE_LINE_FOR (100)
        on left: 42 43 44
        on right: 89
    BLOCK_FOR (101)
        on left: 45
        on right: 86
    FOR_PREFIX (102)
        on left: 46
        on right: 42 43 44 45
    FOR_INIT_STATEMENT (103)
        on left: 47 48
        on right: 42 43 44 45
    FOR_CONDITION_STATEMENT (104)
        on left: 49 50
        on right: 42 43 44 45
    FOR_ACTION_STATEMENT (105)
        on left: 51 52
        on right: 42 43 44 45
    BITWISE_OPERATOR (106)
        on left: 53 54 55
        on right: 58
    CONDITIONAL_EXPRESSION (107)
        on left: 56 57 58
        on right: 50 70
    ASSIGNMENT (108)
        on left: 59 60 61 62
        on right: 60 62 69
    ASSIGNMENT_OPERATOR (109)
        on left: 63 64 65 66 67 68
        on right: 59 60 61 62
    EXPRESSION (110)
        on left: 69 70 71
        on right: 23 25 35 36 56 57 58 61 62 81 100 108 110 117 118 123 124 128 142 143 144
    EXPRESSION_GRAMMAR (111)
        on left: 72 73 74
        on right: 56 57 58 59 61 71 72 73
    EXPRESSION_TERM (112)
        on left: 75 76 77 78 79
        on right: 72 73 74 75 76 77
    EXPRESSION_F (113)
        on left: 80 81 82 83
        on right: 75 76 77 78 79 82 83
    CONSTRUCT (114)
        on left: 84 85
        on right: 34 39 44 93
    BLOCK_CONSTRUCT (115)
        on left: 86 87 88
        on right: 85
    SINGLE_LINE_CONSTRUCT (116)
        on left: 89 90 91
        on right: 84
    STATEMENT (117)
        on left: 92 93 94 95
        on right: 30 31
    JUMP_STATEMENT (118)
        on left: 96 97 98
        on right: 104
    LINE_STATEMENT (119)
        on left: 99 100 101 102 103 104
        on right: 32 37 42 48 52 92
    VARIABLE_DECLARATION (120)
        on left: 105
        on right: 99
    VARIABLE_DECLARATION_TYPE (121)
        on left: 106
        on right: 105
    VARIABLE_LIST (122)
        on left: 107 108 109 110 111 112 113 114
        on right: 105 107 108 111 112
    VARIABLE_DECLARATION_IDENTIFIER (123)
        on left: 115
        on right: 107 108 109 110
    ARRAY_VARIABLE_DECLARATION_IDENTIFIER (124)
        on left: 116 117
        on right: 112 114
    ARRAY_VARIABLE_DECLARATION_IDENTIFIER_WITH_SIZE (125)
        on left: 118
        on right: 111 113
    ARRAY_LIST (126)
        on left: 119
        on right: 112 114
    LITERAL_LIST (127)
        on left: 120 121
        on right: 119 120 139
    COUT (128)
        on left: 122
        on right: 101
    INSERTION_LIST (129)
        on left: 123 124
        on right: 122 123
    CIN (130)
        on left: 125
        on right: 102
    EXTRACTION_LIST (131)
        on left: 126 127
        on right: 125 126
    RETURN (132)
        on left: 128
        on right: 103
    LOGICAL_OPERATOR (133)
        on left: 129 130
        on right: 56
    RELATIONAL_OPERATOR (134)
        on left: 131 132 133 134 135 136
        on right: 57
    IDENTIFIER_OR_LITERAL (135)
        on left: 137 138 139 140 141 142 143 144 145 146 147 148
        on right: 80 120 121
    UNARY_OPERATOR (136)
        on left: 149 150
        on right: 140 141 143 144
    TYPE (137)
        on left: 151 152 153 154 155 156 157
        on right: 17 18 22 23 24 25 26 106


State 0

    0 $accept: . START $end

    T_TYPE_INT        shift, and go to state 1
    T_TYPE_FLOAT      shift, and go to state 2
    T_TYPE_DOUBLE     shift, and go to state 3
    T_TYPE_BOOL       shift, and go to state 4
    T_TYPE_STRING     shift, and go to state 5
    T_TYPE_CHAR       shift, and go to state 6
    T_TYPE_VOID       shift, and go to state 7
    '{'               shift, and go to state 8
    T_HEADER_INCLUDE  shift, and go to state 9

    START                 go to state 10
    INCLUDE               go to state 11
    BODY                  go to state 12
    BODY_BLOCK            go to state 13
    FUNCTION              go to state 14
    FUNCTION_PROTOTYPE    go to state 15
    FUNCTION_DEFINITION   go to state 16
    FUNCTION_DECLARATION  go to state 17
    FUNCTION_PREFIX       go to state 18
    BLOCK                 go to state 19
    BLOCK_START           go to state 20
    TYPE                  go to state 21


State 1

  151 TYPE: T_TYPE_INT .

    $default  reduce using rule 151 (TYPE)


State 2

  153 TYPE: T_TYPE_FLOAT .

    $default  reduce using rule 153 (TYPE)


State 3

  152 TYPE: T_TYPE_DOUBLE .

    $default  reduce using rule 152 (TYPE)


State 4

  157 TYPE: T_TYPE_BOOL .

    $default  reduce using rule 157 (TYPE)


State 5

  155 TYPE: T_TYPE_STRING .

    $default  reduce using rule 155 (TYPE)


State 6

  154 TYPE: T_TYPE_CHAR .

    $default  reduce using rule 154 (TYPE)


State 7

  156 TYPE: T_TYPE_VOID .

    $default  reduce using rule 156 (TYPE)


State 8

   28 BLOCK_START: '{' .

    $default  reduce using rule 28 (BLOCK_START)


State 9

    6 INCLUDE: T_HEADER_INCLUDE . '<' T_HEADER_FILE '>'
    7        | T_HEADER_INCLUDE . T_STRING_LITERAL

    T_STRING_LITERAL  shift, and go to state 22
    '<'               shift, and go to state 23


State 10

    0 $accept: START . $end

    $end  shift, and go to state 24


State 11

    1 START: INCLUDE . BODY
    3      | INCLUDE .
    4 INCLUDE: INCLUDE . T_HEADER_INCLUDE '<' T_HEADER_FILE '>'
    5        | INCLUDE . T_HEADER_INCLUDE T_STRING_LITERAL

    T_TYPE_INT        shift, and go to state 1
    T_TYPE_FLOAT      shift, and go to state 2
    T_TYPE_DOUBLE     shift, and go to state 3
    T_TYPE_BOOL       shift, and go to state 4
    T_TYPE_STRING     shift, and go to state 5
    T_TYPE_CHAR       shift, and go to state 6
    T_TYPE_VOID       shift, and go to state 7
    '{'               shift, and go to state 8
    T_HEADER_INCLUDE  shift, and go to state 25

    $default  reduce using rule 3 (START)

    BODY                  go to state 26
    BODY_BLOCK            go to state 13
    FUNCTION              go to state 14
    FUNCTION_PROTOTYPE    go to state 15
    FUNCTION_DEFINITION   go to state 16
    FUNCTION_DECLARATION  go to state 17
    FUNCTION_PREFIX       go to state 18
    BLOCK                 go to state 19
    BLOCK_START           go to state 20
    TYPE                  go to state 21


State 12

    2 START: BODY .

    $default  reduce using rule 2 (START)


State 13

    8 BODY: BODY_BLOCK . BODY
    9     | BODY_BLOCK .

    T_TYPE_INT     shift, and go to state 1
    T_TYPE_FLOAT   shift, and go to state 2
    T_TYPE_DOUBLE  shift, and go to state 3
    T_TYPE_BOOL    shift, and go to state 4
    T_TYPE_STRING  shift, and go to state 5
    T_TYPE_CHAR    shift, and go to state 6
    T_TYPE_VOID    shift, and go to state 7
    '{'            shift, and go to state 8

    $default  reduce using rule 9 (BODY)

    BODY                  go to state 27
    BODY_BLOCK            go to state 13
    FUNCTION              go to state 14
    FUNCTION_PROTOTYPE    go to state 15
    FUNCTION_DEFINITION   go to state 16
    FUNCTION_DECLARATION  go to state 17
    FUNCTION_PREFIX       go to state 18
    BLOCK                 go to state 19
    BLOCK_START           go to state 20
    TYPE                  go to state 21


State 14

   10 BODY_BLOCK: FUNCTION .

    $default  reduce using rule 10 (BODY_BLOCK)


State 15

   12 FUNCTION: FUNCTION_PROTOTYPE .

    $default  reduce using rule 12 (FUNCTION)


State 16

   13 FUNCTION: FUNCTION_DEFINITION .

    $default  reduce using rule 13 (FUNCTION)


State 17

   14 FUNCTION: FUNCTION_DECLARATION .

    $default  reduce using rule 14 (FUNCTION)


State 18

   15 FUNCTION_PROTOTYPE: FUNCTION_PREFIX . TYPE_LIST ')' ';'
   16                   | FUNCTION_PREFIX . ')' ';'
   19 FUNCTION_DEFINITION: FUNCTION_PREFIX . FUNCTION_PARAMETER_LIST ')' ';'
   20 FUNCTION_DECLARATION: FUNCTION_PREFIX . FUNCTION_PARAMETER_LIST ')' '{' STATEMENTS '}'
   21                     | FUNCTION_PREFIX . ')' '{' STATEMENTS '}'

    T_TYPE_INT     shift, and go to state 1
    T_TYPE_FLOAT   shift, and go to state 2
    T_TYPE_DOUBLE  shift, and go to state 3
    T_TYPE_BOOL    shift, and go to state 4
    T_TYPE_STRING  shift, and go to state 5
    T_TYPE_CHAR    shift, and go to state 6
    T_TYPE_VOID    shift, and go to state 7
    ')'            shift, and go to state 28

    TYPE_LIST                go to state 29
    FUNCTION_PARAMETER_LIST  go to state 30
    TYPE                     go to state 31


State 19

   11 BODY_BLOCK: BLOCK .

    $default  reduce using rule 11 (BODY_BLOCK)


State 20

   27 BLOCK: BLOCK_START . STATEMENTS BLOCK_END

    T_TYPE_INT        shift, and go to state 1
    T_TYPE_FLOAT      shift, and go to state 2
    T_TYPE_DOUBLE     shift, and go to state 3
    T_TYPE_BOOL       shift, and go to state 4
    T_TYPE_STRING     shift, and go to state 5
    T_TYPE_CHAR       shift, and go to state 6
    T_TYPE_VOID       shift, and go to state 7
    T_IDENTIFIER      shift, and go to state 32
    T_CHAR_LITERAL    shift, and go to state 33
    T_STRING_LITERAL  shift, and go to state 34
    T_NUMBER_LITERAL  shift, and go to state 35
    T_BOOL_LITERAL    shift, and go to state 36
    T_CONSTRUCT_IF    shift, and go to state 37
    T_CONSTRUCT_ELSE  shift, and go to state 38
    T_CONSTRUCT_FOR   shift, and go to state 39
    '{'               shift, and go to state 8
    '!'               shift, and go to state 40
    '+'               shift, and go to state 41
    '-'               shift, and go to state 42
    T_OP_INCREMENT    shift, and go to state 43
    T_OP_DECREMENT    shift, and go to state 44
    T_IO_COUT         shift, and go to state 45
    T_IO_CIN          shift, and go to state 46
    T_JUMP_BREAK      shift, and go to state 47
    T_JUMP_EXIT       shift, and go to state 48
    T_JUMP_CONTINUE   shift, and go to state 49
    '('               shift, and go to state 50
    ';'               shift, and go to state 51
    T_RETURN          shift, and go to state 52

    BLOCK                      go to state 53
    BLOCK_START                go to state 20
    STATEMENTS                 go to state 54
    SINGLE_LINE_IF             go to state 55
    BLOCK_IF                   go to state 56
    IF_PREFIX                  go to state 57
    SINGLE_LINE_ELSE           go to state 58
    BLOCK_ELSE                 go to state 59
    ELSE_PREFIX                go to state 60
    SINGLE_LINE_FOR            go to state 61
    BLOCK_FOR                  go to state 62
    FOR_PREFIX                 go to state 63
    CONDITIONAL_EXPRESSION     go to state 64
    ASSIGNMENT                 go to state 65
    EXPRESSION                 go to state 66
    EXPRESSION_GRAMMAR         go to state 67
    EXPRESSION_TERM            go to state 68
    EXPRESSION_F               go to state 69
    CONSTRUCT                  go to state 70
    BLOCK_CONSTRUCT            go to state 71
    SINGLE_LINE_CONSTRUCT      go to state 72
    STATEMENT                  go to state 73
    JUMP_STATEMENT             go to state 74
    LINE_STATEMENT             go to state 75
    VARIABLE_DECLARATION       go to state 76
    VARIABLE_DECLARATION_TYPE  go to state 77
    COUT                       go to state 78
    CIN                        go to state 79
    RETURN                     go to state 80
    IDENTIFIER_OR_LITERAL      go to state 81
    UNARY_OPERATOR             go to state 82
    TYPE                       go to state 83


State 21

   26 FUNCTION_PREFIX: TYPE . T_IDENTIFIER '('

    T_IDENTIFIER  shift, and go to state 84


State 22

    7 INCLUDE: T_HEADER_INCLUDE T_STRING_LITERAL .

    $default  reduce using rule 7 (INCLUDE)


State 23

    6 INCLUDE: T_HEADER_INCLUDE '<' . T_HEADER_FILE '>'

    T_HEADER_FILE  shift, and go to state 85


State 24

    0 $accept: START $end .

    $default  accept


State 25

    4 INCLUDE: INCLUDE T_HEADER_INCLUDE . '<' T_HEADER_FILE '>'
    5        | INCLUDE T_HEADER_INCLUDE . T_STRING_LITERAL

    T_STRING_LITERAL  shift, and go to state 86
    '<'               shift, and go to state 87


State 26

    1 START: INCLUDE BODY .

    $default  reduce using rule 1 (START)


State 27

    8 BODY: BODY_BLOCK BODY .

    $default  reduce using rule 8 (BODY)


State 28

   16 FUNCTION_PROTOTYPE: FUNCTION_PREFIX ')' . ';'
   21 FUNCTION_DECLARATION: FUNCTION_PREFIX ')' . '{' STATEMENTS '}'

    '{'  shift, and go to state 88
    ';'  shift, and go to state 89


State 29

   15 FUNCTION_PROTOTYPE: FUNCTION_PREFIX TYPE_LIST . ')' ';'

    ')'  shift, and go to state 90


State 30

   19 FUNCTION_DEFINITION: FUNCTION_PREFIX FUNCTION_PARAMETER_LIST . ')' ';'
   20 FUNCTION_DECLARATION: FUNCTION_PREFIX FUNCTION_PARAMETER_LIST . ')' '{' STATEMENTS '}'

    ')'  shift, and go to state 91


State 31

   17 TYPE_LIST: TYPE . ',' TYPE_LIST
   18          | TYPE .
   22 FUNCTION_PARAMETER_LIST: TYPE . T_IDENTIFIER ',' FUNCTION_PARAMETER_LIST
   23                        | TYPE . T_IDENTIFIER '=' EXPRESSION ',' FUNCTION_PARAMETER_LIST
   24                        | TYPE . T_IDENTIFIER
   25                        | TYPE . T_IDENTIFIER '=' EXPRESSION

    T_IDENTIFIER  shift, and go to state 92
    ','           shift, and go to state 93

    $default  reduce using rule 18 (TYPE_LIST)


State 32

   59 ASSIGNMENT: T_IDENTIFIER . ASSIGNMENT_OPERATOR EXPRESSION_GRAMMAR
   60           | T_IDENTIFIER . ASSIGNMENT_OPERATOR ASSIGNMENT
   61           | T_IDENTIFIER . '[' EXPRESSION ']' ASSIGNMENT_OPERATOR EXPRESSION_GRAMMAR
   62           | T_IDENTIFIER . '[' EXPRESSION ']' ASSIGNMENT_OPERATOR ASSIGNMENT
  137 IDENTIFIER_OR_LITERAL: T_IDENTIFIER .
  138                      | T_IDENTIFIER . '(' ')'
  139                      | T_IDENTIFIER . '(' LITERAL_LIST ')'
  140                      | T_IDENTIFIER . UNARY_OPERATOR
  142                      | T_IDENTIFIER . '[' EXPRESSION ']'
  144                      | T_IDENTIFIER . '[' EXPRESSION ']' UNARY_OPERATOR

    '='                       shift, and go to state 94
    T_OP_ADD_ASSIGNMENT       shift, and go to state 95
    T_OP_SUBTRACT_ASSIGNMENT  shift, and go to state 96
    T_OP_MULTIPLY_ASSIGNMENT  shift, and go to state 97
    T_OP_DIVIDE_ASSIGNMENT    shift, and go to state 98
    T_OP_MOD_ASSIGNMENT       shift, and go to state 99
    T_OP_INCREMENT            shift, and go to state 43
    T_OP_DECREMENT            shift, and go to state 44
    '('                       shift, and go to state 100
    '['                       shift, and go to state 101

    $default  reduce using rule 137 (IDENTIFIER_OR_LITERAL)

    ASSIGNMENT_OPERATOR  go to state 102
    UNARY_OPERATOR       go to state 103


State 33

  145 IDENTIFIER_OR_LITERAL: T_CHAR_LITERAL .

    $default  reduce using rule 145 (IDENTIFIER_OR_LITERAL)


State 34

  147 IDENTIFIER_OR_LITERAL: T_STRING_LITERAL .

    $default  reduce using rule 147 (IDENTIFIER_OR_LITERAL)


State 35

  146 IDENTIFIER_OR_LITERAL: T_NUMBER_LITERAL .

    $default  reduce using rule 146 (IDENTIFIER_OR_LITERAL)


State 36

  148 IDENTIFIER_OR_LITERAL: T_BOOL_LITERAL .

    $default  reduce using rule 148 (IDENTIFIER_OR_LITERAL)


State 37

   35 BLOCK_IF: T_CONSTRUCT_IF . '(' EXPRESSION ')' BLOCK
   36 IF_PREFIX: T_CONSTRUCT_IF . '(' EXPRESSION ')'

    '('  shift, and go to state 104


State 38

   40 BLOCK_ELSE: T_CONSTRUCT_ELSE . BLOCK
   41 ELSE_PREFIX: T_CONSTRUCT_ELSE .

    '{'  shift, and go to state 8

    $default  reduce using rule 41 (ELSE_PREFIX)

    BLOCK        go to state 105
    BLOCK_START  go to state 20


State 39

   46 FOR_PREFIX: T_CONSTRUCT_FOR . '('

    '('  shift, and go to state 106


State 40

   79 EXPRESSION_TERM: '!' . EXPRESSION_F

    T_IDENTIFIER      shift, and go to state 107
    T_CHAR_LITERAL    shift, and go to state 33
    T_STRING_LITERAL  shift, and go to state 34
    T_NUMBER_LITERAL  shift, and go to state 35
    T_BOOL_LITERAL    shift, and go to state 36
    '+'               shift, and go to state 41
    '-'               shift, and go to state 42
    T_OP_INCREMENT    shift, and go to state 43
    T_OP_DECREMENT    shift, and go to state 44
    '('               shift, and go to state 50

    EXPRESSION_F           go to state 108
    IDENTIFIER_OR_LITERAL  go to state 81
    UNARY_OPERATOR         go to state 82


State 41

   82 EXPRESSION_F: '+' . EXPRESSION_F

    T_IDENTIFIER      shift, and go to state 107
    T_CHAR_LITERAL    shift, and go to state 33
    T_STRING_LITERAL  shift, and go to state 34
    T_NUMBER_LITERAL  shift, and go to state 35
    T_BOOL_LITERAL    shift, and go to state 36
    '+'               shift, and go to state 41
    '-'               shift, and go to state 42
    T_OP_INCREMENT    shift, and go to state 43
    T_OP_DECREMENT    shift, and go to state 44
    '('               shift, and go to state 50

    EXPRESSION_F           go to state 109
    IDENTIFIER_OR_LITERAL  go to state 81
    UNARY_OPERATOR         go to state 82


State 42

   83 EXPRESSION_F: '-' . EXPRESSION_F

    T_IDENTIFIER      shift, and go to state 107
    T_CHAR_LITERAL    shift, and go to state 33
    T_STRING_LITERAL  shift, and go to state 34
    T_NUMBER_LITERAL  shift, and go to state 35
    T_BOOL_LITERAL    shift, and go to state 36
    '+'               shift, and go to state 41
    '-'               shift, and go to state 42
    T_OP_INCREMENT    shift, and go to state 43
    T_OP_DECREMENT    shift, and go to state 44
    '('               shift, and go to state 50

    EXPRESSION_F           go to state 110
    IDENTIFIER_OR_LITERAL  go to state 81
    UNARY_OPERATOR         go to state 82


State 43

  149 UNARY_OPERATOR: T_OP_INCREMENT .

    $default  reduce using rule 149 (UNARY_OPERATOR)


State 44

  150 UNARY_OPERATOR: T_OP_DECREMENT .

    $default  reduce using rule 150 (UNARY_OPERATOR)


State 45

  122 COUT: T_IO_COUT . T_IO_INSERTION INSERTION_LIST

    T_IO_INSERTION  shift, and go to state 111


State 46

  125 CIN: T_IO_CIN . T_IO_EXTRACTION EXTRACTION_LIST

    T_IO_EXTRACTION  shift, and go to state 112


State 47

   96 JUMP_STATEMENT: T_JUMP_BREAK .

    $default  reduce using rule 96 (JUMP_STATEMENT)


State 48

   97 JUMP_STATEMENT: T_JUMP_EXIT .

    $default  reduce using rule 97 (JUMP_STATEMENT)


State 49

   98 JUMP_STATEMENT: T_JUMP_CONTINUE .

    $default  reduce using rule 98 (JUMP_STATEMENT)


State 50

   81 EXPRESSION_F: '(' . EXPRESSION ')'

    T_IDENTIFIER      shift, and go to state 32
    T_CHAR_LITERAL    shift, and go to state 33
    T_STRING_LITERAL  shift, and go to state 34
    T_NUMBER_LITERAL  shift, and go to state 35
    T_BOOL_LITERAL    shift, and go to state 36
    '!'               shift, and go to state 40
    '+'               shift, and go to state 41
    '-'               shift, and go to state 42
    T_OP_INCREMENT    shift, and go to state 43
    T_OP_DECREMENT    shift, and go to state 44
    '('               shift, and go to state 50

    CONDITIONAL_EXPRESSION  go to state 64
    ASSIGNMENT              go to state 65
    EXPRESSION              go to state 113
    EXPRESSION_GRAMMAR      go to state 67
    EXPRESSION_TERM         go to state 68
    EXPRESSION_F            go to state 69
    IDENTIFIER_OR_LITERAL   go to state 81
    UNARY_OPERATOR          go to state 82


State 51

   95 STATEMENT: ';' .

    $default  reduce using rule 95 (STATEMENT)


State 52

  128 RETURN: T_RETURN . EXPRESSION

    T_IDENTIFIER      shift, and go to state 32
    T_CHAR_LITERAL    shift, and go to state 33
    T_STRING_LITERAL  shift, and go to state 34
    T_NUMBER_LITERAL  shift, and go to state 35
    T_BOOL_LITERAL    shift, and go to state 36
    '!'               shift, and go to state 40
    '+'               shift, and go to state 41
    '-'               shift, and go to state 42
    T_OP_INCREMENT    shift, and go to state 43
    T_OP_DECREMENT    shift, and go to state 44
    '('               shift, and go to state 50

    CONDITIONAL_EXPRESSION  go to state 64
    ASSIGNMENT              go to state 65
    EXPRESSION              go to state 114
    EXPRESSION_GRAMMAR      go to state 67
    EXPRESSION_TERM         go to state 68
    EXPRESSION_F            go to state 69
    IDENTIFIER_OR_LITERAL   go to state 81
    UNARY_OPERATOR          go to state 82


State 53

   94 STATEMENT: BLOCK .

    $default  reduce using rule 94 (STATEMENT)


State 54

   27 BLOCK: BLOCK_START STATEMENTS . BLOCK_END

    '}'  shift, and go to state 115

    BLOCK_END  go to state 116


State 55

   90 SINGLE_LINE_CONSTRUCT: SINGLE_LINE_IF .

    $default  reduce using rule 90 (SINGLE_LINE_CONSTRUCT)


State 56

   87 BLOCK_CONSTRUCT: BLOCK_IF .

    $default  reduce using rule 87 (BLOCK_CONSTRUCT)


State 57

   32 SINGLE_LINE_IF: IF_PREFIX . LINE_STATEMENT ';'
   33               | IF_PREFIX . ';'
   34               | IF_PREFIX . CONSTRUCT

    T_TYPE_INT        shift, and go to state 1
    T_TYPE_FLOAT      shift, and go to state 2
    T_TYPE_DOUBLE     shift, and go to state 3
    T_TYPE_BOOL       shift, and go to state 4
    T_TYPE_STRING     shift, and go to state 5
    T_TYPE_CHAR       shift, and go to state 6
    T_TYPE_VOID       shift, and go to state 7
    T_IDENTIFIER      shift, and go to state 32
    T_CHAR_LITERAL    shift, and go to state 33
    T_STRING_LITERAL  shift, and go to state 34
    T_NUMBER_LITERAL  shift, and go to state 35
    T_BOOL_LITERAL    shift, and go to state 36
    T_CONSTRUCT_IF    shift, and go to state 37
    T_CONSTRUCT_ELSE  shift, and go to state 38
    T_CONSTRUCT_FOR   shift, and go to state 39
    '!'               shift, and go to state 40
    '+'               shift, and go to state 41
    '-'               shift, and go to state 42
    T_OP_INCREMENT    shift, and go to state 43
    T_OP_DECREMENT    shift, and go to state 44
    T_IO_COUT         shift, and go to state 45
    T_IO_CIN          shift, and go to state 46
    T_JUMP_BREAK      shift, and go to state 47
    T_JUMP_EXIT       shift, and go to state 48
    T_JUMP_CONTINUE   shift, and go to state 49
    '('               shift, and go to state 50
    ';'               shift, and go to state 117
    T_RETURN          shift, and go to state 52

    SINGLE_LINE_IF             go to state 55
    BLOCK_IF                   go to state 56
    IF_PREFIX                  go to state 57
    SINGLE_LINE_ELSE           go to state 58
    BLOCK_ELSE                 go to state 59
    ELSE_PREFIX                go to state 60
    SINGLE_LINE_FOR            go to state 61
    BLOCK_FOR                  go to state 62
    FOR_PREFIX                 go to state 63
    CONDITIONAL_EXPRESSION     go to state 64
    ASSIGNMENT                 go to state 65
    EXPRESSION                 go to state 66
    EXPRESSION_GRAMMAR         go to state 67
    EXPRESSION_TERM            go to state 68
    EXPRESSION_F               go to state 69
    CONSTRUCT                  go to state 118
    BLOCK_CONSTRUCT            go to state 71
    SINGLE_LINE_CONSTRUCT      go to state 72
    JUMP_STATEMENT             go to state 74
    LINE_STATEMENT             go to state 119
    VARIABLE_DECLARATION       go to state 76
    VARIABLE_DECLARATION_TYPE  go to state 77
    COUT                       go to state 78
    CIN                        go to state 79
    RETURN                     go to state 80
    IDENTIFIER_OR_LITERAL      go to state 81
    UNARY_OPERATOR             go to state 82
    TYPE                       go to state 83


State 58

   91 SINGLE_LINE_CONSTRUCT: SINGLE_LINE_ELSE .

    $default  reduce using rule 91 (SINGLE_LINE_CONSTRUCT)


State 59

   88 BLOCK_CONSTRUCT: BLOCK_ELSE .

    $default  reduce using rule 88 (BLOCK_CONSTRUCT)


State 60

   37 SINGLE_LINE_ELSE: ELSE_PREFIX . LINE_STATEMENT ';'
   38                 | ELSE_PREFIX . ';'
   39                 | ELSE_PREFIX . CONSTRUCT

    T_TYPE_INT        shift, and go to state 1
    T_TYPE_FLOAT      shift, and go to state 2
    T_TYPE_DOUBLE     shift, and go to state 3
    T_TYPE_BOOL       shift, and go to state 4
    T_TYPE_STRING     shift, and go to state 5
    T_TYPE_CHAR       shift, and go to state 6
    T_TYPE_VOID       shift, and go to state 7
    T_IDENTIFIER      shift, and go to state 32
    T_CHAR_LITERAL    shift, and go to state 33
    T_STRING_LITERAL  shift, and go to state 34
    T_NUMBER_LITERAL  shift, and go to state 35
    T_BOOL_LITERAL    shift, and go to state 36
    T_CONSTRUCT_IF    shift, and go to state 37
    T_CONSTRUCT_ELSE  shift, and go to state 38
    T_CONSTRUCT_FOR   shift, and go to state 39
    '!'               shift, and go to state 40
    '+'               shift, and go to state 41
    '-'               shift, and go to state 42
    T_OP_INCREMENT    shift, and go to state 43
    T_OP_DECREMENT    shift, and go to state 44
    T_IO_COUT         shift, and go to state 45
    T_IO_CIN          shift, and go to state 46
    T_JUMP_BREAK      shift, and go to state 47
    T_JUMP_EXIT       shift, and go to state 48
    T_JUMP_CONTINUE   shift, and go to state 49
    '('               shift, and go to state 50
    ';'               shift, and go to state 120
    T_RETURN          shift, and go to state 52

    SINGLE_LINE_IF             go to state 55
    BLOCK_IF                   go to state 56
    IF_PREFIX                  go to state 57
    SINGLE_LINE_ELSE           go to state 58
    BLOCK_ELSE                 go to state 59
    ELSE_PREFIX                go to state 60
    SINGLE_LINE_FOR            go to state 61
    BLOCK_FOR                  go to state 62
    FOR_PREFIX                 go to state 63
    CONDITIONAL_EXPRESSION     go to state 64
    ASSIGNMENT                 go to state 65
    EXPRESSION                 go to state 66
    EXPRESSION_GRAMMAR         go to state 67
    EXPRESSION_TERM            go to state 68
    EXPRESSION_F               go to state 69
    CONSTRUCT                  go to state 121
    BLOCK_CONSTRUCT            go to state 71
    SINGLE_LINE_CONSTRUCT      go to state 72
    JUMP_STATEMENT             go to state 74
    LINE_STATEMENT             go to state 122
    VARIABLE_DECLARATION       go to state 76
    VARIABLE_DECLARATION_TYPE  go to state 77
    COUT                       go to state 78
    CIN                        go to state 79
    RETURN                     go to state 80
    IDENTIFIER_OR_LITERAL      go to state 81
    UNARY_OPERATOR             go to state 82
    TYPE                       go to state 83


State 61

   89 SINGLE_LINE_CONSTRUCT: SINGLE_LINE_FOR .

    $default  reduce using rule 89 (SINGLE_LINE_CONSTRUCT)


State 62

   86 BLOCK_CONSTRUCT: BLOCK_FOR .

    $default  reduce using rule 86 (BLOCK_CONSTRUCT)


State 63

   42 SINGLE_LINE_FOR: FOR_PREFIX . FOR_INIT_STATEMENT ';' FOR_CONDITION_STATEMENT ';' FOR_ACTION_STATEMENT ')' LINE_STATEMENT ';'
   43                | FOR_PREFIX . FOR_INIT_STATEMENT ';' FOR_CONDITION_STATEMENT ';' FOR_ACTION_STATEMENT ')' ';'
   44                | FOR_PREFIX . FOR_INIT_STATEMENT ';' FOR_CONDITION_STATEMENT ';' FOR_ACTION_STATEMENT ')' CONSTRUCT
   45 BLOCK_FOR: FOR_PREFIX . FOR_INIT_STATEMENT ';' FOR_CONDITION_STATEMENT ';' FOR_ACTION_STATEMENT ')' '{' STATEMENTS '}'

    T_TYPE_INT        shift, and go to state 1
    T_TYPE_FLOAT      shift, and go to state 2
    T_TYPE_DOUBLE     shift, and go to state 3
    T_TYPE_BOOL       shift, and go to state 4
    T_TYPE_STRING     shift, and go to state 5
    T_TYPE_CHAR       shift, and go to state 6
    T_TYPE_VOID       shift, and go to state 7
    T_IDENTIFIER      shift, and go to state 32
    T_CHAR_LITERAL    shift, and go to state 33
    T_STRING_LITERAL  shift, and go to state 34
    T_NUMBER_LITERAL  shift, and go to state 35
    T_BOOL_LITERAL    shift, and go to state 36
    '!'               shift, and go to state 40
    '+'               shift, and go to state 41
    '-'               shift, and go to state 42
    T_OP_INCREMENT    shift, and go to state 43
    T_OP_DECREMENT    shift, and go to state 44
    T_IO_COUT         shift, and go to state 45
    T_IO_CIN          shift, and go to state 46
    T_JUMP_BREAK      shift, and go to state 47
    T_JUMP_EXIT       shift, and go to state 48
    T_JUMP_CONTINUE   shift, and go to state 49
    '('               shift, and go to state 50
    T_RETURN          shift, and go to state 52

    $default  reduce using rule 47 (FOR_INIT_STATEMENT)

    FOR_INIT_STATEMENT         go to state 123
    CONDITIONAL_EXPRESSION     go to state 64
    ASSIGNMENT                 go to state 65
    EXPRESSION                 go to state 66
    EXPRESSION_GRAMMAR         go to state 67
    EXPRESSION_TERM            go to state 68
    EXPRESSION_F               go to state 69
    JUMP_STATEMENT             go to state 74
    LINE_STATEMENT             go to state 124
    VARIABLE_DECLARATION       go to state 76
    VARIABLE_DECLARATION_TYPE  go to state 77
    COUT                       go to state 78
    CIN                        go to state 79
    RETURN                     go to state 80
    IDENTIFIER_OR_LITERAL      go to state 81
    UNARY_OPERATOR             go to state 82
    TYPE                       go to state 83


State 64

   70 EXPRESSION: CONDITIONAL_EXPRESSION .

    $default  reduce using rule 70 (EXPRESSION)


State 65

   69 EXPRESSION: ASSIGNMENT .

    $default  reduce using rule 69 (EXPRESSION)


State 66

   56 CONDITIONAL_EXPRESSION: EXPRESSION . LOGICAL_OPERATOR EXPRESSION_GRAMMAR
   57                       | EXPRESSION . RELATIONAL_OPERATOR EXPRESSION_GRAMMAR
   58                       | EXPRESSION . BITWISE_OPERATOR EXPRESSION_GRAMMAR
  100 LINE_STATEMENT: EXPRESSION .

    '>'                          shift, and go to state 125
    '<'                          shift, and go to state 126
    T_REL_OP_GREATER_THAN_EQUAL  shift, and go to state 127
    T_REL_OP_LESS_THAN_EQUAL     shift, and go to state 128
    T_REL_OP_EQUAL               shift, and go to state 129
    T_REL_OP_NOT_EQUAL           shift, and go to state 130
    T_LOG_OP_OR                  shift, and go to state 131
    T_LOG_OP_AND                 shift, and go to state 132
    '&'                          shift, and go to state 133
    '|'                          shift, and go to state 134
    '^'                          shift, and go to state 135

    $default  reduce using rule 100 (LINE_STATEMENT)

    BITWISE_OPERATOR     go to state 136
    LOGICAL_OPERATOR     go to state 137
    RELATIONAL_OPERATOR  go to state 138


State 67

   71 EXPRESSION: EXPRESSION_GRAMMAR .
   72 EXPRESSION_GRAMMAR: EXPRESSION_GRAMMAR . '+' EXPRESSION_TERM
   73                   | EXPRESSION_GRAMMAR . '-' EXPRESSION_TERM

    '+'  shift, and go to state 139
    '-'  shift, and go to state 140

    $default  reduce using rule 71 (EXPRESSION)


State 68

   74 EXPRESSION_GRAMMAR: EXPRESSION_TERM .
   75 EXPRESSION_TERM: EXPRESSION_TERM . '*' EXPRESSION_F
   76                | EXPRESSION_TERM . '/' EXPRESSION_F
   77                | EXPRESSION_TERM . '%' EXPRESSION_F

    '*'  shift, and go to state 141
    '/'  shift, and go to state 142
    '%'  shift, and go to state 143

    $default  reduce using rule 74 (EXPRESSION_GRAMMAR)


State 69

   78 EXPRESSION_TERM: EXPRESSION_F .

    $default  reduce using rule 78 (EXPRESSION_TERM)


State 70

   93 STATEMENT: CONSTRUCT .

    $default  reduce using rule 93 (STATEMENT)


State 71

   85 CONSTRUCT: BLOCK_CONSTRUCT .

    $default  reduce using rule 85 (CONSTRUCT)


State 72

   84 CONSTRUCT: SINGLE_LINE_CONSTRUCT .

    $default  reduce using rule 84 (CONSTRUCT)


State 73

   30 STATEMENTS: STATEMENT . STATEMENTS
   31           | STATEMENT .

    T_TYPE_INT        shift, and go to state 1
    T_TYPE_FLOAT      shift, and go to state 2
    T_TYPE_DOUBLE     shift, and go to state 3
    T_TYPE_BOOL       shift, and go to state 4
    T_TYPE_STRING     shift, and go to state 5
    T_TYPE_CHAR       shift, and go to state 6
    T_TYPE_VOID       shift, and go to state 7
    T_IDENTIFIER      shift, and go to state 32
    T_CHAR_LITERAL    shift, and go to state 33
    T_STRING_LITERAL  shift, and go to state 34
    T_NUMBER_LITERAL  shift, and go to state 35
    T_BOOL_LITERAL    shift, and go to state 36
    T_CONSTRUCT_IF    shift, and go to state 37
    T_CONSTRUCT_ELSE  shift, and go to state 38
    T_CONSTRUCT_FOR   shift, and go to state 39
    '{'               shift, and go to state 8
    '!'               shift, and go to state 40
    '+'               shift, and go to state 41
    '-'               shift, and go to state 42
    T_OP_INCREMENT    shift, and go to state 43
    T_OP_DECREMENT    shift, and go to state 44
    T_IO_COUT         shift, and go to state 45
    T_IO_CIN          shift, and go to state 46
    T_JUMP_BREAK      shift, and go to state 47
    T_JUMP_EXIT       shift, and go to state 48
    T_JUMP_CONTINUE   shift, and go to state 49
    '('               shift, and go to state 50
    ';'               shift, and go to state 51
    T_RETURN          shift, and go to state 52

    $default  reduce using rule 31 (STATEMENTS)

    BLOCK                      go to state 53
    BLOCK_START                go to state 20
    STATEMENTS                 go to state 144
    SINGLE_LINE_IF             go to state 55
    BLOCK_IF                   go to state 56
    IF_PREFIX                  go to state 57
    SINGLE_LINE_ELSE           go to state 58
    BLOCK_ELSE                 go to state 59
    ELSE_PREFIX                go to state 60
    SINGLE_LINE_FOR            go to state 61
    BLOCK_FOR                  go to state 62
    FOR_PREFIX                 go to state 63
    CONDITIONAL_EXPRESSION     go to state 64
    ASSIGNMENT                 go to state 65
    EXPRESSION                 go to state 66
    EXPRESSION_GRAMMAR         go to state 67
    EXPRESSION_TERM            go to state 68
    EXPRESSION_F               go to state 69
    CONSTRUCT                  go to state 70
    BLOCK_CONSTRUCT            go to state 71
    SINGLE_LINE_CONSTRUCT      go to state 72
    STATEMENT                  go to state 73
    JUMP_STATEMENT             go to state 74
    LINE_STATEMENT             go to state 75
    VARIABLE_DECLARATION       go to state 76
    VARIABLE_DECLARATION_TYPE  go to state 77
    COUT                       go to state 78
    CIN                        go to state 79
    RETURN                     go to state 80
    IDENTIFIER_OR_LITERAL      go to state 81
    UNARY_OPERATOR             go to state 82
    TYPE                       go to state 83


State 74

  104 LINE_STATEMENT: JUMP_STATEMENT .

    $default  reduce using rule 104 (LINE_STATEMENT)


State 75

   92 STATEMENT: LINE_STATEMENT . ';'

    ';'  shift, and go to state 145


State 76

   99 LINE_STATEMENT: VARIABLE_DECLARATION .

    $default  reduce using rule 99 (LINE_STATEMENT)


State 77

  105 VARIABLE_DECLARATION: VARIABLE_DECLARATION_TYPE . VARIABLE_LIST

    T_IDENTIFIER  shift, and go to state 146

    VARIABLE_LIST                                    go to state 147
    VARIABLE_DECLARATION_IDENTIFIER                  go to state 148
    ARRAY_VARIABLE_DECLARATION_IDENTIFIER            go to state 149
    ARRAY_VARIABLE_DECLARATION_IDENTIFIER_WITH_SIZE  go to state 150


State 78

  101 LINE_STATEMENT: COUT .

    $default  reduce using rule 101 (LINE_STATEMENT)


State 79

  102 LINE_STATEMENT: CIN .

    $default  reduce using rule 102 (LINE_STATEMENT)


State 80

  103 LINE_STATEMENT: RETURN .

    $default  reduce using rule 103 (LINE_STATEMENT)


State 81

   80 EXPRESSION_F: IDENTIFIER_OR_LITERAL .

    $default  reduce using rule 80 (EXPRESSION_F)


State 82

  141 IDENTIFIER_OR_LITERAL: UNARY_OPERATOR . T_IDENTIFIER
  143                      | UNARY_OPERATOR . T_IDENTIFIER '[' EXPRESSION ']'

    T_IDENTIFIER  shift, and go to state 151


State 83

  106 VARIABLE_DECLARATION_TYPE: TYPE .

    $default  reduce using rule 106 (VARIABLE_DECLARATION_TYPE)


State 84

   26 FUNCTION_PREFIX: TYPE T_IDENTIFIER . '('

    '('  shift, and go to state 152


State 85

    6 INCLUDE: T_HEADER_INCLUDE '<' T_HEADER_FILE . '>'

    '>'  shift, and go to state 153


State 86

    5 INCLUDE: INCLUDE T_HEADER_INCLUDE T_STRING_LITERAL .

    $default  reduce using rule 5 (INCLUDE)


State 87

    4 INCLUDE: INCLUDE T_HEADER_INCLUDE '<' . T_HEADER_FILE '>'

    T_HEADER_FILE  shift, and go to state 154


State 88

   21 FUNCTION_DECLARATION: FUNCTION_PREFIX ')' '{' . STATEMENTS '}'

    T_TYPE_INT        shift, and go to state 1
    T_TYPE_FLOAT      shift, and go to state 2
    T_TYPE_DOUBLE     shift, and go to state 3
    T_TYPE_BOOL       shift, and go to state 4
    T_TYPE_STRING     shift, and go to state 5
    T_TYPE_CHAR       shift, and go to state 6
    T_TYPE_VOID       shift, and go to state 7
    T_IDENTIFIER      shift, and go to state 32
    T_CHAR_LITERAL    shift, and go to state 33
    T_STRING_LITERAL  shift, and go to state 34
    T_NUMBER_LITERAL  shift, and go to state 35
    T_BOOL_LITERAL    shift, and go to state 36
    T_CONSTRUCT_IF    shift, and go to state 37
    T_CONSTRUCT_ELSE  shift, and go to state 38
    T_CONSTRUCT_FOR   shift, and go to state 39
    '{'               shift, and go to state 8
    '!'               shift, and go to state 40
    '+'               shift, and go to state 41
    '-'               shift, and go to state 42
    T_OP_INCREMENT    shift, and go to state 43
    T_OP_DECREMENT    shift, and go to state 44
    T_IO_COUT         shift, and go to state 45
    T_IO_CIN          shift, and go to state 46
    T_JUMP_BREAK      shift, and go to state 47
    T_JUMP_EXIT       shift, and go to state 48
    T_JUMP_CONTINUE   shift, and go to state 49
    '('               shift, and go to state 50
    ';'               shift, and go to state 51
    T_RETURN          shift, and go to state 52

    BLOCK                      go to state 53
    BLOCK_START                go to state 20
    STATEMENTS                 go to state 155
    SINGLE_LINE_IF             go to state 55
    BLOCK_IF                   go to state 56
    IF_PREFIX                  go to state 57
    SINGLE_LINE_ELSE           go to state 58
    BLOCK_ELSE                 go to state 59
    ELSE_PREFIX                go to state 60
    SINGLE_LINE_FOR            go to state 61
    BLOCK_FOR                  go to state 62
    FOR_PREFIX                 go to state 63
    CONDITIONAL_EXPRESSION     go to state 64
    ASSIGNMENT                 go to state 65
    EXPRESSION                 go to state 66
    EXPRESSION_GRAMMAR         go to state 67
    EXPRESSION_TERM            go to state 68
    EXPRESSION_F               go to state 69
    CONSTRUCT                  go to state 70
    BLOCK_CONSTRUCT            go to state 71
    SINGLE_LINE_CONSTRUCT      go to state 72
    STATEMENT                  go to state 73
    JUMP_STATEMENT             go to state 74
    LINE_STATEMENT             go to state 75
    VARIABLE_DECLARATION       go to state 76
    VARIABLE_DECLARATION_TYPE  go to state 77
    COUT                       go to state 78
    CIN                        go to state 79
    RETURN                     go to state 80
    IDENTIFIER_OR_LITERAL      go to state 81
    UNARY_OPERATOR             go to state 82
    TYPE                       go to state 83


State 89

   16 FUNCTION_PROTOTYPE: FUNCTION_PREFIX ')' ';' .

    $default  reduce using rule 16 (FUNCTION_PROTOTYPE)


State 90

   15 FUNCTION_PROTOTYPE: FUNCTION_PREFIX TYPE_LIST ')' . ';'

    ';'  shift, and go to state 156


State 91

   19 FUNCTION_DEFINITION: FUNCTION_PREFIX FUNCTION_PARAMETER_LIST ')' . ';'
   20 FUNCTION_DECLARATION: FUNCTION_PREFIX FUNCTION_PARAMETER_LIST ')' . '{' STATEMENTS '}'

    '{'  shift, and go to state 157
    ';'  shift, and go to state 158


State 92

   22 FUNCTION_PARAMETER_LIST: TYPE T_IDENTIFIER . ',' FUNCTION_PARAMETER_LIST
   23                        | TYPE T_IDENTIFIER . '=' EXPRESSION ',' FUNCTION_PARAMETER_LIST
   24                        | TYPE T_IDENTIFIER .
   25                        | TYPE T_IDENTIFIER . '=' EXPRESSION

    '='  shift, and go to state 159
    ','  shift, and go to state 160

    $default  reduce using rule 24 (FUNCTION_PARAMETER_LIST)


State 93

   17 TYPE_LIST: TYPE ',' . TYPE_LIST

    T_TYPE_INT     shift, and go to state 1
    T_TYPE_FLOAT   shift, and go to state 2
    T_TYPE_DOUBLE  shift, and go to state 3
    T_TYPE_BOOL    shift, and go to state 4
    T_TYPE_STRING  shift, and go to state 5
    T_TYPE_CHAR    shift, and go to state 6
    T_TYPE_VOID    shift, and go to state 7

    TYPE_LIST  go to state 161
    TYPE       go to state 162


State 94

   63 ASSIGNMENT_OPERATOR: '=' .

    $default  reduce using rule 63 (ASSIGNMENT_OPERATOR)


State 95

   64 ASSIGNMENT_OPERATOR: T_OP_ADD_ASSIGNMENT .

    $default  reduce using rule 64 (ASSIGNMENT_OPERATOR)


State 96

   65 ASSIGNMENT_OPERATOR: T_OP_SUBTRACT_ASSIGNMENT .

    $default  reduce using rule 65 (ASSIGNMENT_OPERATOR)


State 97

   66 ASSIGNMENT_OPERATOR: T_OP_MULTIPLY_ASSIGNMENT .

    $default  reduce using rule 66 (ASSIGNMENT_OPERATOR)


State 98

   67 ASSIGNMENT_OPERATOR: T_OP_DIVIDE_ASSIGNMENT .

    $default  reduce using rule 67 (ASSIGNMENT_OPERATOR)


State 99

   68 ASSIGNMENT_OPERATOR: T_OP_MOD_ASSIGNMENT .

    $default  reduce using rule 68 (ASSIGNMENT_OPERATOR)


State 100

  138 IDENTIFIER_OR_LITERAL: T_IDENTIFIER '(' . ')'
  139                      | T_IDENTIFIER '(' . LITERAL_LIST ')'

    T_IDENTIFIER      shift, and go to state 107
    T_CHAR_LITERAL    shift, and go to state 33
    T_STRING_LITERAL  shift, and go to state 34
    T_NUMBER_LITERAL  shift, and go to state 35
    T_BOOL_LITERAL    shift, and go to state 36
    T_OP_INCREMENT    shift, and go to state 43
    T_OP_DECREMENT    shift, and go to state 44
    ')'               shift, and go to state 163

    LITERAL_LIST           go to state 164
    IDENTIFIER_OR_LITERAL  go to state 165
    UNARY_OPERATOR         go to state 82


State 101

   61 ASSIGNMENT: T_IDENTIFIER '[' . EXPRESSION ']' ASSIGNMENT_OPERATOR EXPRESSION_GRAMMAR
   62           | T_IDENTIFIER '[' . EXPRESSION ']' ASSIGNMENT_OPERATOR ASSIGNMENT
  142 IDENTIFIER_OR_LITERAL: T_IDENTIFIER '[' . EXPRESSION ']'
  144                      | T_IDENTIFIER '[' . EXPRESSION ']' UNARY_OPERATOR

    T_IDENTIFIER      shift, and go to state 32
    T_CHAR_LITERAL    shift, and go to state 33
    T_STRING_LITERAL  shift, and go to state 34
    T_NUMBER_LITERAL  shift, and go to state 35
    T_BOOL_LITERAL    shift, and go to state 36
    '!'               shift, and go to state 40
    '+'               shift, and go to state 41
    '-'               shift, and go to state 42
    T_OP_INCREMENT    shift, and go to state 43
    T_OP_DECREMENT    shift, and go to state 44
    '('               shift, and go to state 50

    CONDITIONAL_EXPRESSION  go to state 64
    ASSIGNMENT              go to state 65
    EXPRESSION              go to state 166
    EXPRESSION_GRAMMAR      go to state 67
    EXPRESSION_TERM         go to state 68
    EXPRESSION_F            go to state 69
    IDENTIFIER_OR_LITERAL   go to state 81
    UNARY_OPERATOR          go to state 82


State 102

   59 ASSIGNMENT: T_IDENTIFIER ASSIGNMENT_OPERATOR . EXPRESSION_GRAMMAR
   60           | T_IDENTIFIER ASSIGNMENT_OPERATOR . ASSIGNMENT

    T_IDENTIFIER      shift, and go to state 32
    T_CHAR_LITERAL    shift, and go to state 33
    T_STRING_LITERAL  shift, and go to state 34
    T_NUMBER_LITERAL  shift, and go to state 35
    T_BOOL_LITERAL    shift, and go to state 36
    '!'               shift, and go to state 40
    '+'               shift, and go to state 41
    '-'               shift, and go to state 42
    T_OP_INCREMENT    shift, and go to state 43
    T_OP_DECREMENT    shift, and go to state 44
    '('               shift, and go to state 50

    ASSIGNMENT             go to state 167
    EXPRESSION_GRAMMAR     go to state 168
    EXPRESSION_TERM        go to state 68
    EXPRESSION_F           go to state 69
    IDENTIFIER_OR_LITERAL  go to state 81
    UNARY_OPERATOR         go to state 82


State 103

  140 IDENTIFIER_OR_LITERAL: T_IDENTIFIER UNARY_OPERATOR .

    $default  reduce using rule 140 (IDENTIFIER_OR_LITERAL)


State 104

   35 BLOCK_IF: T_CONSTRUCT_IF '(' . EXPRESSION ')' BLOCK
   36 IF_PREFIX: T_CONSTRUCT_IF '(' . EXPRESSION ')'

    T_IDENTIFIER      shift, and go to state 32
    T_CHAR_LITERAL    shift, and go to state 33
    T_STRING_LITERAL  shift, and go to state 34
    T_NUMBER_LITERAL  shift, and go to state 35
    T_BOOL_LITERAL    shift, and go to state 36
    '!'               shift, and go to state 40
    '+'               shift, and go to state 41
    '-'               shift, and go to state 42
    T_OP_INCREMENT    shift, and go to state 43
    T_OP_DECREMENT    shift, and go to state 44
    '('               shift, and go to state 50

    CONDITIONAL_EXPRESSION  go to state 64
    ASSIGNMENT              go to state 65
    EXPRESSION              go to state 169
    EXPRESSION_GRAMMAR      go to state 67
    EXPRESSION_TERM         go to state 68
    EXPRESSION_F            go to state 69
    IDENTIFIER_OR_LITERAL   go to state 81
    UNARY_OPERATOR          go to state 82


State 105

   40 BLOCK_ELSE: T_CONSTRUCT_ELSE BLOCK .

    $default  reduce using rule 40 (BLOCK_ELSE)


State 106

   46 FOR_PREFIX: T_CONSTRUCT_FOR '(' .

    $default  reduce using rule 46 (FOR_PREFIX)


State 107

  137 IDENTIFIER_OR_LITERAL: T_IDENTIFIER .
  138                      | T_IDENTIFIER . '(' ')'
  139                      | T_IDENTIFIER . '(' LITERAL_LIST ')'
  140                      | T_IDENTIFIER . UNARY_OPERATOR
  142                      | T_IDENTIFIER . '[' EXPRESSION ']'
  144                      | T_IDENTIFIER . '[' EXPRESSION ']' UNARY_OPERATOR

    T_OP_INCREMENT  shift, and go to state 43
    T_OP_DECREMENT  shift, and go to state 44
    '('             shift, and go to state 100
    '['             shift, and go to state 170

    $default  reduce using rule 137 (IDENTIFIER_OR_LITERAL)

    UNARY_OPERATOR  go to state 103


State 108

   79 EXPRESSION_TERM: '!' EXPRESSION_F .

    $default  reduce using rule 79 (EXPRESSION_TERM)


State 109

   82 EXPRESSION_F: '+' EXPRESSION_F .

    $default  reduce using rule 82 (EXPRESSION_F)


State 110

   83 EXPRESSION_F: '-' EXPRESSION_F .

    $default  reduce using rule 83 (EXPRESSION_F)


State 111

  122 COUT: T_IO_COUT T_IO_INSERTION . INSERTION_LIST

    T_IDENTIFIER      shift, and go to state 32
    T_CHAR_LITERAL    shift, and go to state 33
    T_STRING_LITERAL  shift, and go to state 34
    T_NUMBER_LITERAL  shift, and go to state 35
    T_BOOL_LITERAL    shift, and go to state 36
    '!'               shift, and go to state 40
    '+'               shift, and go to state 41
    '-'               shift, and go to state 42
    T_OP_INCREMENT    shift, and go to state 43
    T_OP_DECREMENT    shift, and go to state 44
    '('               shift, and go to state 50

    CONDITIONAL_EXPRESSION  go to state 64
    ASSIGNMENT              go to state 65
    EXPRESSION              go to state 171
    EXPRESSION_GRAMMAR      go to state 67
    EXPRESSION_TERM         go to state 68
    EXPRESSION_F            go to state 69
    INSERTION_LIST          go to state 172
    IDENTIFIER_OR_LITERAL   go to state 81
    UNARY_OPERATOR          go to state 82


State 112

  125 CIN: T_IO_CIN T_IO_EXTRACTION . EXTRACTION_LIST

    T_IDENTIFIER  shift, and go to state 173

    EXTRACTION_LIST  go to state 174


State 113

   56 CONDITIONAL_EXPRESSION: EXPRESSION . LOGICAL_OPERATOR EXPRESSION_GRAMMAR
   57                       | EXPRESSION . RELATIONAL_OPERATOR EXPRESSION_GRAMMAR
   58                       | EXPRESSION . BITWISE_OPERATOR EXPRESSION_GRAMMAR
   81 EXPRESSION_F: '(' EXPRESSION . ')'

    '>'                          shift, and go to state 125
    '<'                          shift, and go to state 126
    T_REL_OP_GREATER_THAN_EQUAL  shift, and go to state 127
    T_REL_OP_LESS_THAN_EQUAL     shift, and go to state 128
    T_REL_OP_EQUAL               shift, and go to state 129
    T_REL_OP_NOT_EQUAL           shift, and go to state 130
    T_LOG_OP_OR                  shift, and go to state 131
    T_LOG_OP_AND                 shift, and go to state 132
    '&'                          shift, and go to state 133
    '|'                          shift, and go to state 134
    '^'                          shift, and go to state 135
    ')'                          shift, and go to state 175

    BITWISE_OPERATOR     go to state 136
    LOGICAL_OPERATOR     go to state 137
    RELATIONAL_OPERATOR  go to state 138


State 114

   56 CONDITIONAL_EXPRESSION: EXPRESSION . LOGICAL_OPERATOR EXPRESSION_GRAMMAR
   57                       | EXPRESSION . RELATIONAL_OPERATOR EXPRESSION_GRAMMAR
   58                       | EXPRESSION . BITWISE_OPERATOR EXPRESSION_GRAMMAR
  128 RETURN: T_RETURN EXPRESSION .

    '>'                          shift, and go to state 125
    '<'                          shift, and go to state 126
    T_REL_OP_GREATER_THAN_EQUAL  shift, and go to state 127
    T_REL_OP_LESS_THAN_EQUAL     shift, and go to state 128
    T_REL_OP_EQUAL               shift, and go to state 129
    T_REL_OP_NOT_EQUAL           shift, and go to state 130
    T_LOG_OP_OR                  shift, and go to state 131
    T_LOG_OP_AND                 shift, and go to state 132
    '&'                          shift, and go to state 133
    '|'                          shift, and go to state 134
    '^'                          shift, and go to state 135

    $default  reduce using rule 128 (RETURN)

    BITWISE_OPERATOR     go to state 136
    LOGICAL_OPERATOR     go to state 137
    RELATIONAL_OPERATOR  go to state 138


State 115

   29 BLOCK_END: '}' .

    $default  reduce using rule 29 (BLOCK_END)


State 116

   27 BLOCK: BLOCK_START STATEMENTS BLOCK_END .

    $default  reduce using rule 27 (BLOCK)


State 117

   33 SINGLE_LINE_IF: IF_PREFIX ';' .

    $default  reduce using rule 33 (SINGLE_LINE_IF)


State 118

   34 SINGLE_LINE_IF: IF_PREFIX CONSTRUCT .

    $default  reduce using rule 34 (SINGLE_LINE_IF)


State 119

   32 SINGLE_LINE_IF: IF_PREFIX LINE_STATEMENT . ';'

    ';'  shift, and go to state 176


State 120

   38 SINGLE_LINE_ELSE: ELSE_PREFIX ';' .

    $default  reduce using rule 38 (SINGLE_LINE_ELSE)


State 121

   39 SINGLE_LINE_ELSE: ELSE_PREFIX CONSTRUCT .

    $default  reduce using rule 39 (SINGLE_LINE_ELSE)


State 122

   37 SINGLE_LINE_ELSE: ELSE_PREFIX LINE_STATEMENT . ';'

    ';'  shift, and go to state 177


State 123

   42 SINGLE_LINE_FOR: FOR_PREFIX FOR_INIT_STATEMENT . ';' FOR_CONDITION_STATEMENT ';' FOR_ACTION_STATEMENT ')' LINE_STATEMENT ';'
   43                | FOR_PREFIX FOR_INIT_STATEMENT . ';' FOR_CONDITION_STATEMENT ';' FOR_ACTION_STATEMENT ')' ';'
   44                | FOR_PREFIX FOR_INIT_STATEMENT . ';' FOR_CONDITION_STATEMENT ';' FOR_ACTION_STATEMENT ')' CONSTRUCT
   45 BLOCK_FOR: FOR_PREFIX FOR_INIT_STATEMENT . ';' FOR_CONDITION_STATEMENT ';' FOR_ACTION_STATEMENT ')' '{' STATEMENTS '}'

    ';'  shift, and go to state 178


State 124

   48 FOR_INIT_STATEMENT: LINE_STATEMENT .

    $default  reduce using rule 48 (FOR_INIT_STATEMENT)


State 125

  132 RELATIONAL_OPERATOR: '>' .

    $default  reduce using rule 132 (RELATIONAL_OPERATOR)


State 126

  134 RELATIONAL_OPERATOR: '<' .

    $default  reduce using rule 134 (RELATIONAL_OPERATOR)


State 127

  133 RELATIONAL_OPERATOR: T_REL_OP_GREATER_THAN_EQUAL .

    $default  reduce using rule 133 (RELATIONAL_OPERATOR)


State 128

  135 RELATIONAL_OPERATOR: T_REL_OP_LESS_THAN_EQUAL .

    $default  reduce using rule 135 (RELATIONAL_OPERATOR)


State 129

  131 RELATIONAL_OPERATOR: T_REL_OP_EQUAL .

    $default  reduce using rule 131 (RELATIONAL_OPERATOR)


State 130

  136 RELATIONAL_OPERATOR: T_REL_OP_NOT_EQUAL .

    $default  reduce using rule 136 (RELATIONAL_OPERATOR)


State 131

  130 LOGICAL_OPERATOR: T_LOG_OP_OR .

    $default  reduce using rule 130 (LOGICAL_OPERATOR)


State 132

  129 LOGICAL_OPERATOR: T_LOG_OP_AND .

    $default  reduce using rule 129 (LOGICAL_OPERATOR)


State 133

   53 BITWISE_OPERATOR: '&' .

    $default  reduce using rule 53 (BITWISE_OPERATOR)


State 134

   54 BITWISE_OPERATOR: '|' .

    $default  reduce using rule 54 (BITWISE_OPERATOR)


State 135

   55 BITWISE_OPERATOR: '^' .

    $default  reduce using rule 55 (BITWISE_OPERATOR)


State 136

   58 CONDITIONAL_EXPRESSION: EXPRESSION BITWISE_OPERATOR . EXPRESSION_GRAMMAR

    T_IDENTIFIER      shift, and go to state 107
    T_CHAR_LITERAL    shift, and go to state 33
    T_STRING_LITERAL  shift, and go to state 34
    T_NUMBER_LITERAL  shift, and go to state 35
    T_BOOL_LITERAL    shift, and go to state 36
    '!'               shift, and go to state 40
    '+'               shift, and go to state 41
    '-'               shift, and go to state 42
    T_OP_INCREMENT    shift, and go to state 43
    T_OP_DECREMENT    shift, and go to state 44
    '('               shift, and go to state 50

    EXPRESSION_GRAMMAR     go to state 179
    EXPRESSION_TERM        go to state 68
    EXPRESSION_F           go to state 69
    IDENTIFIER_OR_LITERAL  go to state 81
    UNARY_OPERATOR         go to state 82


State 137

   56 CONDITIONAL_EXPRESSION: EXPRESSION LOGICAL_OPERATOR . EXPRESSION_GRAMMAR

    T_IDENTIFIER      shift, and go to state 107
    T_CHAR_LITERAL    shift, and go to state 33
    T_STRING_LITERAL  shift, and go to state 34
    T_NUMBER_LITERAL  shift, and go to state 35
    T_BOOL_LITERAL    shift, and go to state 36
    '!'               shift, and go to state 40
    '+'               shift, and go to state 41
    '-'               shift, and go to state 42
    T_OP_INCREMENT    shift, and go to state 43
    T_OP_DECREMENT    shift, and go to state 44
    '('               shift, and go to state 50

    EXPRESSION_GRAMMAR     go to state 180
    EXPRESSION_TERM        go to state 68
    EXPRESSION_F           go to state 69
    IDENTIFIER_OR_LITERAL  go to state 81
    UNARY_OPERATOR         go to state 82


State 138

   57 CONDITIONAL_EXPRESSION: EXPRESSION RELATIONAL_OPERATOR . EXPRESSION_GRAMMAR

    T_IDENTIFIER      shift, and go to state 107
    T_CHAR_LITERAL    shift, and go to state 33
    T_STRING_LITERAL  shift, and go to state 34
    T_NUMBER_LITERAL  shift, and go to state 35
    T_BOOL_LITERAL    shift, and go to state 36
    '!'               shift, and go to state 40
    '+'               shift, and go to state 41
    '-'               shift, and go to state 42
    T_OP_INCREMENT    shift, and go to state 43
    T_OP_DECREMENT    shift, and go to state 44
    '('               shift, and go to state 50

    EXPRESSION_GRAMMAR     go to state 181
    EXPRESSION_TERM        go to state 68
    EXPRESSION_F           go to state 69
    IDENTIFIER_OR_LITERAL  go to state 81
    UNARY_OPERATOR         go to state 82


State 139

   72 EXPRESSION_GRAMMAR: EXPRESSION_GRAMMAR '+' . EXPRESSION_TERM

    T_IDENTIFIER      shift, and go to state 107
    T_CHAR_LITERAL    shift, and go to state 33
    T_STRING_LITERAL  shift, and go to state 34
    T_NUMBER_LITERAL  shift, and go to state 35
    T_BOOL_LITERAL    shift, and go to state 36
    '!'               shift, and go to state 40
    '+'               shift, and go to state 41
    '-'               shift, and go to state 42
    T_OP_INCREMENT    shift, and go to state 43
    T_OP_DECREMENT    shift, and go to state 44
    '('               shift, and go to state 50

    EXPRESSION_TERM        go to state 182
    EXPRESSION_F           go to state 69
    IDENTIFIER_OR_LITERAL  go to state 81
    UNARY_OPERATOR         go to state 82


State 140

   73 EXPRESSION_GRAMMAR: EXPRESSION_GRAMMAR '-' . EXPRESSION_TERM

    T_IDENTIFIER      shift, and go to state 107
    T_CHAR_LITERAL    shift, and go to state 33
    T_STRING_LITERAL  shift, and go to state 34
    T_NUMBER_LITERAL  shift, and go to state 35
    T_BOOL_LITERAL    shift, and go to state 36
    '!'               shift, and go to state 40
    '+'               shift, and go to state 41
    '-'               shift, and go to state 42
    T_OP_INCREMENT    shift, and go to state 43
    T_OP_DECREMENT    shift, and go to state 44
    '('               shift, and go to state 50

    EXPRESSION_TERM        go to state 183
    EXPRESSION_F           go to state 69
    IDENTIFIER_OR_LITERAL  go to state 81
    UNARY_OPERATOR         go to state 82


State 141

   75 EXPRESSION_TERM: EXPRESSION_TERM '*' . EXPRESSION_F

    T_IDENTIFIER      shift, and go to state 107
    T_CHAR_LITERAL    shift, and go to state 33
    T_STRING_LITERAL  shift, and go to state 34
    T_NUMBER_LITERAL  shift, and go to state 35
    T_BOOL_LITERAL    shift, and go to state 36
    '+'               shift, and go to state 41
    '-'               shift, and go to state 42
    T_OP_INCREMENT    shift, and go to state 43
    T_OP_DECREMENT    shift, and go to state 44
    '('               shift, and go to state 50

    EXPRESSION_F           go to state 184
    IDENTIFIER_OR_LITERAL  go to state 81
    UNARY_OPERATOR         go to state 82


State 142

   76 EXPRESSION_TERM: EXPRESSION_TERM '/' . EXPRESSION_F

    T_IDENTIFIER      shift, and go to state 107
    T_CHAR_LITERAL    shift, and go to state 33
    T_STRING_LITERAL  shift, and go to state 34
    T_NUMBER_LITERAL  shift, and go to state 35
    T_BOOL_LITERAL    shift, and go to state 36
    '+'               shift, and go to state 41
    '-'               shift, and go to state 42
    T_OP_INCREMENT    shift, and go to state 43
    T_OP_DECREMENT    shift, and go to state 44
    '('               shift, and go to state 50

    EXPRESSION_F           go to state 185
    IDENTIFIER_OR_LITERAL  go to state 81
    UNARY_OPERATOR         go to state 82


State 143

   77 EXPRESSION_TERM: EXPRESSION_TERM '%' . EXPRESSION_F

    T_IDENTIFIER      shift, and go to state 107
    T_CHAR_LITERAL    shift, and go to state 33
    T_STRING_LITERAL  shift, and go to state 34
    T_NUMBER_LITERAL  shift, and go to state 35
    T_BOOL_LITERAL    shift, and go to state 36
    '+'               shift, and go to state 41
    '-'               shift, and go to state 42
    T_OP_INCREMENT    shift, and go to state 43
    T_OP_DECREMENT    shift, and go to state 44
    '('               shift, and go to state 50

    EXPRESSION_F           go to state 186
    IDENTIFIER_OR_LITERAL  go to state 81
    UNARY_OPERATOR         go to state 82


State 144

   30 STATEMENTS: STATEMENT STATEMENTS .

    $default  reduce using rule 30 (STATEMENTS)


State 145

   92 STATEMENT: LINE_STATEMENT ';' .

    $default  reduce using rule 92 (STATEMENT)


State 146

  115 VARIABLE_DECLARATION_IDENTIFIER: T_IDENTIFIER .
  116 ARRAY_VARIABLE_DECLARATION_IDENTIFIER: T_IDENTIFIER . '[' ']'
  117                                      | T_IDENTIFIER . '[' EXPRESSION ']'
  118 ARRAY_VARIABLE_DECLARATION_IDENTIFIER_WITH_SIZE: T_IDENTIFIER . '[' EXPRESSION ']'

    '['  shift, and go to state 187

    $default  reduce using rule 115 (VARIABLE_DECLARATION_IDENTIFIER)


State 147

  105 VARIABLE_DECLARATION: VARIABLE_DECLARATION_TYPE VARIABLE_LIST .

    $default  reduce using rule 105 (VARIABLE_DECLARATION)


State 148

  107 VARIABLE_LIST: VARIABLE_DECLARATION_IDENTIFIER . ',' VARIABLE_LIST
  108              | VARIABLE_DECLARATION_IDENTIFIER . '=' EXPRESSION ',' VARIABLE_LIST
  109              | VARIABLE_DECLARATION_IDENTIFIER .
  110              | VARIABLE_DECLARATION_IDENTIFIER . '=' EXPRESSION

    '='  shift, and go to state 188
    ','  shift, and go to state 189

    $default  reduce using rule 109 (VARIABLE_LIST)


State 149

  112 VARIABLE_LIST: ARRAY_VARIABLE_DECLARATION_IDENTIFIER . '=' ARRAY_LIST ',' VARIABLE_LIST
  114              | ARRAY_VARIABLE_DECLARATION_IDENTIFIER . '=' ARRAY_LIST

    '='  shift, and go to state 190


State 150

  111 VARIABLE_LIST: ARRAY_VARIABLE_DECLARATION_IDENTIFIER_WITH_SIZE . ',' VARIABLE_LIST
  113              | ARRAY_VARIABLE_DECLARATION_IDENTIFIER_WITH_SIZE .

    ','  shift, and go to state 191

    $default  reduce using rule 113 (VARIABLE_LIST)


State 151

  141 IDENTIFIER_OR_LITERAL: UNARY_OPERATOR T_IDENTIFIER .
  143                      | UNARY_OPERATOR T_IDENTIFIER . '[' EXPRESSION ']'

    '['  shift, and go to state 192

    $default  reduce using rule 141 (IDENTIFIER_OR_LITERAL)


State 152

   26 FUNCTION_PREFIX: TYPE T_IDENTIFIER '(' .

    $default  reduce using rule 26 (FUNCTION_PREFIX)


State 153

    6 INCLUDE: T_HEADER_INCLUDE '<' T_HEADER_FILE '>' .

    $default  reduce using rule 6 (INCLUDE)


State 154

    4 INCLUDE: INCLUDE T_HEADER_INCLUDE '<' T_HEADER_FILE . '>'

    '>'  shift, and go to state 193


State 155

   21 FUNCTION_DECLARATION: FUNCTION_PREFIX ')' '{' STATEMENTS . '}'

    '}'  shift, and go to state 194


State 156

   15 FUNCTION_PROTOTYPE: FUNCTION_PREFIX TYPE_LIST ')' ';' .

    $default  reduce using rule 15 (FUNCTION_PROTOTYPE)


State 157

   20 FUNCTION_DECLARATION: FUNCTION_PREFIX FUNCTION_PARAMETER_LIST ')' '{' . STATEMENTS '}'

    T_TYPE_INT        shift, and go to state 1
    T_TYPE_FLOAT      shift, and go to state 2
    T_TYPE_DOUBLE     shift, and go to state 3
    T_TYPE_BOOL       shift, and go to state 4
    T_TYPE_STRING     shift, and go to state 5
    T_TYPE_CHAR       shift, and go to state 6
    T_TYPE_VOID       shift, and go to state 7
    T_IDENTIFIER      shift, and go to state 32
    T_CHAR_LITERAL    shift, and go to state 33
    T_STRING_LITERAL  shift, and go to state 34
    T_NUMBER_LITERAL  shift, and go to state 35
    T_BOOL_LITERAL    shift, and go to state 36
    T_CONSTRUCT_IF    shift, and go to state 37
    T_CONSTRUCT_ELSE  shift, and go to state 38
    T_CONSTRUCT_FOR   shift, and go to state 39
    '{'               shift, and go to state 8
    '!'               shift, and go to state 40
    '+'               shift, and go to state 41
    '-'               shift, and go to state 42
    T_OP_INCREMENT    shift, and go to state 43
    T_OP_DECREMENT    shift, and go to state 44
    T_IO_COUT         shift, and go to state 45
    T_IO_CIN          shift, and go to state 46
    T_JUMP_BREAK      shift, and go to state 47
    T_JUMP_EXIT       shift, and go to state 48
    T_JUMP_CONTINUE   shift, and go to state 49
    '('               shift, and go to state 50
    ';'               shift, and go to state 51
    T_RETURN          shift, and go to state 52

    BLOCK                      go to state 53
    BLOCK_START                go to state 20
    STATEMENTS                 go to state 195
    SINGLE_LINE_IF             go to state 55
    BLOCK_IF                   go to state 56
    IF_PREFIX                  go to state 57
    SINGLE_LINE_ELSE           go to state 58
    BLOCK_ELSE                 go to state 59
    ELSE_PREFIX                go to state 60
    SINGLE_LINE_FOR            go to state 61
    BLOCK_FOR                  go to state 62
    FOR_PREFIX                 go to state 63
    CONDITIONAL_EXPRESSION     go to state 64
    ASSIGNMENT                 go to state 65
    EXPRESSION                 go to state 66
    EXPRESSION_GRAMMAR         go to state 67
    EXPRESSION_TERM            go to state 68
    EXPRESSION_F               go to state 69
    CONSTRUCT                  go to state 70
    BLOCK_CONSTRUCT            go to state 71
    SINGLE_LINE_CONSTRUCT      go to state 72
    STATEMENT                  go to state 73
    JUMP_STATEMENT             go to state 74
    LINE_STATEMENT             go to state 75
    VARIABLE_DECLARATION       go to state 76
    VARIABLE_DECLARATION_TYPE  go to state 77
    COUT                       go to state 78
    CIN                        go to state 79
    RETURN                     go to state 80
    IDENTIFIER_OR_LITERAL      go to state 81
    UNARY_OPERATOR             go to state 82
    TYPE                       go to state 83


State 158

   19 FUNCTION_DEFINITION: FUNCTION_PREFIX FUNCTION_PARAMETER_LIST ')' ';' .

    $default  reduce using rule 19 (FUNCTION_DEFINITION)


State 159

   23 FUNCTION_PARAMETER_LIST: TYPE T_IDENTIFIER '=' . EXPRESSION ',' FUNCTION_PARAMETER_LIST
   25                        | TYPE T_IDENTIFIER '=' . EXPRESSION

    T_IDENTIFIER      shift, and go to state 32
    T_CHAR_LITERAL    shift, and go to state 33
    T_STRING_LITERAL  shift, and go to state 34
    T_NUMBER_LITERAL  shift, and go to state 35
    T_BOOL_LITERAL    shift, and go to state 36
    '!'               shift, and go to state 40
    '+'               shift, and go to state 41
    '-'               shift, and go to state 42
    T_OP_INCREMENT    shift, and go to state 43
    T_OP_DECREMENT    shift, and go to state 44
    '('               shift, and go to state 50

    CONDITIONAL_EXPRESSION  go to state 64
    ASSIGNMENT              go to state 65
    EXPRESSION              go to state 196
    EXPRESSION_GRAMMAR      go to state 67
    EXPRESSION_TERM         go to state 68
    EXPRESSION_F            go to state 69
    IDENTIFIER_OR_LITERAL   go to state 81
    UNARY_OPERATOR          go to state 82


State 160

   22 FUNCTION_PARAMETER_LIST: TYPE T_IDENTIFIER ',' . FUNCTION_PARAMETER_LIST

    T_TYPE_INT     shift, and go to state 1
    T_TYPE_FLOAT   shift, and go to state 2
    T_TYPE_DOUBLE  shift, and go to state 3
    T_TYPE_BOOL    shift, and go to state 4
    T_TYPE_STRING  shift, and go to state 5
    T_TYPE_CHAR    shift, and go to state 6
    T_TYPE_VOID    shift, and go to state 7

    FUNCTION_PARAMETER_LIST  go to state 197
    TYPE                     go to state 198


State 161

   17 TYPE_LIST: TYPE ',' TYPE_LIST .

    $default  reduce using rule 17 (TYPE_LIST)


State 162

   17 TYPE_LIST: TYPE . ',' TYPE_LIST
   18          | TYPE .

    ','  shift, and go to state 93

    $default  reduce using rule 18 (TYPE_LIST)


State 163

  138 IDENTIFIER_OR_LITERAL: T_IDENTIFIER '(' ')' .

    $default  reduce using rule 138 (IDENTIFIER_OR_LITERAL)


State 164

  139 IDENTIFIER_OR_LITERAL: T_IDENTIFIER '(' LITERAL_LIST . ')'

    ')'  shift, and go to state 199


State 165

  120 LITERAL_LIST: IDENTIFIER_OR_LITERAL . ',' LITERAL_LIST
  121             | IDENTIFIER_OR_LITERAL .

    ','  shift, and go to state 200

    $default  reduce using rule 121 (LITERAL_LIST)


State 166

   56 CONDITIONAL_EXPRESSION: EXPRESSION . LOGICAL_OPERATOR EXPRESSION_GRAMMAR
   57                       | EXPRESSION . RELATIONAL_OPERATOR EXPRESSION_GRAMMAR
   58                       | EXPRESSION . BITWISE_OPERATOR EXPRESSION_GRAMMAR
   61 ASSIGNMENT: T_IDENTIFIER '[' EXPRESSION . ']' ASSIGNMENT_OPERATOR EXPRESSION_GRAMMAR
   62           | T_IDENTIFIER '[' EXPRESSION . ']' ASSIGNMENT_OPERATOR ASSIGNMENT
  142 IDENTIFIER_OR_LITERAL: T_IDENTIFIER '[' EXPRESSION . ']'
  144                      | T_IDENTIFIER '[' EXPRESSION . ']' UNARY_OPERATOR

    '>'                          shift, and go to state 125
    '<'                          shift, and go to state 126
    T_REL_OP_GREATER_THAN_EQUAL  shift, and go to state 127
    T_REL_OP_LESS_THAN_EQUAL     shift, and go to state 128
    T_REL_OP_EQUAL               shift, and go to state 129
    T_REL_OP_NOT_EQUAL           shift, and go to state 130
    T_LOG_OP_OR                  shift, and go to state 131
    T_LOG_OP_AND                 shift, and go to state 132
    '&'                          shift, and go to state 133
    '|'                          shift, and go to state 134
    '^'                          shift, and go to state 135
    ']'                          shift, and go to state 201

    BITWISE_OPERATOR     go to state 136
    LOGICAL_OPERATOR     go to state 137
    RELATIONAL_OPERATOR  go to state 138


State 167

   60 ASSIGNMENT: T_IDENTIFIER ASSIGNMENT_OPERATOR ASSIGNMENT .

    $default  reduce using rule 60 (ASSIGNMENT)


State 168

   59 ASSIGNMENT: T_IDENTIFIER ASSIGNMENT_OPERATOR EXPRESSION_GRAMMAR .
   72 EXPRESSION_GRAMMAR: EXPRESSION_GRAMMAR . '+' EXPRESSION_TERM
   73                   | EXPRESSION_GRAMMAR . '-' EXPRESSION_TERM

    '+'  shift, and go to state 139
    '-'  shift, and go to state 140

    $default  reduce using rule 59 (ASSIGNMENT)


State 169

   35 BLOCK_IF: T_CONSTRUCT_IF '(' EXPRESSION . ')' BLOCK
   36 IF_PREFIX: T_CONSTRUCT_IF '(' EXPRESSION . ')'
   56 CONDITIONAL_EXPRESSION: EXPRESSION . LOGICAL_OPERATOR EXPRESSION_GRAMMAR
   57                       | EXPRESSION . RELATIONAL_OPERATOR EXPRESSION_GRAMMAR
   58                       | EXPRESSION . BITWISE_OPERATOR EXPRESSION_GRAMMAR

    '>'                          shift, and go to state 125
    '<'                          shift, and go to state 126
    T_REL_OP_GREATER_THAN_EQUAL  shift, and go to state 127
    T_REL_OP_LESS_THAN_EQUAL     shift, and go to state 128
    T_REL_OP_EQUAL               shift, and go to state 129
    T_REL_OP_NOT_EQUAL           shift, and go to state 130
    T_LOG_OP_OR                  shift, and go to state 131
    T_LOG_OP_AND                 shift, and go to state 132
    '&'                          shift, and go to state 133
    '|'                          shift, and go to state 134
    '^'                          shift, and go to state 135
    ')'                          shift, and go to state 202

    BITWISE_OPERATOR     go to state 136
    LOGICAL_OPERATOR     go to state 137
    RELATIONAL_OPERATOR  go to state 138


State 170

  142 IDENTIFIER_OR_LITERAL: T_IDENTIFIER '[' . EXPRESSION ']'
  144                      | T_IDENTIFIER '[' . EXPRESSION ']' UNARY_OPERATOR

    T_IDENTIFIER      shift, and go to state 32
    T_CHAR_LITERAL    shift, and go to state 33
    T_STRING_LITERAL  shift, and go to state 34
    T_NUMBER_LITERAL  shift, and go to state 35
    T_BOOL_LITERAL    shift, and go to state 36
    '!'               shift, and go to state 40
    '+'               shift, and go to state 41
    '-'               shift, and go to state 42
    T_OP_INCREMENT    shift, and go to state 43
    T_OP_DECREMENT    shift, and go to state 44
    '('               shift, and go to state 50

    CONDITIONAL_EXPRESSION  go to state 64
    ASSIGNMENT              go to state 65
    EXPRESSION              go to state 203
    EXPRESSION_GRAMMAR      go to state 67
    EXPRESSION_TERM         go to state 68
    EXPRESSION_F            go to state 69
    IDENTIFIER_OR_LITERAL   go to state 81
    UNARY_OPERATOR          go to state 82


State 171

   56 CONDITIONAL_EXPRESSION: EXPRESSION . LOGICAL_OPERATOR EXPRESSION_GRAMMAR
   57                       | EXPRESSION . RELATIONAL_OPERATOR EXPRESSION_GRAMMAR
   58                       | EXPRESSION . BITWISE_OPERATOR EXPRESSION_GRAMMAR
  123 INSERTION_LIST: EXPRESSION . T_IO_INSERTION INSERTION_LIST
  124               | EXPRESSION .

    '>'                          shift, and go to state 125
    '<'                          shift, and go to state 126
    T_REL_OP_GREATER_THAN_EQUAL  shift, and go to state 127
    T_REL_OP_LESS_THAN_EQUAL     shift, and go to state 128
    T_REL_OP_EQUAL               shift, and go to state 129
    T_REL_OP_NOT_EQUAL           shift, and go to state 130
    T_LOG_OP_OR                  shift, and go to state 131
    T_LOG_OP_AND                 shift, and go to state 132
    '&'                          shift, and go to state 133
    '|'                          shift, and go to state 134
    '^'                          shift, and go to state 135
    T_IO_INSERTION               shift, and go to state 204

    $default  reduce using rule 124 (INSERTION_LIST)

    BITWISE_OPERATOR     go to state 136
    LOGICAL_OPERATOR     go to state 137
    RELATIONAL_OPERATOR  go to state 138


State 172

  122 COUT: T_IO_COUT T_IO_INSERTION INSERTION_LIST .

    $default  reduce using rule 122 (COUT)


State 173

  126 EXTRACTION_LIST: T_IDENTIFIER . T_IO_EXTRACTION EXTRACTION_LIST
  127                | T_IDENTIFIER .

    T_IO_EXTRACTION  shift, and go to state 205

    $default  reduce using rule 127 (EXTRACTION_LIST)


State 174

  125 CIN: T_IO_CIN T_IO_EXTRACTION EXTRACTION_LIST .

    $default  reduce using rule 125 (CIN)


State 175

   81 EXPRESSION_F: '(' EXPRESSION ')' .

    $default  reduce using rule 81 (EXPRESSION_F)


State 176

   32 SINGLE_LINE_IF: IF_PREFIX LINE_STATEMENT ';' .

    $default  reduce using rule 32 (SINGLE_LINE_IF)


State 177

   37 SINGLE_LINE_ELSE: ELSE_PREFIX LINE_STATEMENT ';' .

    $default  reduce using rule 37 (SINGLE_LINE_ELSE)


State 178

   42 SINGLE_LINE_FOR: FOR_PREFIX FOR_INIT_STATEMENT ';' . FOR_CONDITION_STATEMENT ';' FOR_ACTION_STATEMENT ')' LINE_STATEMENT ';'
   43                | FOR_PREFIX FOR_INIT_STATEMENT ';' . FOR_CONDITION_STATEMENT ';' FOR_ACTION_STATEMENT ')' ';'
   44                | FOR_PREFIX FOR_INIT_STATEMENT ';' . FOR_CONDITION_STATEMENT ';' FOR_ACTION_STATEMENT ')' CONSTRUCT
   45 BLOCK_FOR: FOR_PREFIX FOR_INIT_STATEMENT ';' . FOR_CONDITION_STATEMENT ';' FOR_ACTION_STATEMENT ')' '{' STATEMENTS '}'

    T_IDENTIFIER      shift, and go to state 32
    T_CHAR_LITERAL    shift, and go to state 33
    T_STRING_LITERAL  shift, and go to state 34
    T_NUMBER_LITERAL  shift, and go to state 35
    T_BOOL_LITERAL    shift, and go to state 36
    '!'               shift, and go to state 40
    '+'               shift, and go to state 41
    '-'               shift, and go to state 42
    T_OP_INCREMENT    shift, and go to state 43
    T_OP_DECREMENT    shift, and go to state 44
    '('               shift, and go to state 50

    $default  reduce using rule 49 (FOR_CONDITION_STATEMENT)

    FOR_CONDITION_STATEMENT  go to state 206
    CONDITIONAL_EXPRESSION   go to state 207
    ASSIGNMENT               go to state 65
    EXPRESSION               go to state 208
    EXPRESSION_GRAMMAR       go to state 67
    EXPRESSION_TERM          go to state 68
    EXPRESSION_F             go to state 69
    IDENTIFIER_OR_LITERAL    go to state 81
    UNARY_OPERATOR           go to state 82


State 179

   58 CONDITIONAL_EXPRESSION: EXPRESSION BITWISE_OPERATOR EXPRESSION_GRAMMAR .
   72 EXPRESSION_GRAMMAR: EXPRESSION_GRAMMAR . '+' EXPRESSION_TERM
   73                   | EXPRESSION_GRAMMAR . '-' EXPRESSION_TERM

    '+'  shift, and go to state 139
    '-'  shift, and go to state 140

    $default  reduce using rule 58 (CONDITIONAL_EXPRESSION)


State 180

   56 CONDITIONAL_EXPRESSION: EXPRESSION LOGICAL_OPERATOR EXPRESSION_GRAMMAR .
   72 EXPRESSION_GRAMMAR: EXPRESSION_GRAMMAR . '+' EXPRESSION_TERM
   73                   | EXPRESSION_GRAMMAR . '-' EXPRESSION_TERM

    '+'  shift, and go to state 139
    '-'  shift, and go to state 140

    $default  reduce using rule 56 (CONDITIONAL_EXPRESSION)


State 181

   57 CONDITIONAL_EXPRESSION: EXPRESSION RELATIONAL_OPERATOR EXPRESSION_GRAMMAR .
   72 EXPRESSION_GRAMMAR: EXPRESSION_GRAMMAR . '+' EXPRESSION_TERM
   73                   | EXPRESSION_GRAMMAR . '-' EXPRESSION_TERM

    '+'  shift, and go to state 139
    '-'  shift, and go to state 140

    $default  reduce using rule 57 (CONDITIONAL_EXPRESSION)


State 182

   72 EXPRESSION_GRAMMAR: EXPRESSION_GRAMMAR '+' EXPRESSION_TERM .
   75 EXPRESSION_TERM: EXPRESSION_TERM . '*' EXPRESSION_F
   76                | EXPRESSION_TERM . '/' EXPRESSION_F
   77                | EXPRESSION_TERM . '%' EXPRESSION_F

    '*'  shift, and go to state 141
    '/'  shift, and go to state 142
    '%'  shift, and go to state 143

    $default  reduce using rule 72 (EXPRESSION_GRAMMAR)


State 183

   73 EXPRESSION_GRAMMAR: EXPRESSION_GRAMMAR '-' EXPRESSION_TERM .
   75 EXPRESSION_TERM: EXPRESSION_TERM . '*' EXPRESSION_F
   76                | EXPRESSION_TERM . '/' EXPRESSION_F
   77                | EXPRESSION_TERM . '%' EXPRESSION_F

    '*'  shift, and go to state 141
    '/'  shift, and go to state 142
    '%'  shift, and go to state 143

    $default  reduce using rule 73 (EXPRESSION_GRAMMAR)


State 184

   75 EXPRESSION_TERM: EXPRESSION_TERM '*' EXPRESSION_F .

    $default  reduce using rule 75 (EXPRESSION_TERM)


State 185

   76 EXPRESSION_TERM: EXPRESSION_TERM '/' EXPRESSION_F .

    $default  reduce using rule 76 (EXPRESSION_TERM)


State 186

   77 EXPRESSION_TERM: EXPRESSION_TERM '%' EXPRESSION_F .

    $default  reduce using rule 77 (EXPRESSION_TERM)


State 187

  116 ARRAY_VARIABLE_DECLARATION_IDENTIFIER: T_IDENTIFIER '[' . ']'
  117                                      | T_IDENTIFIER '[' . EXPRESSION ']'
  118 ARRAY_VARIABLE_DECLARATION_IDENTIFIER_WITH_SIZE: T_IDENTIFIER '[' . EXPRESSION ']'

    T_IDENTIFIER      shift, and go to state 32
    T_CHAR_LITERAL    shift, and go to state 33
    T_STRING_LITERAL  shift, and go to state 34
    T_NUMBER_LITERAL  shift, and go to state 35
    T_BOOL_LITERAL    shift, and go to state 36
    '!'               shift, and go to state 40
    '+'               shift, and go to state 41
    '-'               shift, and go to state 42
    T_OP_INCREMENT    shift, and go to state 43
    T_OP_DECREMENT    shift, and go to state 44
    '('               shift, and go to state 50
    ']'               shift, and go to state 209

    CONDITIONAL_EXPRESSION  go to state 64
    ASSIGNMENT              go to state 65
    EXPRESSION              go to state 210
    EXPRESSION_GRAMMAR      go to state 67
    EXPRESSION_TERM         go to state 68
    EXPRESSION_F            go to state 69
    IDENTIFIER_OR_LITERAL   go to state 81
    UNARY_OPERATOR          go to state 82


State 188

  108 VARIABLE_LIST: VARIABLE_DECLARATION_IDENTIFIER '=' . EXPRESSION ',' VARIABLE_LIST
  110              | VARIABLE_DECLARATION_IDENTIFIER '=' . EXPRESSION

    T_IDENTIFIER      shift, and go to state 32
    T_CHAR_LITERAL    shift, and go to state 33
    T_STRING_LITERAL  shift, and go to state 34
    T_NUMBER_LITERAL  shift, and go to state 35
    T_BOOL_LITERAL    shift, and go to state 36
    '!'               shift, and go to state 40
    '+'               shift, and go to state 41
    '-'               shift, and go to state 42
    T_OP_INCREMENT    shift, and go to state 43
    T_OP_DECREMENT    shift, and go to state 44
    '('               shift, and go to state 50

    CONDITIONAL_EXPRESSION  go to state 64
    ASSIGNMENT              go to state 65
    EXPRESSION              go to state 211
    EXPRESSION_GRAMMAR      go to state 67
    EXPRESSION_TERM         go to state 68
    EXPRESSION_F            go to state 69
    IDENTIFIER_OR_LITERAL   go to state 81
    UNARY_OPERATOR          go to state 82


State 189

  107 VARIABLE_LIST: VARIABLE_DECLARATION_IDENTIFIER ',' . VARIABLE_LIST

    T_IDENTIFIER  shift, and go to state 146

    VARIABLE_LIST                                    go to state 212
    VARIABLE_DECLARATION_IDENTIFIER                  go to state 148
    ARRAY_VARIABLE_DECLARATION_IDENTIFIER            go to state 149
    ARRAY_VARIABLE_DECLARATION_IDENTIFIER_WITH_SIZE  go to state 150


State 190

  112 VARIABLE_LIST: ARRAY_VARIABLE_DECLARATION_IDENTIFIER '=' . ARRAY_LIST ',' VARIABLE_LIST
  114              | ARRAY_VARIABLE_DECLARATION_IDENTIFIER '=' . ARRAY_LIST

    '{'  shift, and go to state 213

    ARRAY_LIST  go to state 214


State 191

  111 VARIABLE_LIST: ARRAY_VARIABLE_DECLARATION_IDENTIFIER_WITH_SIZE ',' . VARIABLE_LIST

    T_IDENTIFIER  shift, and go to state 146

    VARIABLE_LIST                                    go to state 215
    VARIABLE_DECLARATION_IDENTIFIER                  go to state 148
    ARRAY_VARIABLE_DECLARATION_IDENTIFIER            go to state 149
    ARRAY_VARIABLE_DECLARATION_IDENTIFIER_WITH_SIZE  go to state 150


State 192

  143 IDENTIFIER_OR_LITERAL: UNARY_OPERATOR T_IDENTIFIER '[' . EXPRESSION ']'

    T_IDENTIFIER      shift, and go to state 32
    T_CHAR_LITERAL    shift, and go to state 33
    T_STRING_LITERAL  shift, and go to state 34
    T_NUMBER_LITERAL  shift, and go to state 35
    T_BOOL_LITERAL    shift, and go to state 36
    '!'               shift, and go to state 40
    '+'               shift, and go to state 41
    '-'               shift, and go to state 42
    T_OP_INCREMENT    shift, and go to state 43
    T_OP_DECREMENT    shift, and go to state 44
    '('               shift, and go to state 50

    CONDITIONAL_EXPRESSION  go to state 64
    ASSIGNMENT              go to state 65
    EXPRESSION              go to state 216
    EXPRESSION_GRAMMAR      go to state 67
    EXPRESSION_TERM         go to state 68
    EXPRESSION_F            go to state 69
    IDENTIFIER_OR_LITERAL   go to state 81
    UNARY_OPERATOR          go to state 82


State 193

    4 INCLUDE: INCLUDE T_HEADER_INCLUDE '<' T_HEADER_FILE '>' .

    $default  reduce using rule 4 (INCLUDE)


State 194

   21 FUNCTION_DECLARATION: FUNCTION_PREFIX ')' '{' STATEMENTS '}' .

    $default  reduce using rule 21 (FUNCTION_DECLARATION)


State 195

   20 FUNCTION_DECLARATION: FUNCTION_PREFIX FUNCTION_PARAMETER_LIST ')' '{' STATEMENTS . '}'

    '}'  shift, and go to state 217


State 196

   23 FUNCTION_PARAMETER_LIST: TYPE T_IDENTIFIER '=' EXPRESSION . ',' FUNCTION_PARAMETER_LIST
   25                        | TYPE T_IDENTIFIER '=' EXPRESSION .
   56 CONDITIONAL_EXPRESSION: EXPRESSION . LOGICAL_OPERATOR EXPRESSION_GRAMMAR
   57                       | EXPRESSION . RELATIONAL_OPERATOR EXPRESSION_GRAMMAR
   58                       | EXPRESSION . BITWISE_OPERATOR EXPRESSION_GRAMMAR

    '>'                          shift, and go to state 125
    '<'                          shift, and go to state 126
    T_REL_OP_GREATER_THAN_EQUAL  shift, and go to state 127
    T_REL_OP_LESS_THAN_EQUAL     shift, and go to state 128
    T_REL_OP_EQUAL               shift, and go to state 129
    T_REL_OP_NOT_EQUAL           shift, and go to state 130
    T_LOG_OP_OR                  shift, and go to state 131
    T_LOG_OP_AND                 shift, and go to state 132
    '&'                          shift, and go to state 133
    '|'                          shift, and go to state 134
    '^'                          shift, and go to state 135
    ','                          shift, and go to state 218

    $default  reduce using rule 25 (FUNCTION_PARAMETER_LIST)

    BITWISE_OPERATOR     go to state 136
    LOGICAL_OPERATOR     go to state 137
    RELATIONAL_OPERATOR  go to state 138


State 197

   22 FUNCTION_PARAMETER_LIST: TYPE T_IDENTIFIER ',' FUNCTION_PARAMETER_LIST .

    $default  reduce using rule 22 (FUNCTION_PARAMETER_LIST)


State 198

   22 FUNCTION_PARAMETER_LIST: TYPE . T_IDENTIFIER ',' FUNCTION_PARAMETER_LIST
   23                        | TYPE . T_IDENTIFIER '=' EXPRESSION ',' FUNCTION_PARAMETER_LIST
   24                        | TYPE . T_IDENTIFIER
   25                        | TYPE . T_IDENTIFIER '=' EXPRESSION

    T_IDENTIFIER  shift, and go to state 92


State 199

  139 IDENTIFIER_OR_LITERAL: T_IDENTIFIER '(' LITERAL_LIST ')' .

    $default  reduce using rule 139 (IDENTIFIER_OR_LITERAL)


State 200

  120 LITERAL_LIST: IDENTIFIER_OR_LITERAL ',' . LITERAL_LIST

    T_IDENTIFIER      shift, and go to state 107
    T_CHAR_LITERAL    shift, and go to state 33
    T_STRING_LITERAL  shift, and go to state 34
    T_NUMBER_LITERAL  shift, and go to state 35
    T_BOOL_LITERAL    shift, and go to state 36
    T_OP_INCREMENT    shift, and go to state 43
    T_OP_DECREMENT    shift, and go to state 44

    LITERAL_LIST           go to state 219
    IDENTIFIER_OR_LITERAL  go to state 165
    UNARY_OPERATOR         go to state 82


State 201

   61 ASSIGNMENT: T_IDENTIFIER '[' EXPRESSION ']' . ASSIGNMENT_OPERATOR EXPRESSION_GRAMMAR
   62           | T_IDENTIFIER '[' EXPRESSION ']' . ASSIGNMENT_OPERATOR ASSIGNMENT
  142 IDENTIFIER_OR_LITERAL: T_IDENTIFIER '[' EXPRESSION ']' .
  144                      | T_IDENTIFIER '[' EXPRESSION ']' . UNARY_OPERATOR

    '='                       shift, and go to state 94
    T_OP_ADD_ASSIGNMENT       shift, and go to state 95
    T_OP_SUBTRACT_ASSIGNMENT  shift, and go to state 96
    T_OP_MULTIPLY_ASSIGNMENT  shift, and go to state 97
    T_OP_DIVIDE_ASSIGNMENT    shift, and go to state 98
    T_OP_MOD_ASSIGNMENT       shift, and go to state 99
    T_OP_INCREMENT            shift, and go to state 43
    T_OP_DECREMENT            shift, and go to state 44

    $default  reduce using rule 142 (IDENTIFIER_OR_LITERAL)

    ASSIGNMENT_OPERATOR  go to state 220
    UNARY_OPERATOR       go to state 221


State 202

   35 BLOCK_IF: T_CONSTRUCT_IF '(' EXPRESSION ')' . BLOCK
   36 IF_PREFIX: T_CONSTRUCT_IF '(' EXPRESSION ')' .

    '{'  shift, and go to state 8

    $default  reduce using rule 36 (IF_PREFIX)

    BLOCK        go to state 222
    BLOCK_START  go to state 20


State 203

   56 CONDITIONAL_EXPRESSION: EXPRESSION . LOGICAL_OPERATOR EXPRESSION_GRAMMAR
   57                       | EXPRESSION . RELATIONAL_OPERATOR EXPRESSION_GRAMMAR
   58                       | EXPRESSION . BITWISE_OPERATOR EXPRESSION_GRAMMAR
  142 IDENTIFIER_OR_LITERAL: T_IDENTIFIER '[' EXPRESSION . ']'
  144                      | T_IDENTIFIER '[' EXPRESSION . ']' UNARY_OPERATOR

    '>'                          shift, and go to state 125
    '<'                          shift, and go to state 126
    T_REL_OP_GREATER_THAN_EQUAL  shift, and go to state 127
    T_REL_OP_LESS_THAN_EQUAL     shift, and go to state 128
    T_REL_OP_EQUAL               shift, and go to state 129
    T_REL_OP_NOT_EQUAL           shift, and go to state 130
    T_LOG_OP_OR                  shift, and go to state 131
    T_LOG_OP_AND                 shift, and go to state 132
    '&'                          shift, and go to state 133
    '|'                          shift, and go to state 134
    '^'                          shift, and go to state 135
    ']'                          shift, and go to state 223

    BITWISE_OPERATOR     go to state 136
    LOGICAL_OPERATOR     go to state 137
    RELATIONAL_OPERATOR  go to state 138


State 204

  123 INSERTION_LIST: EXPRESSION T_IO_INSERTION . INSERTION_LIST

    T_IDENTIFIER      shift, and go to state 32
    T_CHAR_LITERAL    shift, and go to state 33
    T_STRING_LITERAL  shift, and go to state 34
    T_NUMBER_LITERAL  shift, and go to state 35
    T_BOOL_LITERAL    shift, and go to state 36
    '!'               shift, and go to state 40
    '+'               shift, and go to state 41
    '-'               shift, and go to state 42
    T_OP_INCREMENT    shift, and go to state 43
    T_OP_DECREMENT    shift, and go to state 44
    '('               shift, and go to state 50

    CONDITIONAL_EXPRESSION  go to state 64
    ASSIGNMENT              go to state 65
    EXPRESSION              go to state 171
    EXPRESSION_GRAMMAR      go to state 67
    EXPRESSION_TERM         go to state 68
    EXPRESSION_F            go to state 69
    INSERTION_LIST          go to state 224
    IDENTIFIER_OR_LITERAL   go to state 81
    UNARY_OPERATOR          go to state 82


State 205

  126 EXTRACTION_LIST: T_IDENTIFIER T_IO_EXTRACTION . EXTRACTION_LIST

    T_IDENTIFIER  shift, and go to state 173

    EXTRACTION_LIST  go to state 225


State 206

   42 SINGLE_LINE_FOR: FOR_PREFIX FOR_INIT_STATEMENT ';' FOR_CONDITION_STATEMENT . ';' FOR_ACTION_STATEMENT ')' LINE_STATEMENT ';'
   43                | FOR_PREFIX FOR_INIT_STATEMENT ';' FOR_CONDITION_STATEMENT . ';' FOR_ACTION_STATEMENT ')' ';'
   44                | FOR_PREFIX FOR_INIT_STATEMENT ';' FOR_CONDITION_STATEMENT . ';' FOR_ACTION_STATEMENT ')' CONSTRUCT
   45 BLOCK_FOR: FOR_PREFIX FOR_INIT_STATEMENT ';' FOR_CONDITION_STATEMENT . ';' FOR_ACTION_STATEMENT ')' '{' STATEMENTS '}'

    ';'  shift, and go to state 226


State 207

   50 FOR_CONDITION_STATEMENT: CONDITIONAL_EXPRESSION .
   70 EXPRESSION: CONDITIONAL_EXPRESSION .

    ';'       reduce using rule 50 (FOR_CONDITION_STATEMENT)
    $default  reduce using rule 70 (EXPRESSION)


State 208

   56 CONDITIONAL_EXPRESSION: EXPRESSION . LOGICAL_OPERATOR EXPRESSION_GRAMMAR
   57                       | EXPRESSION . RELATIONAL_OPERATOR EXPRESSION_GRAMMAR
   58                       | EXPRESSION . BITWISE_OPERATOR EXPRESSION_GRAMMAR

    '>'                          shift, and go to state 125
    '<'                          shift, and go to state 126
    T_REL_OP_GREATER_THAN_EQUAL  shift, and go to state 127
    T_REL_OP_LESS_THAN_EQUAL     shift, and go to state 128
    T_REL_OP_EQUAL               shift, and go to state 129
    T_REL_OP_NOT_EQUAL           shift, and go to state 130
    T_LOG_OP_OR                  shift, and go to state 131
    T_LOG_OP_AND                 shift, and go to state 132
    '&'                          shift, and go to state 133
    '|'                          shift, and go to state 134
    '^'                          shift, and go to state 135

    BITWISE_OPERATOR     go to state 136
    LOGICAL_OPERATOR     go to state 137
    RELATIONAL_OPERATOR  go to state 138


State 209

  116 ARRAY_VARIABLE_DECLARATION_IDENTIFIER: T_IDENTIFIER '[' ']' .

    $default  reduce using rule 116 (ARRAY_VARIABLE_DECLARATION_IDENTIFIER)


State 210

   56 CONDITIONAL_EXPRESSION: EXPRESSION . LOGICAL_OPERATOR EXPRESSION_GRAMMAR
   57                       | EXPRESSION . RELATIONAL_OPERATOR EXPRESSION_GRAMMAR
   58                       | EXPRESSION . BITWISE_OPERATOR EXPRESSION_GRAMMAR
  117 ARRAY_VARIABLE_DECLARATION_IDENTIFIER: T_IDENTIFIER '[' EXPRESSION . ']'
  118 ARRAY_VARIABLE_DECLARATION_IDENTIFIER_WITH_SIZE: T_IDENTIFIER '[' EXPRESSION . ']'

    '>'                          shift, and go to state 125
    '<'                          shift, and go to state 126
    T_REL_OP_GREATER_THAN_EQUAL  shift, and go to state 127
    T_REL_OP_LESS_THAN_EQUAL     shift, and go to state 128
    T_REL_OP_EQUAL               shift, and go to state 129
    T_REL_OP_NOT_EQUAL           shift, and go to state 130
    T_LOG_OP_OR                  shift, and go to state 131
    T_LOG_OP_AND                 shift, and go to state 132
    '&'                          shift, and go to state 133
    '|'                          shift, and go to state 134
    '^'                          shift, and go to state 135
    ']'                          shift, and go to state 227

    BITWISE_OPERATOR     go to state 136
    LOGICAL_OPERATOR     go to state 137
    RELATIONAL_OPERATOR  go to state 138


State 211

   56 CONDITIONAL_EXPRESSION: EXPRESSION . LOGICAL_OPERATOR EXPRESSION_GRAMMAR
   57                       | EXPRESSION . RELATIONAL_OPERATOR EXPRESSION_GRAMMAR
   58                       | EXPRESSION . BITWISE_OPERATOR EXPRESSION_GRAMMAR
  108 VARIABLE_LIST: VARIABLE_DECLARATION_IDENTIFIER '=' EXPRESSION . ',' VARIABLE_LIST
  110              | VARIABLE_DECLARATION_IDENTIFIER '=' EXPRESSION .

    '>'                          shift, and go to state 125
    '<'                          shift, and go to state 126
    T_REL_OP_GREATER_THAN_EQUAL  shift, and go to state 127
    T_REL_OP_LESS_THAN_EQUAL     shift, and go to state 128
    T_REL_OP_EQUAL               shift, and go to state 129
    T_REL_OP_NOT_EQUAL           shift, and go to state 130
    T_LOG_OP_OR                  shift, and go to state 131
    T_LOG_OP_AND                 shift, and go to state 132
    '&'                          shift, and go to state 133
    '|'                          shift, and go to state 134
    '^'                          shift, and go to state 135
    ','                          shift, and go to state 228

    $default  reduce using rule 110 (VARIABLE_LIST)

    BITWISE_OPERATOR     go to state 136
    LOGICAL_OPERATOR     go to state 137
    RELATIONAL_OPERATOR  go to state 138


State 212

  107 VARIABLE_LIST: VARIABLE_DECLARATION_IDENTIFIER ',' VARIABLE_LIST .

    $default  reduce using rule 107 (VARIABLE_LIST)


State 213

  119 ARRAY_LIST: '{' . LITERAL_LIST '}'

    T_IDENTIFIER      shift, and go to state 107
    T_CHAR_LITERAL    shift, and go to state 33
    T_STRING_LITERAL  shift, and go to state 34
    T_NUMBER_LITERAL  shift, and go to state 35
    T_BOOL_LITERAL    shift, and go to state 36
    T_OP_INCREMENT    shift, and go to state 43
    T_OP_DECREMENT    shift, and go to state 44

    LITERAL_LIST           go to state 229
    IDENTIFIER_OR_LITERAL  go to state 165
    UNARY_OPERATOR         go to state 82


State 214

  112 VARIABLE_LIST: ARRAY_VARIABLE_DECLARATION_IDENTIFIER '=' ARRAY_LIST . ',' VARIABLE_LIST
  114              | ARRAY_VARIABLE_DECLARATION_IDENTIFIER '=' ARRAY_LIST .

    ','  shift, and go to state 230

    $default  reduce using rule 114 (VARIABLE_LIST)


State 215

  111 VARIABLE_LIST: ARRAY_VARIABLE_DECLARATION_IDENTIFIER_WITH_SIZE ',' VARIABLE_LIST .

    $default  reduce using rule 111 (VARIABLE_LIST)


State 216

   56 CONDITIONAL_EXPRESSION: EXPRESSION . LOGICAL_OPERATOR EXPRESSION_GRAMMAR
   57                       | EXPRESSION . RELATIONAL_OPERATOR EXPRESSION_GRAMMAR
   58                       | EXPRESSION . BITWISE_OPERATOR EXPRESSION_GRAMMAR
  143 IDENTIFIER_OR_LITERAL: UNARY_OPERATOR T_IDENTIFIER '[' EXPRESSION . ']'

    '>'                          shift, and go to state 125
    '<'                          shift, and go to state 126
    T_REL_OP_GREATER_THAN_EQUAL  shift, and go to state 127
    T_REL_OP_LESS_THAN_EQUAL     shift, and go to state 128
    T_REL_OP_EQUAL               shift, and go to state 129
    T_REL_OP_NOT_EQUAL           shift, and go to state 130
    T_LOG_OP_OR                  shift, and go to state 131
    T_LOG_OP_AND                 shift, and go to state 132
    '&'                          shift, and go to state 133
    '|'                          shift, and go to state 134
    '^'                          shift, and go to state 135
    ']'                          shift, and go to state 231

    BITWISE_OPERATOR     go to state 136
    LOGICAL_OPERATOR     go to state 137
    RELATIONAL_OPERATOR  go to state 138


State 217

   20 FUNCTION_DECLARATION: FUNCTION_PREFIX FUNCTION_PARAMETER_LIST ')' '{' STATEMENTS '}' .

    $default  reduce using rule 20 (FUNCTION_DECLARATION)


State 218

   23 FUNCTION_PARAMETER_LIST: TYPE T_IDENTIFIER '=' EXPRESSION ',' . FUNCTION_PARAMETER_LIST

    T_TYPE_INT     shift, and go to state 1
    T_TYPE_FLOAT   shift, and go to state 2
    T_TYPE_DOUBLE  shift, and go to state 3
    T_TYPE_BOOL    shift, and go to state 4
    T_TYPE_STRING  shift, and go to state 5
    T_TYPE_CHAR    shift, and go to state 6
    T_TYPE_VOID    shift, and go to state 7

    FUNCTION_PARAMETER_LIST  go to state 232
    TYPE                     go to state 198


State 219

  120 LITERAL_LIST: IDENTIFIER_OR_LITERAL ',' LITERAL_LIST .

    $default  reduce using rule 120 (LITERAL_LIST)


State 220

   61 ASSIGNMENT: T_IDENTIFIER '[' EXPRESSION ']' ASSIGNMENT_OPERATOR . EXPRESSION_GRAMMAR
   62           | T_IDENTIFIER '[' EXPRESSION ']' ASSIGNMENT_OPERATOR . ASSIGNMENT

    T_IDENTIFIER      shift, and go to state 32
    T_CHAR_LITERAL    shift, and go to state 33
    T_STRING_LITERAL  shift, and go to state 34
    T_NUMBER_LITERAL  shift, and go to state 35
    T_BOOL_LITERAL    shift, and go to state 36
    '!'               shift, and go to state 40
    '+'               shift, and go to state 41
    '-'               shift, and go to state 42
    T_OP_INCREMENT    shift, and go to state 43
    T_OP_DECREMENT    shift, and go to state 44
    '('               shift, and go to state 50

    ASSIGNMENT             go to state 233
    EXPRESSION_GRAMMAR     go to state 234
    EXPRESSION_TERM        go to state 68
    EXPRESSION_F           go to state 69
    IDENTIFIER_OR_LITERAL  go to state 81
    UNARY_OPERATOR         go to state 82


State 221

  144 IDENTIFIER_OR_LITERAL: T_IDENTIFIER '[' EXPRESSION ']' UNARY_OPERATOR .

    $default  reduce using rule 144 (IDENTIFIER_OR_LITERAL)


State 222

   35 BLOCK_IF: T_CONSTRUCT_IF '(' EXPRESSION ')' BLOCK .

    $default  reduce using rule 35 (BLOCK_IF)


State 223

  142 IDENTIFIER_OR_LITERAL: T_IDENTIFIER '[' EXPRESSION ']' .
  144                      | T_IDENTIFIER '[' EXPRESSION ']' . UNARY_OPERATOR

    T_OP_INCREMENT  shift, and go to state 43
    T_OP_DECREMENT  shift, and go to state 44

    $default  reduce using rule 142 (IDENTIFIER_OR_LITERAL)

    UNARY_OPERATOR  go to state 221


State 224

  123 INSERTION_LIST: EXPRESSION T_IO_INSERTION INSERTION_LIST .

    $default  reduce using rule 123 (INSERTION_LIST)


State 225

  126 EXTRACTION_LIST: T_IDENTIFIER T_IO_EXTRACTION EXTRACTION_LIST .

    $default  reduce using rule 126 (EXTRACTION_LIST)


State 226

   42 SINGLE_LINE_FOR: FOR_PREFIX FOR_INIT_STATEMENT ';' FOR_CONDITION_STATEMENT ';' . FOR_ACTION_STATEMENT ')' LINE_STATEMENT ';'
   43                | FOR_PREFIX FOR_INIT_STATEMENT ';' FOR_CONDITION_STATEMENT ';' . FOR_ACTION_STATEMENT ')' ';'
   44                | FOR_PREFIX FOR_INIT_STATEMENT ';' FOR_CONDITION_STATEMENT ';' . FOR_ACTION_STATEMENT ')' CONSTRUCT
   45 BLOCK_FOR: FOR_PREFIX FOR_INIT_STATEMENT ';' FOR_CONDITION_STATEMENT ';' . FOR_ACTION_STATEMENT ')' '{' STATEMENTS '}'

    T_TYPE_INT        shift, and go to state 1
    T_TYPE_FLOAT      shift, and go to state 2
    T_TYPE_DOUBLE     shift, and go to state 3
    T_TYPE_BOOL       shift, and go to state 4
    T_TYPE_STRING     shift, and go to state 5
    T_TYPE_CHAR       shift, and go to state 6
    T_TYPE_VOID       shift, and go to state 7
    T_IDENTIFIER      shift, and go to state 32
    T_CHAR_LITERAL    shift, and go to state 33
    T_STRING_LITERAL  shift, and go to state 34
    T_NUMBER_LITERAL  shift, and go to state 35
    T_BOOL_LITERAL    shift, and go to state 36
    '!'               shift, and go to state 40
    '+'               shift, and go to state 41
    '-'               shift, and go to state 42
    T_OP_INCREMENT    shift, and go to state 43
    T_OP_DECREMENT    shift, and go to state 44
    T_IO_COUT         shift, and go to state 45
    T_IO_CIN          shift, and go to state 46
    T_JUMP_BREAK      shift, and go to state 47
    T_JUMP_EXIT       shift, and go to state 48
    T_JUMP_CONTINUE   shift, and go to state 49
    '('               shift, and go to state 50
    T_RETURN          shift, and go to state 52

    $default  reduce using rule 51 (FOR_ACTION_STATEMENT)

    FOR_ACTION_STATEMENT       go to state 235
    CONDITIONAL_EXPRESSION     go to state 64
    ASSIGNMENT                 go to state 65
    EXPRESSION                 go to state 66
    EXPRESSION_GRAMMAR         go to state 67
    EXPRESSION_TERM            go to state 68
    EXPRESSION_F               go to state 69
    JUMP_STATEMENT             go to state 74
    LINE_STATEMENT             go to state 236
    VARIABLE_DECLARATION       go to state 76
    VARIABLE_DECLARATION_TYPE  go to state 77
    COUT                       go to state 78
    CIN                        go to state 79
    RETURN                     go to state 80
    IDENTIFIER_OR_LITERAL      go to state 81
    UNARY_OPERATOR             go to state 82
    TYPE                       go to state 83


State 227

  117 ARRAY_VARIABLE_DECLARATION_IDENTIFIER: T_IDENTIFIER '[' EXPRESSION ']' .
  118 ARRAY_VARIABLE_DECLARATION_IDENTIFIER_WITH_SIZE: T_IDENTIFIER '[' EXPRESSION ']' .

    '='       reduce using rule 117 (ARRAY_VARIABLE_DECLARATION_IDENTIFIER)
    $default  reduce using rule 118 (ARRAY_VARIABLE_DECLARATION_IDENTIFIER_WITH_SIZE)


State 228

  108 VARIABLE_LIST: VARIABLE_DECLARATION_IDENTIFIER '=' EXPRESSION ',' . VARIABLE_LIST

    T_IDENTIFIER  shift, and go to state 146

    VARIABLE_LIST                                    go to state 237
    VARIABLE_DECLARATION_IDENTIFIER                  go to state 148
    ARRAY_VARIABLE_DECLARATION_IDENTIFIER            go to state 149
    ARRAY_VARIABLE_DECLARATION_IDENTIFIER_WITH_SIZE  go to state 150


State 229

  119 ARRAY_LIST: '{' LITERAL_LIST . '}'

    '}'  shift, and go to state 238


State 230

  112 VARIABLE_LIST: ARRAY_VARIABLE_DECLARATION_IDENTIFIER '=' ARRAY_LIST ',' . VARIABLE_LIST

    T_IDENTIFIER  shift, and go to state 146

    VARIABLE_LIST                                    go to state 239
    VARIABLE_DECLARATION_IDENTIFIER                  go to state 148
    ARRAY_VARIABLE_DECLARATION_IDENTIFIER            go to state 149
    ARRAY_VARIABLE_DECLARATION_IDENTIFIER_WITH_SIZE  go to state 150


State 231

  143 IDENTIFIER_OR_LITERAL: UNARY_OPERATOR T_IDENTIFIER '[' EXPRESSION ']' .

    $default  reduce using rule 143 (IDENTIFIER_OR_LITERAL)


State 232

   23 FUNCTION_PARAMETER_LIST: TYPE T_IDENTIFIER '=' EXPRESSION ',' FUNCTION_PARAMETER_LIST .

    $default  reduce using rule 23 (FUNCTION_PARAMETER_LIST)


State 233

   62 ASSIGNMENT: T_IDENTIFIER '[' EXPRESSION ']' ASSIGNMENT_OPERATOR ASSIGNMENT .

    $default  reduce using rule 62 (ASSIGNMENT)


State 234

   61 ASSIGNMENT: T_IDENTIFIER '[' EXPRESSION ']' ASSIGNMENT_OPERATOR EXPRESSION_GRAMMAR .
   72 EXPRESSION_GRAMMAR: EXPRESSION_GRAMMAR . '+' EXPRESSION_TERM
   73                   | EXPRESSION_GRAMMAR . '-' EXPRESSION_TERM

    '+'  shift, and go to state 139
    '-'  shift, and go to state 140

    $default  reduce using rule 61 (ASSIGNMENT)


State 235

   42 SINGLE_LINE_FOR: FOR_PREFIX FOR_INIT_STATEMENT ';' FOR_CONDITION_STATEMENT ';' FOR_ACTION_STATEMENT . ')' LINE_STATEMENT ';'
   43                | FOR_PREFIX FOR_INIT_STATEMENT ';' FOR_CONDITION_STATEMENT ';' FOR_ACTION_STATEMENT . ')' ';'
   44                | FOR_PREFIX FOR_INIT_STATEMENT ';' FOR_CONDITION_STATEMENT ';' FOR_ACTION_STATEMENT . ')' CONSTRUCT
   45 BLOCK_FOR: FOR_PREFIX FOR_INIT_STATEMENT ';' FOR_CONDITION_STATEMENT ';' FOR_ACTION_STATEMENT . ')' '{' STATEMENTS '}'

    ')'  shift, and go to state 240


State 236

   52 FOR_ACTION_STATEMENT: LINE_STATEMENT .

    $default  reduce using rule 52 (FOR_ACTION_STATEMENT)


State 237

  108 VARIABLE_LIST: VARIABLE_DECLARATION_IDENTIFIER '=' EXPRESSION ',' VARIABLE_LIST .

    $default  reduce using rule 108 (VARIABLE_LIST)


State 238

  119 ARRAY_LIST: '{' LITERAL_LIST '}' .

    $default  reduce using rule 119 (ARRAY_LIST)


State 239

  112 VARIABLE_LIST: ARRAY_VARIABLE_DECLARATION_IDENTIFIER '=' ARRAY_LIST ',' VARIABLE_LIST .

    $default  reduce using rule 112 (VARIABLE_LIST)


State 240

   42 SINGLE_LINE_FOR: FOR_PREFIX FOR_INIT_STATEMENT ';' FOR_CONDITION_STATEMENT ';' FOR_ACTION_STATEMENT ')' . LINE_STATEMENT ';'
   43                | FOR_PREFIX FOR_INIT_STATEMENT ';' FOR_CONDITION_STATEMENT ';' FOR_ACTION_STATEMENT ')' . ';'
   44                | FOR_PREFIX FOR_INIT_STATEMENT ';' FOR_CONDITION_STATEMENT ';' FOR_ACTION_STATEMENT ')' . CONSTRUCT
   45 BLOCK_FOR: FOR_PREFIX FOR_INIT_STATEMENT ';' FOR_CONDITION_STATEMENT ';' FOR_ACTION_STATEMENT ')' . '{' STATEMENTS '}'

    T_TYPE_INT        shift, and go to state 1
    T_TYPE_FLOAT      shift, and go to state 2
    T_TYPE_DOUBLE     shift, and go to state 3
    T_TYPE_BOOL       shift, and go to state 4
    T_TYPE_STRING     shift, and go to state 5
    T_TYPE_CHAR       shift, and go to state 6
    T_TYPE_VOID       shift, and go to state 7
    T_IDENTIFIER      shift, and go to state 32
    T_CHAR_LITERAL    shift, and go to state 33
    T_STRING_LITERAL  shift, and go to state 34
    T_NUMBER_LITERAL  shift, and go to state 35
    T_BOOL_LITERAL    shift, and go to state 36
    T_CONSTRUCT_IF    shift, and go to state 37
    T_CONSTRUCT_ELSE  shift, and go to state 38
    T_CONSTRUCT_FOR   shift, and go to state 39
    '{'               shift, and go to state 241
    '!'               shift, and go to state 40
    '+'               shift, and go to state 41
    '-'               shift, and go to state 42
    T_OP_INCREMENT    shift, and go to state 43
    T_OP_DECREMENT    shift, and go to state 44
    T_IO_COUT         shift, and go to state 45
    T_IO_CIN          shift, and go to state 46
    T_JUMP_BREAK      shift, and go to state 47
    T_JUMP_EXIT       shift, and go to state 48
    T_JUMP_CONTINUE   shift, and go to state 49
    '('               shift, and go to state 50
    ';'               shift, and go to state 242
    T_RETURN          shift, and go to state 52

    SINGLE_LINE_IF             go to state 55
    BLOCK_IF                   go to state 56
    IF_PREFIX                  go to state 57
    SINGLE_LINE_ELSE           go to state 58
    BLOCK_ELSE                 go to state 59
    ELSE_PREFIX                go to state 60
    SINGLE_LINE_FOR            go to state 61
    BLOCK_FOR                  go to state 62
    FOR_PREFIX                 go to state 63
    CONDITIONAL_EXPRESSION     go to state 64
    ASSIGNMENT                 go to state 65
    EXPRESSION                 go to state 66
    EXPRESSION_GRAMMAR         go to state 67
    EXPRESSION_TERM            go to state 68
    EXPRESSION_F               go to state 69
    CONSTRUCT                  go to state 243
    BLOCK_CONSTRUCT            go to state 71
    SINGLE_LINE_CONSTRUCT      go to state 72
    JUMP_STATEMENT             go to state 74
    LINE_STATEMENT             go to state 244
    VARIABLE_DECLARATION       go to state 76
    VARIABLE_DECLARATION_TYPE  go to state 77
    COUT                       go to state 78
    CIN                        go to state 79
    RETURN                     go to state 80
    IDENTIFIER_OR_LITERAL      go to state 81
    UNARY_OPERATOR             go to state 82
    TYPE                       go to state 83


State 241

   45 BLOCK_FOR: FOR_PREFIX FOR_INIT_STATEMENT ';' FOR_CONDITION_STATEMENT ';' FOR_ACTION_STATEMENT ')' '{' . STATEMENTS '}'

    T_TYPE_INT        shift, and go to state 1
    T_TYPE_FLOAT      shift, and go to state 2
    T_TYPE_DOUBLE     shift, and go to state 3
    T_TYPE_BOOL       shift, and go to state 4
    T_TYPE_STRING     shift, and go to state 5
    T_TYPE_CHAR       shift, and go to state 6
    T_TYPE_VOID       shift, and go to state 7
    T_IDENTIFIER      shift, and go to state 32
    T_CHAR_LITERAL    shift, and go to state 33
    T_STRING_LITERAL  shift, and go to state 34
    T_NUMBER_LITERAL  shift, and go to state 35
    T_BOOL_LITERAL    shift, and go to state 36
    T_CONSTRUCT_IF    shift, and go to state 37
    T_CONSTRUCT_ELSE  shift, and go to state 38
    T_CONSTRUCT_FOR   shift, and go to state 39
    '{'               shift, and go to state 8
    '!'               shift, and go to state 40
    '+'               shift, and go to state 41
    '-'               shift, and go to state 42
    T_OP_INCREMENT    shift, and go to state 43
    T_OP_DECREMENT    shift, and go to state 44
    T_IO_COUT         shift, and go to state 45
    T_IO_CIN          shift, and go to state 46
    T_JUMP_BREAK      shift, and go to state 47
    T_JUMP_EXIT       shift, and go to state 48
    T_JUMP_CONTINUE   shift, and go to state 49
    '('               shift, and go to state 50
    ';'               shift, and go to state 51
    T_RETURN          shift, and go to state 52

    BLOCK                      go to state 53
    BLOCK_START                go to state 20
    STATEMENTS                 go to state 245
    SINGLE_LINE_IF             go to state 55
    BLOCK_IF                   go to state 56
    IF_PREFIX                  go to state 57
    SINGLE_LINE_ELSE           go to state 58
    BLOCK_ELSE                 go to state 59
    ELSE_PREFIX                go to state 60
    SINGLE_LINE_FOR            go to state 61
    BLOCK_FOR                  go to state 62
    FOR_PREFIX                 go to state 63
    CONDITIONAL_EXPRESSION     go to state 64
    ASSIGNMENT                 go to state 65
    EXPRESSION                 go to state 66
    EXPRESSION_GRAMMAR         go to state 67
    EXPRESSION_TERM            go to state 68
    EXPRESSION_F               go to state 69
    CONSTRUCT                  go to state 70
    BLOCK_CONSTRUCT            go to state 71
    SINGLE_LINE_CONSTRUCT      go to state 72
    STATEMENT                  go to state 73
    JUMP_STATEMENT             go to state 74
    LINE_STATEMENT             go to state 75
    VARIABLE_DECLARATION       go to state 76
    VARIABLE_DECLARATION_TYPE  go to state 77
    COUT                       go to state 78
    CIN                        go to state 79
    RETURN                     go to state 80
    IDENTIFIER_OR_LITERAL      go to state 81
    UNARY_OPERATOR             go to state 82
    TYPE                       go to state 83


State 242

   43 SINGLE_LINE_FOR: FOR_PREFIX FOR_INIT_STATEMENT ';' FOR_CONDITION_STATEMENT ';' FOR_ACTION_STATEMENT ')' ';' .

    $default  reduce using rule 43 (SINGLE_LINE_FOR)


State 243

   44 SINGLE_LINE_FOR: FOR_PREFIX FOR_INIT_STATEMENT ';' FOR_CONDITION_STATEMENT ';' FOR_ACTION_STATEMENT ')' CONSTRUCT .

    $default  reduce using rule 44 (SINGLE_LINE_FOR)


State 244

   42 SINGLE_LINE_FOR: FOR_PREFIX FOR_INIT_STATEMENT ';' FOR_CONDITION_STATEMENT ';' FOR_ACTION_STATEMENT ')' LINE_STATEMENT . ';'

    ';'  shift, and go to state 246


State 245

   45 BLOCK_FOR: FOR_PREFIX FOR_INIT_STATEMENT ';' FOR_CONDITION_STATEMENT ';' FOR_ACTION_STATEMENT ')' '{' STATEMENTS . '}'

    '}'  shift, and go to state 247


State 246

   42 SINGLE_LINE_FOR: FOR_PREFIX FOR_INIT_STATEMENT ';' FOR_CONDITION_STATEMENT ';' FOR_ACTION_STATEMENT ')' LINE_STATEMENT ';' .

    $default  reduce using rule 42 (SINGLE_LINE_FOR)


State 247

   45 BLOCK_FOR: FOR_PREFIX FOR_INIT_STATEMENT ';' FOR_CONDITION_STATEMENT ';' FOR_ACTION_STATEMENT ')' '{' STATEMENTS '}' .

    $default  reduce using rule 45 (BLOCK_FOR)

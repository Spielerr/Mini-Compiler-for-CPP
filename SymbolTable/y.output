Terminals unused in grammar

    T_TYPE_CLASS
    T_USER_DEFINED_TYPE
    T_ACCESS_PUBLIC
    T_ACCESS_PRIVATE
    T_ACCESS_PROTECTED
    T_BIT_OP_RIGHT_SHIFT
    T_BIT_OP_LEFT_SHIFT
    T_IO_PRINTF
    T_IO_SCANF
    T_IO_GETLINE
    T_DOUBLE_QUOTES_OPEN
    T_DOUBLE_QUOTES_CLOSE
    T_COLON
    T_SCOPE_RESOLUTION
    '['
    ']'
    '.'


Grammar

    0 $accept: START $end

    1 START: INCLUDE BODY
    2      | BODY
    3      | INCLUDE

    4 INCLUDE: INCLUDE T_HEADER_INCLUDE '<' T_HEADER_FILE '>'
    5        | INCLUDE T_HEADER_INCLUDE T_STRING_LITERAL
    6        | T_HEADER_INCLUDE '<' T_HEADER_FILE '>'
    7        | T_HEADER_INCLUDE T_STRING_LITERAL

    8 BODY: BODY_BLOCK BODY
    9     | BODY_BLOCK

   10 BODY_BLOCK: FUNCTION
   11           | BLOCK

   12 FUNCTION: FUNCTION_PROTOTYPE
   13         | FUNCTION_DEFINITION
   14         | FUNCTION_DECLARATION

   15 FUNCTION_PROTOTYPE: TYPE T_IDENTIFIER '(' TYPE_LIST ')' ';'
   16                   | TYPE T_IDENTIFIER '(' ')' ';'

   17 TYPE_LIST: TYPE ',' TYPE_LIST
   18          | TYPE

   19 FUNCTION_DEFINITION: TYPE T_IDENTIFIER '(' FUNCTION_PARAMETER_LIST ')' ';'

   20 FUNCTION_DECLARATION: TYPE T_IDENTIFIER '(' FUNCTION_PARAMETER_LIST ')' BLOCK
   21                     | TYPE T_IDENTIFIER '(' ')' BLOCK

   22 FUNCTION_PARAMETER_LIST: TYPE T_IDENTIFIER ',' FUNCTION_PARAMETER_LIST
   23                        | TYPE T_IDENTIFIER '=' EXPRESSION ',' FUNCTION_PARAMETER_LIST
   24                        | TYPE T_IDENTIFIER
   25                        | TYPE T_IDENTIFIER '=' EXPRESSION

   26 BLOCK: BLOCK_START STATEMENTS BLOCK_END

   27 BLOCK_START: '{'

   28 BLOCK_END: '}'

   29 STATEMENTS: STATEMENT STATEMENTS
   30           | STATEMENT

   31 IF_BLOCK: IF_HEADER LINE_STATEMENT
   32         | T_CONSTRUCT_IF '(' EXPRESSION ')' BLOCK_STATEMENT

   33 IF_HEADER: T_CONSTRUCT_IF '(' EXPRESSION ')'

   34 ELSE_BLOCK: T_CONSTRUCT_ELSE STATEMENT

   35 FOR_BLOCK: T_CONSTRUCT_FOR '(' FOR_INIT_STATEMENT ';' FOR_CONDITION_STATEMENT ';' FOR_ACTION_STATEMENT ')' STATEMENT

   36 FOR_INIT_STATEMENT: %empty
   37                   | LINE_STATEMENT

   38 FOR_CONDITION_STATEMENT: %empty
   39                        | CONDITIONAL_EXPRESSION

   40 FOR_ACTION_STATEMENT: %empty
   41                     | LINE_STATEMENT

   42 BITWISE_OPERATOR: T_BIT_OP_AND
   43                 | T_BIT_OP_OR
   44                 | T_BIT_OP_XOR

   45 CONDITIONAL_EXPRESSION: EXPRESSION LOGICAL_OPERATOR EXPRESSION_GRAMMAR
   46                       | EXPRESSION RELATIONAL_OPERATOR EXPRESSION_GRAMMAR
   47                       | EXPRESSION BITWISE_OPERATOR EXPRESSION_GRAMMAR

   48 ASSIGNMENT: T_IDENTIFIER ASSIGNMENT_OPERATOR EXPRESSION_GRAMMAR
   49           | T_IDENTIFIER ASSIGNMENT_OPERATOR ASSIGNMENT

   50 ASSIGNMENT_OPERATOR: '='
   51                    | T_OP_ADD_ASSIGNMENT
   52                    | T_OP_SUBTRACT_ASSIGNMENT
   53                    | T_OP_MULTIPLY_ASSIGNMENT
   54                    | T_OP_DIVIDE_ASSIGNMENT
   55                    | T_OP_MOD_ASSIGNMENT

   56 EXPRESSION: ASSIGNMENT
   57           | CONDITIONAL_EXPRESSION
   58           | EXPRESSION_GRAMMAR

   59 EXPRESSION_GRAMMAR: EXPRESSION_GRAMMAR '+' EXPRESSION_TERM
   60                   | EXPRESSION_GRAMMAR '-' EXPRESSION_TERM
   61                   | EXPRESSION_TERM

   62 EXPRESSION_TERM: EXPRESSION_TERM '*' EXPRESSION_F
   63                | EXPRESSION_TERM '/' EXPRESSION_F
   64                | EXPRESSION_TERM '%' EXPRESSION_F
   65                | EXPRESSION_F
   66                | '!' EXPRESSION_F

   67 EXPRESSION_F: IDENTIFIER_OR_LITERAL
   68             | '(' EXPRESSION ')'

   69 BLOCK_STATEMENT: IF_BLOCK
   70                | ELSE_BLOCK
   71                | FOR_BLOCK
   72                | BLOCK

   73 STATEMENT: LINE_STATEMENT ';'
   74          | BLOCK_STATEMENT
   75          | ';'

   76 JUMP_STATEMENT: T_JUMP_BREAK
   77               | T_JUMP_EXIT
   78               | T_JUMP_CONTINUE

   79 LINE_STATEMENT: VARIABLE_DECLARATION
   80               | EXPRESSION
   81               | COUT
   82               | CIN
   83               | RETURN
   84               | JUMP_STATEMENT

   85 VARIABLE_DECLARATION: VARIABLE_DECLARATION_TYPE VARIABLE_LIST

   86 VARIABLE_DECLARATION_TYPE: TYPE

   87 VARIABLE_LIST: T_IDENTIFIER ',' VARIABLE_LIST
   88              | ASSIGNMENT ',' VARIABLE_LIST
   89              | T_IDENTIFIER
   90              | ASSIGNMENT

   91 COUT: T_IO_COUT T_IO_EXTRACTION EXTRACTION_LIST

   92 EXTRACTION_LIST: EXPRESSION T_IO_EXTRACTION EXTRACTION_LIST
   93                | EXPRESSION

   94 CIN: T_IO_CIN T_IO_INSERTION INSERTION_LIST

   95 INSERTION_LIST: T_IDENTIFIER T_IO_EXTRACTION INSERTION_LIST
   96               | T_IDENTIFIER

   97 RETURN: T_RETURN EXPRESSION

   98 LOGICAL_OPERATOR: T_LOG_OP_AND
   99                 | T_LOG_OP_OR

  100 RELATIONAL_OPERATOR: T_REL_OP_EQUAL
  101                    | '>'
  102                    | T_REL_OP_GREATER_THAN_EQUAL
  103                    | '<'
  104                    | T_REL_OP_LESS_THAN_EQUAL
  105                    | T_REL_OP_NOT_EQUAL

  106 IDENTIFIER_OR_LITERAL: T_IDENTIFIER
  107                      | T_IDENTIFIER T_OP_INCREMENT
  108                      | T_OP_DECREMENT T_IDENTIFIER
  109                      | T_CHAR_LITERAL
  110                      | T_NUMBER_LITERAL
  111                      | T_STRING_LITERAL

  112 TYPE: T_TYPE_INT
  113     | T_TYPE_DOUBLE
  114     | T_TYPE_FLOAT
  115     | T_TYPE_CHAR
  116     | T_TYPE_STRING
  117     | T_TYPE_VOID


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 66
    '%' (37) 64
    '(' (40) 15 16 19 20 21 32 33 35 68
    ')' (41) 15 16 19 20 21 32 33 35 68
    '*' (42) 62
    '+' (43) 59
    ',' (44) 17 22 23 87 88
    '-' (45) 60
    '.' (46)
    '/' (47) 63
    ';' (59) 15 16 19 35 73 75
    '<' (60) 4 6 103
    '=' (61) 23 25 50
    '>' (62) 4 6 101
    '[' (91)
    ']' (93)
    '{' (123) 27
    '}' (125) 28
    error (256)
    T_TYPE_INT (258) 112
    T_TYPE_FLOAT (259) 114
    T_TYPE_DOUBLE (260) 113
    T_TYPE_STRING (261) 116
    T_TYPE_CHAR (262) 115
    T_TYPE_VOID (263) 117
    T_TYPE_CLASS (264)
    T_USER_DEFINED_TYPE (265)
    T_NUMBER_LITERAL (266) 110
    T_STRING_LITERAL (267) 5 7 111
    T_CHAR_LITERAL (268) 109
    T_IDENTIFIER (269) 15 16 19 20 21 22 23 24 25 48 49 87 89 95 96 106 107 108
    T_CONSTRUCT_IF (270) 32 33
    T_CONSTRUCT_ELSE (271) 34
    T_CONSTRUCT_FOR (272) 35
    T_ACCESS_PUBLIC (273)
    T_ACCESS_PRIVATE (274)
    T_ACCESS_PROTECTED (275)
    T_HEADER_INCLUDE (276) 4 5 6 7
    T_HEADER_FILE (277) 4 6
    T_REL_OP_GREATER_THAN_EQUAL (278) 102
    T_REL_OP_LESS_THAN_EQUAL (279) 104
    T_REL_OP_EQUAL (280) 100
    T_REL_OP_NOT_EQUAL (281) 105
    T_LOG_OP_OR (282) 99
    T_LOG_OP_AND (283) 98
    T_BIT_OP_AND (284) 42
    T_BIT_OP_OR (285) 43
    T_BIT_OP_XOR (286) 44
    T_BIT_OP_RIGHT_SHIFT (287)
    T_BIT_OP_LEFT_SHIFT (288)
    T_OP_ADD_ASSIGNMENT (289) 51
    T_OP_SUBTRACT_ASSIGNMENT (290) 52
    T_OP_MULTIPLY_ASSIGNMENT (291) 53
    T_OP_DIVIDE_ASSIGNMENT (292) 54
    T_OP_MOD_ASSIGNMENT (293) 55
    T_OP_INCREMENT (294) 107
    T_OP_DECREMENT (295) 108
    T_IO_COUT (296) 91
    T_IO_CIN (297) 94
    T_IO_PRINTF (298)
    T_IO_SCANF (299)
    T_IO_GETLINE (300)
    T_IO_INSERTION (301) 94
    T_IO_EXTRACTION (302) 91 92 95
    T_JUMP_BREAK (303) 76
    T_JUMP_EXIT (304) 77
    T_JUMP_CONTINUE (305) 78
    T_DOUBLE_QUOTES_OPEN (306)
    T_DOUBLE_QUOTES_CLOSE (307)
    T_COLON (308)
    T_SCOPE_RESOLUTION (309)
    T_RETURN (310) 97


Nonterminals, with rules where they appear

    $accept (74)
        on left: 0
    START (75)
        on left: 1 2 3
        on right: 0
    INCLUDE (76)
        on left: 4 5 6 7
        on right: 1 3 4 5
    BODY (77)
        on left: 8 9
        on right: 1 2 8
    BODY_BLOCK (78)
        on left: 10 11
        on right: 8 9
    FUNCTION (79)
        on left: 12 13 14
        on right: 10
    FUNCTION_PROTOTYPE (80)
        on left: 15 16
        on right: 12
    TYPE_LIST (81)
        on left: 17 18
        on right: 15 17
    FUNCTION_DEFINITION (82)
        on left: 19
        on right: 13
    FUNCTION_DECLARATION (83)
        on left: 20 21
        on right: 14
    FUNCTION_PARAMETER_LIST (84)
        on left: 22 23 24 25
        on right: 19 20 22 23
    BLOCK (85)
        on left: 26
        on right: 11 20 21 72
    BLOCK_START (86)
        on left: 27
        on right: 26
    BLOCK_END (87)
        on left: 28
        on right: 26
    STATEMENTS (88)
        on left: 29 30
        on right: 26 29
    IF_BLOCK (89)
        on left: 31 32
        on right: 69
    IF_HEADER (90)
        on left: 33
        on right: 31
    ELSE_BLOCK (91)
        on left: 34
        on right: 70
    FOR_BLOCK (92)
        on left: 35
        on right: 71
    FOR_INIT_STATEMENT (93)
        on left: 36 37
        on right: 35
    FOR_CONDITION_STATEMENT (94)
        on left: 38 39
        on right: 35
    FOR_ACTION_STATEMENT (95)
        on left: 40 41
        on right: 35
    BITWISE_OPERATOR (96)
        on left: 42 43 44
        on right: 47
    CONDITIONAL_EXPRESSION (97)
        on left: 45 46 47
        on right: 39 57
    ASSIGNMENT (98)
        on left: 48 49
        on right: 49 56 88 90
    ASSIGNMENT_OPERATOR (99)
        on left: 50 51 52 53 54 55
        on right: 48 49
    EXPRESSION (100)
        on left: 56 57 58
        on right: 23 25 32 33 45 46 47 68 80 92 93 97
    EXPRESSION_GRAMMAR (101)
        on left: 59 60 61
        on right: 45 46 47 48 58 59 60
    EXPRESSION_TERM (102)
        on left: 62 63 64 65 66
        on right: 59 60 61 62 63 64
    EXPRESSION_F (103)
        on left: 67 68
        on right: 62 63 64 65 66
    BLOCK_STATEMENT (104)
        on left: 69 70 71 72
        on right: 32 74
    STATEMENT (105)
        on left: 73 74 75
        on right: 29 30 34 35
    JUMP_STATEMENT (106)
        on left: 76 77 78
        on right: 84
    LINE_STATEMENT (107)
        on left: 79 80 81 82 83 84
        on right: 31 37 41 73
    VARIABLE_DECLARATION (108)
        on left: 85
        on right: 79
    VARIABLE_DECLARATION_TYPE (109)
        on left: 86
        on right: 85
    VARIABLE_LIST (110)
        on left: 87 88 89 90
        on right: 85 87 88
    COUT (111)
        on left: 91
        on right: 81
    EXTRACTION_LIST (112)
        on left: 92 93
        on right: 91 92
    CIN (113)
        on left: 94
        on right: 82
    INSERTION_LIST (114)
        on left: 95 96
        on right: 94 95
    RETURN (115)
        on left: 97
        on right: 83
    LOGICAL_OPERATOR (116)
        on left: 98 99
        on right: 45
    RELATIONAL_OPERATOR (117)
        on left: 100 101 102 103 104 105
        on right: 46
    IDENTIFIER_OR_LITERAL (118)
        on left: 106 107 108 109 110 111
        on right: 67
    TYPE (119)
        on left: 112 113 114 115 116 117
        on right: 15 16 17 18 19 20 21 22 23 24 25 86


State 0

    0 $accept: . START $end

    T_TYPE_INT        shift, and go to state 1
    T_TYPE_FLOAT      shift, and go to state 2
    T_TYPE_DOUBLE     shift, and go to state 3
    T_TYPE_STRING     shift, and go to state 4
    T_TYPE_CHAR       shift, and go to state 5
    T_TYPE_VOID       shift, and go to state 6
    '{'               shift, and go to state 7
    T_HEADER_INCLUDE  shift, and go to state 8

    START                 go to state 9
    INCLUDE               go to state 10
    BODY                  go to state 11
    BODY_BLOCK            go to state 12
    FUNCTION              go to state 13
    FUNCTION_PROTOTYPE    go to state 14
    FUNCTION_DEFINITION   go to state 15
    FUNCTION_DECLARATION  go to state 16
    BLOCK                 go to state 17
    BLOCK_START           go to state 18
    TYPE                  go to state 19


State 1

  112 TYPE: T_TYPE_INT .

    $default  reduce using rule 112 (TYPE)


State 2

  114 TYPE: T_TYPE_FLOAT .

    $default  reduce using rule 114 (TYPE)


State 3

  113 TYPE: T_TYPE_DOUBLE .

    $default  reduce using rule 113 (TYPE)


State 4

  116 TYPE: T_TYPE_STRING .

    $default  reduce using rule 116 (TYPE)


State 5

  115 TYPE: T_TYPE_CHAR .

    $default  reduce using rule 115 (TYPE)


State 6

  117 TYPE: T_TYPE_VOID .

    $default  reduce using rule 117 (TYPE)


State 7

   27 BLOCK_START: '{' .

    $default  reduce using rule 27 (BLOCK_START)


State 8

    6 INCLUDE: T_HEADER_INCLUDE . '<' T_HEADER_FILE '>'
    7        | T_HEADER_INCLUDE . T_STRING_LITERAL

    T_STRING_LITERAL  shift, and go to state 20
    '<'               shift, and go to state 21


State 9

    0 $accept: START . $end

    $end  shift, and go to state 22


State 10

    1 START: INCLUDE . BODY
    3      | INCLUDE .
    4 INCLUDE: INCLUDE . T_HEADER_INCLUDE '<' T_HEADER_FILE '>'
    5        | INCLUDE . T_HEADER_INCLUDE T_STRING_LITERAL

    T_TYPE_INT        shift, and go to state 1
    T_TYPE_FLOAT      shift, and go to state 2
    T_TYPE_DOUBLE     shift, and go to state 3
    T_TYPE_STRING     shift, and go to state 4
    T_TYPE_CHAR       shift, and go to state 5
    T_TYPE_VOID       shift, and go to state 6
    '{'               shift, and go to state 7
    T_HEADER_INCLUDE  shift, and go to state 23

    $default  reduce using rule 3 (START)

    BODY                  go to state 24
    BODY_BLOCK            go to state 12
    FUNCTION              go to state 13
    FUNCTION_PROTOTYPE    go to state 14
    FUNCTION_DEFINITION   go to state 15
    FUNCTION_DECLARATION  go to state 16
    BLOCK                 go to state 17
    BLOCK_START           go to state 18
    TYPE                  go to state 19


State 11

    2 START: BODY .

    $default  reduce using rule 2 (START)


State 12

    8 BODY: BODY_BLOCK . BODY
    9     | BODY_BLOCK .

    T_TYPE_INT     shift, and go to state 1
    T_TYPE_FLOAT   shift, and go to state 2
    T_TYPE_DOUBLE  shift, and go to state 3
    T_TYPE_STRING  shift, and go to state 4
    T_TYPE_CHAR    shift, and go to state 5
    T_TYPE_VOID    shift, and go to state 6
    '{'            shift, and go to state 7

    $default  reduce using rule 9 (BODY)

    BODY                  go to state 25
    BODY_BLOCK            go to state 12
    FUNCTION              go to state 13
    FUNCTION_PROTOTYPE    go to state 14
    FUNCTION_DEFINITION   go to state 15
    FUNCTION_DECLARATION  go to state 16
    BLOCK                 go to state 17
    BLOCK_START           go to state 18
    TYPE                  go to state 19


State 13

   10 BODY_BLOCK: FUNCTION .

    $default  reduce using rule 10 (BODY_BLOCK)


State 14

   12 FUNCTION: FUNCTION_PROTOTYPE .

    $default  reduce using rule 12 (FUNCTION)


State 15

   13 FUNCTION: FUNCTION_DEFINITION .

    $default  reduce using rule 13 (FUNCTION)


State 16

   14 FUNCTION: FUNCTION_DECLARATION .

    $default  reduce using rule 14 (FUNCTION)


State 17

   11 BODY_BLOCK: BLOCK .

    $default  reduce using rule 11 (BODY_BLOCK)


State 18

   26 BLOCK: BLOCK_START . STATEMENTS BLOCK_END

    T_TYPE_INT        shift, and go to state 1
    T_TYPE_FLOAT      shift, and go to state 2
    T_TYPE_DOUBLE     shift, and go to state 3
    T_TYPE_STRING     shift, and go to state 4
    T_TYPE_CHAR       shift, and go to state 5
    T_TYPE_VOID       shift, and go to state 6
    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 29
    T_CONSTRUCT_IF    shift, and go to state 30
    T_CONSTRUCT_ELSE  shift, and go to state 31
    T_CONSTRUCT_FOR   shift, and go to state 32
    '{'               shift, and go to state 7
    '!'               shift, and go to state 33
    T_OP_DECREMENT    shift, and go to state 34
    T_IO_COUT         shift, and go to state 35
    T_IO_CIN          shift, and go to state 36
    T_JUMP_BREAK      shift, and go to state 37
    T_JUMP_EXIT       shift, and go to state 38
    T_JUMP_CONTINUE   shift, and go to state 39
    '('               shift, and go to state 40
    ';'               shift, and go to state 41
    T_RETURN          shift, and go to state 42

    BLOCK                      go to state 43
    BLOCK_START                go to state 18
    STATEMENTS                 go to state 44
    IF_BLOCK                   go to state 45
    IF_HEADER                  go to state 46
    ELSE_BLOCK                 go to state 47
    FOR_BLOCK                  go to state 48
    CONDITIONAL_EXPRESSION     go to state 49
    ASSIGNMENT                 go to state 50
    EXPRESSION                 go to state 51
    EXPRESSION_GRAMMAR         go to state 52
    EXPRESSION_TERM            go to state 53
    EXPRESSION_F               go to state 54
    BLOCK_STATEMENT            go to state 55
    STATEMENT                  go to state 56
    JUMP_STATEMENT             go to state 57
    LINE_STATEMENT             go to state 58
    VARIABLE_DECLARATION       go to state 59
    VARIABLE_DECLARATION_TYPE  go to state 60
    COUT                       go to state 61
    CIN                        go to state 62
    RETURN                     go to state 63
    IDENTIFIER_OR_LITERAL      go to state 64
    TYPE                       go to state 65


State 19

   15 FUNCTION_PROTOTYPE: TYPE . T_IDENTIFIER '(' TYPE_LIST ')' ';'
   16                   | TYPE . T_IDENTIFIER '(' ')' ';'
   19 FUNCTION_DEFINITION: TYPE . T_IDENTIFIER '(' FUNCTION_PARAMETER_LIST ')' ';'
   20 FUNCTION_DECLARATION: TYPE . T_IDENTIFIER '(' FUNCTION_PARAMETER_LIST ')' BLOCK
   21                     | TYPE . T_IDENTIFIER '(' ')' BLOCK

    T_IDENTIFIER  shift, and go to state 66


State 20

    7 INCLUDE: T_HEADER_INCLUDE T_STRING_LITERAL .

    $default  reduce using rule 7 (INCLUDE)


State 21

    6 INCLUDE: T_HEADER_INCLUDE '<' . T_HEADER_FILE '>'

    T_HEADER_FILE  shift, and go to state 67


State 22

    0 $accept: START $end .

    $default  accept


State 23

    4 INCLUDE: INCLUDE T_HEADER_INCLUDE . '<' T_HEADER_FILE '>'
    5        | INCLUDE T_HEADER_INCLUDE . T_STRING_LITERAL

    T_STRING_LITERAL  shift, and go to state 68
    '<'               shift, and go to state 69


State 24

    1 START: INCLUDE BODY .

    $default  reduce using rule 1 (START)


State 25

    8 BODY: BODY_BLOCK BODY .

    $default  reduce using rule 8 (BODY)


State 26

  110 IDENTIFIER_OR_LITERAL: T_NUMBER_LITERAL .

    $default  reduce using rule 110 (IDENTIFIER_OR_LITERAL)


State 27

  111 IDENTIFIER_OR_LITERAL: T_STRING_LITERAL .

    $default  reduce using rule 111 (IDENTIFIER_OR_LITERAL)


State 28

  109 IDENTIFIER_OR_LITERAL: T_CHAR_LITERAL .

    $default  reduce using rule 109 (IDENTIFIER_OR_LITERAL)


State 29

   48 ASSIGNMENT: T_IDENTIFIER . ASSIGNMENT_OPERATOR EXPRESSION_GRAMMAR
   49           | T_IDENTIFIER . ASSIGNMENT_OPERATOR ASSIGNMENT
  106 IDENTIFIER_OR_LITERAL: T_IDENTIFIER .
  107                      | T_IDENTIFIER . T_OP_INCREMENT

    '='                       shift, and go to state 70
    T_OP_ADD_ASSIGNMENT       shift, and go to state 71
    T_OP_SUBTRACT_ASSIGNMENT  shift, and go to state 72
    T_OP_MULTIPLY_ASSIGNMENT  shift, and go to state 73
    T_OP_DIVIDE_ASSIGNMENT    shift, and go to state 74
    T_OP_MOD_ASSIGNMENT       shift, and go to state 75
    T_OP_INCREMENT            shift, and go to state 76

    $default  reduce using rule 106 (IDENTIFIER_OR_LITERAL)

    ASSIGNMENT_OPERATOR  go to state 77


State 30

   32 IF_BLOCK: T_CONSTRUCT_IF . '(' EXPRESSION ')' BLOCK_STATEMENT
   33 IF_HEADER: T_CONSTRUCT_IF . '(' EXPRESSION ')'

    '('  shift, and go to state 78


State 31

   34 ELSE_BLOCK: T_CONSTRUCT_ELSE . STATEMENT

    T_TYPE_INT        shift, and go to state 1
    T_TYPE_FLOAT      shift, and go to state 2
    T_TYPE_DOUBLE     shift, and go to state 3
    T_TYPE_STRING     shift, and go to state 4
    T_TYPE_CHAR       shift, and go to state 5
    T_TYPE_VOID       shift, and go to state 6
    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 29
    T_CONSTRUCT_IF    shift, and go to state 30
    T_CONSTRUCT_ELSE  shift, and go to state 31
    T_CONSTRUCT_FOR   shift, and go to state 32
    '{'               shift, and go to state 7
    '!'               shift, and go to state 33
    T_OP_DECREMENT    shift, and go to state 34
    T_IO_COUT         shift, and go to state 35
    T_IO_CIN          shift, and go to state 36
    T_JUMP_BREAK      shift, and go to state 37
    T_JUMP_EXIT       shift, and go to state 38
    T_JUMP_CONTINUE   shift, and go to state 39
    '('               shift, and go to state 40
    ';'               shift, and go to state 41
    T_RETURN          shift, and go to state 42

    BLOCK                      go to state 43
    BLOCK_START                go to state 18
    IF_BLOCK                   go to state 45
    IF_HEADER                  go to state 46
    ELSE_BLOCK                 go to state 47
    FOR_BLOCK                  go to state 48
    CONDITIONAL_EXPRESSION     go to state 49
    ASSIGNMENT                 go to state 50
    EXPRESSION                 go to state 51
    EXPRESSION_GRAMMAR         go to state 52
    EXPRESSION_TERM            go to state 53
    EXPRESSION_F               go to state 54
    BLOCK_STATEMENT            go to state 55
    STATEMENT                  go to state 79
    JUMP_STATEMENT             go to state 57
    LINE_STATEMENT             go to state 58
    VARIABLE_DECLARATION       go to state 59
    VARIABLE_DECLARATION_TYPE  go to state 60
    COUT                       go to state 61
    CIN                        go to state 62
    RETURN                     go to state 63
    IDENTIFIER_OR_LITERAL      go to state 64
    TYPE                       go to state 65


State 32

   35 FOR_BLOCK: T_CONSTRUCT_FOR . '(' FOR_INIT_STATEMENT ';' FOR_CONDITION_STATEMENT ';' FOR_ACTION_STATEMENT ')' STATEMENT

    '('  shift, and go to state 80


State 33

   66 EXPRESSION_TERM: '!' . EXPRESSION_F

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 81
    T_OP_DECREMENT    shift, and go to state 34
    '('               shift, and go to state 40

    EXPRESSION_F           go to state 82
    IDENTIFIER_OR_LITERAL  go to state 64


State 34

  108 IDENTIFIER_OR_LITERAL: T_OP_DECREMENT . T_IDENTIFIER

    T_IDENTIFIER  shift, and go to state 83


State 35

   91 COUT: T_IO_COUT . T_IO_EXTRACTION EXTRACTION_LIST

    T_IO_EXTRACTION  shift, and go to state 84


State 36

   94 CIN: T_IO_CIN . T_IO_INSERTION INSERTION_LIST

    T_IO_INSERTION  shift, and go to state 85


State 37

   76 JUMP_STATEMENT: T_JUMP_BREAK .

    $default  reduce using rule 76 (JUMP_STATEMENT)


State 38

   77 JUMP_STATEMENT: T_JUMP_EXIT .

    $default  reduce using rule 77 (JUMP_STATEMENT)


State 39

   78 JUMP_STATEMENT: T_JUMP_CONTINUE .

    $default  reduce using rule 78 (JUMP_STATEMENT)


State 40

   68 EXPRESSION_F: '(' . EXPRESSION ')'

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 29
    '!'               shift, and go to state 33
    T_OP_DECREMENT    shift, and go to state 34
    '('               shift, and go to state 40

    CONDITIONAL_EXPRESSION  go to state 49
    ASSIGNMENT              go to state 50
    EXPRESSION              go to state 86
    EXPRESSION_GRAMMAR      go to state 52
    EXPRESSION_TERM         go to state 53
    EXPRESSION_F            go to state 54
    IDENTIFIER_OR_LITERAL   go to state 64


State 41

   75 STATEMENT: ';' .

    $default  reduce using rule 75 (STATEMENT)


State 42

   97 RETURN: T_RETURN . EXPRESSION

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 29
    '!'               shift, and go to state 33
    T_OP_DECREMENT    shift, and go to state 34
    '('               shift, and go to state 40

    CONDITIONAL_EXPRESSION  go to state 49
    ASSIGNMENT              go to state 50
    EXPRESSION              go to state 87
    EXPRESSION_GRAMMAR      go to state 52
    EXPRESSION_TERM         go to state 53
    EXPRESSION_F            go to state 54
    IDENTIFIER_OR_LITERAL   go to state 64


State 43

   72 BLOCK_STATEMENT: BLOCK .

    $default  reduce using rule 72 (BLOCK_STATEMENT)


State 44

   26 BLOCK: BLOCK_START STATEMENTS . BLOCK_END

    '}'  shift, and go to state 88

    BLOCK_END  go to state 89


State 45

   69 BLOCK_STATEMENT: IF_BLOCK .

    $default  reduce using rule 69 (BLOCK_STATEMENT)


State 46

   31 IF_BLOCK: IF_HEADER . LINE_STATEMENT

    T_TYPE_INT        shift, and go to state 1
    T_TYPE_FLOAT      shift, and go to state 2
    T_TYPE_DOUBLE     shift, and go to state 3
    T_TYPE_STRING     shift, and go to state 4
    T_TYPE_CHAR       shift, and go to state 5
    T_TYPE_VOID       shift, and go to state 6
    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 29
    '!'               shift, and go to state 33
    T_OP_DECREMENT    shift, and go to state 34
    T_IO_COUT         shift, and go to state 35
    T_IO_CIN          shift, and go to state 36
    T_JUMP_BREAK      shift, and go to state 37
    T_JUMP_EXIT       shift, and go to state 38
    T_JUMP_CONTINUE   shift, and go to state 39
    '('               shift, and go to state 40
    T_RETURN          shift, and go to state 42

    CONDITIONAL_EXPRESSION     go to state 49
    ASSIGNMENT                 go to state 50
    EXPRESSION                 go to state 51
    EXPRESSION_GRAMMAR         go to state 52
    EXPRESSION_TERM            go to state 53
    EXPRESSION_F               go to state 54
    JUMP_STATEMENT             go to state 57
    LINE_STATEMENT             go to state 90
    VARIABLE_DECLARATION       go to state 59
    VARIABLE_DECLARATION_TYPE  go to state 60
    COUT                       go to state 61
    CIN                        go to state 62
    RETURN                     go to state 63
    IDENTIFIER_OR_LITERAL      go to state 64
    TYPE                       go to state 65


State 47

   70 BLOCK_STATEMENT: ELSE_BLOCK .

    $default  reduce using rule 70 (BLOCK_STATEMENT)


State 48

   71 BLOCK_STATEMENT: FOR_BLOCK .

    $default  reduce using rule 71 (BLOCK_STATEMENT)


State 49

   57 EXPRESSION: CONDITIONAL_EXPRESSION .

    $default  reduce using rule 57 (EXPRESSION)


State 50

   56 EXPRESSION: ASSIGNMENT .

    $default  reduce using rule 56 (EXPRESSION)


State 51

   45 CONDITIONAL_EXPRESSION: EXPRESSION . LOGICAL_OPERATOR EXPRESSION_GRAMMAR
   46                       | EXPRESSION . RELATIONAL_OPERATOR EXPRESSION_GRAMMAR
   47                       | EXPRESSION . BITWISE_OPERATOR EXPRESSION_GRAMMAR
   80 LINE_STATEMENT: EXPRESSION .

    '>'                          shift, and go to state 91
    '<'                          shift, and go to state 92
    T_REL_OP_GREATER_THAN_EQUAL  shift, and go to state 93
    T_REL_OP_LESS_THAN_EQUAL     shift, and go to state 94
    T_REL_OP_EQUAL               shift, and go to state 95
    T_REL_OP_NOT_EQUAL           shift, and go to state 96
    T_LOG_OP_OR                  shift, and go to state 97
    T_LOG_OP_AND                 shift, and go to state 98
    T_BIT_OP_AND                 shift, and go to state 99
    T_BIT_OP_OR                  shift, and go to state 100
    T_BIT_OP_XOR                 shift, and go to state 101

    $default  reduce using rule 80 (LINE_STATEMENT)

    BITWISE_OPERATOR     go to state 102
    LOGICAL_OPERATOR     go to state 103
    RELATIONAL_OPERATOR  go to state 104


State 52

   58 EXPRESSION: EXPRESSION_GRAMMAR .
   59 EXPRESSION_GRAMMAR: EXPRESSION_GRAMMAR . '+' EXPRESSION_TERM
   60                   | EXPRESSION_GRAMMAR . '-' EXPRESSION_TERM

    '+'  shift, and go to state 105
    '-'  shift, and go to state 106

    $default  reduce using rule 58 (EXPRESSION)


State 53

   61 EXPRESSION_GRAMMAR: EXPRESSION_TERM .
   62 EXPRESSION_TERM: EXPRESSION_TERM . '*' EXPRESSION_F
   63                | EXPRESSION_TERM . '/' EXPRESSION_F
   64                | EXPRESSION_TERM . '%' EXPRESSION_F

    '*'  shift, and go to state 107
    '/'  shift, and go to state 108
    '%'  shift, and go to state 109

    $default  reduce using rule 61 (EXPRESSION_GRAMMAR)


State 54

   65 EXPRESSION_TERM: EXPRESSION_F .

    $default  reduce using rule 65 (EXPRESSION_TERM)


State 55

   74 STATEMENT: BLOCK_STATEMENT .

    $default  reduce using rule 74 (STATEMENT)


State 56

   29 STATEMENTS: STATEMENT . STATEMENTS
   30           | STATEMENT .

    T_TYPE_INT        shift, and go to state 1
    T_TYPE_FLOAT      shift, and go to state 2
    T_TYPE_DOUBLE     shift, and go to state 3
    T_TYPE_STRING     shift, and go to state 4
    T_TYPE_CHAR       shift, and go to state 5
    T_TYPE_VOID       shift, and go to state 6
    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 29
    T_CONSTRUCT_IF    shift, and go to state 30
    T_CONSTRUCT_ELSE  shift, and go to state 31
    T_CONSTRUCT_FOR   shift, and go to state 32
    '{'               shift, and go to state 7
    '!'               shift, and go to state 33
    T_OP_DECREMENT    shift, and go to state 34
    T_IO_COUT         shift, and go to state 35
    T_IO_CIN          shift, and go to state 36
    T_JUMP_BREAK      shift, and go to state 37
    T_JUMP_EXIT       shift, and go to state 38
    T_JUMP_CONTINUE   shift, and go to state 39
    '('               shift, and go to state 40
    ';'               shift, and go to state 41
    T_RETURN          shift, and go to state 42

    $default  reduce using rule 30 (STATEMENTS)

    BLOCK                      go to state 43
    BLOCK_START                go to state 18
    STATEMENTS                 go to state 110
    IF_BLOCK                   go to state 45
    IF_HEADER                  go to state 46
    ELSE_BLOCK                 go to state 47
    FOR_BLOCK                  go to state 48
    CONDITIONAL_EXPRESSION     go to state 49
    ASSIGNMENT                 go to state 50
    EXPRESSION                 go to state 51
    EXPRESSION_GRAMMAR         go to state 52
    EXPRESSION_TERM            go to state 53
    EXPRESSION_F               go to state 54
    BLOCK_STATEMENT            go to state 55
    STATEMENT                  go to state 56
    JUMP_STATEMENT             go to state 57
    LINE_STATEMENT             go to state 58
    VARIABLE_DECLARATION       go to state 59
    VARIABLE_DECLARATION_TYPE  go to state 60
    COUT                       go to state 61
    CIN                        go to state 62
    RETURN                     go to state 63
    IDENTIFIER_OR_LITERAL      go to state 64
    TYPE                       go to state 65


State 57

   84 LINE_STATEMENT: JUMP_STATEMENT .

    $default  reduce using rule 84 (LINE_STATEMENT)


State 58

   73 STATEMENT: LINE_STATEMENT . ';'

    ';'  shift, and go to state 111


State 59

   79 LINE_STATEMENT: VARIABLE_DECLARATION .

    $default  reduce using rule 79 (LINE_STATEMENT)


State 60

   85 VARIABLE_DECLARATION: VARIABLE_DECLARATION_TYPE . VARIABLE_LIST

    T_IDENTIFIER  shift, and go to state 112

    ASSIGNMENT     go to state 113
    VARIABLE_LIST  go to state 114


State 61

   81 LINE_STATEMENT: COUT .

    $default  reduce using rule 81 (LINE_STATEMENT)


State 62

   82 LINE_STATEMENT: CIN .

    $default  reduce using rule 82 (LINE_STATEMENT)


State 63

   83 LINE_STATEMENT: RETURN .

    $default  reduce using rule 83 (LINE_STATEMENT)


State 64

   67 EXPRESSION_F: IDENTIFIER_OR_LITERAL .

    $default  reduce using rule 67 (EXPRESSION_F)


State 65

   86 VARIABLE_DECLARATION_TYPE: TYPE .

    $default  reduce using rule 86 (VARIABLE_DECLARATION_TYPE)


State 66

   15 FUNCTION_PROTOTYPE: TYPE T_IDENTIFIER . '(' TYPE_LIST ')' ';'
   16                   | TYPE T_IDENTIFIER . '(' ')' ';'
   19 FUNCTION_DEFINITION: TYPE T_IDENTIFIER . '(' FUNCTION_PARAMETER_LIST ')' ';'
   20 FUNCTION_DECLARATION: TYPE T_IDENTIFIER . '(' FUNCTION_PARAMETER_LIST ')' BLOCK
   21                     | TYPE T_IDENTIFIER . '(' ')' BLOCK

    '('  shift, and go to state 115


State 67

    6 INCLUDE: T_HEADER_INCLUDE '<' T_HEADER_FILE . '>'

    '>'  shift, and go to state 116


State 68

    5 INCLUDE: INCLUDE T_HEADER_INCLUDE T_STRING_LITERAL .

    $default  reduce using rule 5 (INCLUDE)


State 69

    4 INCLUDE: INCLUDE T_HEADER_INCLUDE '<' . T_HEADER_FILE '>'

    T_HEADER_FILE  shift, and go to state 117


State 70

   50 ASSIGNMENT_OPERATOR: '=' .

    $default  reduce using rule 50 (ASSIGNMENT_OPERATOR)


State 71

   51 ASSIGNMENT_OPERATOR: T_OP_ADD_ASSIGNMENT .

    $default  reduce using rule 51 (ASSIGNMENT_OPERATOR)


State 72

   52 ASSIGNMENT_OPERATOR: T_OP_SUBTRACT_ASSIGNMENT .

    $default  reduce using rule 52 (ASSIGNMENT_OPERATOR)


State 73

   53 ASSIGNMENT_OPERATOR: T_OP_MULTIPLY_ASSIGNMENT .

    $default  reduce using rule 53 (ASSIGNMENT_OPERATOR)


State 74

   54 ASSIGNMENT_OPERATOR: T_OP_DIVIDE_ASSIGNMENT .

    $default  reduce using rule 54 (ASSIGNMENT_OPERATOR)


State 75

   55 ASSIGNMENT_OPERATOR: T_OP_MOD_ASSIGNMENT .

    $default  reduce using rule 55 (ASSIGNMENT_OPERATOR)


State 76

  107 IDENTIFIER_OR_LITERAL: T_IDENTIFIER T_OP_INCREMENT .

    $default  reduce using rule 107 (IDENTIFIER_OR_LITERAL)


State 77

   48 ASSIGNMENT: T_IDENTIFIER ASSIGNMENT_OPERATOR . EXPRESSION_GRAMMAR
   49           | T_IDENTIFIER ASSIGNMENT_OPERATOR . ASSIGNMENT

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 29
    '!'               shift, and go to state 33
    T_OP_DECREMENT    shift, and go to state 34
    '('               shift, and go to state 40

    ASSIGNMENT             go to state 118
    EXPRESSION_GRAMMAR     go to state 119
    EXPRESSION_TERM        go to state 53
    EXPRESSION_F           go to state 54
    IDENTIFIER_OR_LITERAL  go to state 64


State 78

   32 IF_BLOCK: T_CONSTRUCT_IF '(' . EXPRESSION ')' BLOCK_STATEMENT
   33 IF_HEADER: T_CONSTRUCT_IF '(' . EXPRESSION ')'

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 29
    '!'               shift, and go to state 33
    T_OP_DECREMENT    shift, and go to state 34
    '('               shift, and go to state 40

    CONDITIONAL_EXPRESSION  go to state 49
    ASSIGNMENT              go to state 50
    EXPRESSION              go to state 120
    EXPRESSION_GRAMMAR      go to state 52
    EXPRESSION_TERM         go to state 53
    EXPRESSION_F            go to state 54
    IDENTIFIER_OR_LITERAL   go to state 64


State 79

   34 ELSE_BLOCK: T_CONSTRUCT_ELSE STATEMENT .

    $default  reduce using rule 34 (ELSE_BLOCK)


State 80

   35 FOR_BLOCK: T_CONSTRUCT_FOR '(' . FOR_INIT_STATEMENT ';' FOR_CONDITION_STATEMENT ';' FOR_ACTION_STATEMENT ')' STATEMENT

    T_TYPE_INT        shift, and go to state 1
    T_TYPE_FLOAT      shift, and go to state 2
    T_TYPE_DOUBLE     shift, and go to state 3
    T_TYPE_STRING     shift, and go to state 4
    T_TYPE_CHAR       shift, and go to state 5
    T_TYPE_VOID       shift, and go to state 6
    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 29
    '!'               shift, and go to state 33
    T_OP_DECREMENT    shift, and go to state 34
    T_IO_COUT         shift, and go to state 35
    T_IO_CIN          shift, and go to state 36
    T_JUMP_BREAK      shift, and go to state 37
    T_JUMP_EXIT       shift, and go to state 38
    T_JUMP_CONTINUE   shift, and go to state 39
    '('               shift, and go to state 40
    T_RETURN          shift, and go to state 42

    $default  reduce using rule 36 (FOR_INIT_STATEMENT)

    FOR_INIT_STATEMENT         go to state 121
    CONDITIONAL_EXPRESSION     go to state 49
    ASSIGNMENT                 go to state 50
    EXPRESSION                 go to state 51
    EXPRESSION_GRAMMAR         go to state 52
    EXPRESSION_TERM            go to state 53
    EXPRESSION_F               go to state 54
    JUMP_STATEMENT             go to state 57
    LINE_STATEMENT             go to state 122
    VARIABLE_DECLARATION       go to state 59
    VARIABLE_DECLARATION_TYPE  go to state 60
    COUT                       go to state 61
    CIN                        go to state 62
    RETURN                     go to state 63
    IDENTIFIER_OR_LITERAL      go to state 64
    TYPE                       go to state 65


State 81

  106 IDENTIFIER_OR_LITERAL: T_IDENTIFIER .
  107                      | T_IDENTIFIER . T_OP_INCREMENT

    T_OP_INCREMENT  shift, and go to state 76

    $default  reduce using rule 106 (IDENTIFIER_OR_LITERAL)


State 82

   66 EXPRESSION_TERM: '!' EXPRESSION_F .

    $default  reduce using rule 66 (EXPRESSION_TERM)


State 83

  108 IDENTIFIER_OR_LITERAL: T_OP_DECREMENT T_IDENTIFIER .

    $default  reduce using rule 108 (IDENTIFIER_OR_LITERAL)


State 84

   91 COUT: T_IO_COUT T_IO_EXTRACTION . EXTRACTION_LIST

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 29
    '!'               shift, and go to state 33
    T_OP_DECREMENT    shift, and go to state 34
    '('               shift, and go to state 40

    CONDITIONAL_EXPRESSION  go to state 49
    ASSIGNMENT              go to state 50
    EXPRESSION              go to state 123
    EXPRESSION_GRAMMAR      go to state 52
    EXPRESSION_TERM         go to state 53
    EXPRESSION_F            go to state 54
    EXTRACTION_LIST         go to state 124
    IDENTIFIER_OR_LITERAL   go to state 64


State 85

   94 CIN: T_IO_CIN T_IO_INSERTION . INSERTION_LIST

    T_IDENTIFIER  shift, and go to state 125

    INSERTION_LIST  go to state 126


State 86

   45 CONDITIONAL_EXPRESSION: EXPRESSION . LOGICAL_OPERATOR EXPRESSION_GRAMMAR
   46                       | EXPRESSION . RELATIONAL_OPERATOR EXPRESSION_GRAMMAR
   47                       | EXPRESSION . BITWISE_OPERATOR EXPRESSION_GRAMMAR
   68 EXPRESSION_F: '(' EXPRESSION . ')'

    '>'                          shift, and go to state 91
    '<'                          shift, and go to state 92
    T_REL_OP_GREATER_THAN_EQUAL  shift, and go to state 93
    T_REL_OP_LESS_THAN_EQUAL     shift, and go to state 94
    T_REL_OP_EQUAL               shift, and go to state 95
    T_REL_OP_NOT_EQUAL           shift, and go to state 96
    T_LOG_OP_OR                  shift, and go to state 97
    T_LOG_OP_AND                 shift, and go to state 98
    T_BIT_OP_AND                 shift, and go to state 99
    T_BIT_OP_OR                  shift, and go to state 100
    T_BIT_OP_XOR                 shift, and go to state 101
    ')'                          shift, and go to state 127

    BITWISE_OPERATOR     go to state 102
    LOGICAL_OPERATOR     go to state 103
    RELATIONAL_OPERATOR  go to state 104


State 87

   45 CONDITIONAL_EXPRESSION: EXPRESSION . LOGICAL_OPERATOR EXPRESSION_GRAMMAR
   46                       | EXPRESSION . RELATIONAL_OPERATOR EXPRESSION_GRAMMAR
   47                       | EXPRESSION . BITWISE_OPERATOR EXPRESSION_GRAMMAR
   97 RETURN: T_RETURN EXPRESSION .

    '>'                          shift, and go to state 91
    '<'                          shift, and go to state 92
    T_REL_OP_GREATER_THAN_EQUAL  shift, and go to state 93
    T_REL_OP_LESS_THAN_EQUAL     shift, and go to state 94
    T_REL_OP_EQUAL               shift, and go to state 95
    T_REL_OP_NOT_EQUAL           shift, and go to state 96
    T_LOG_OP_OR                  shift, and go to state 97
    T_LOG_OP_AND                 shift, and go to state 98
    T_BIT_OP_AND                 shift, and go to state 99
    T_BIT_OP_OR                  shift, and go to state 100
    T_BIT_OP_XOR                 shift, and go to state 101

    $default  reduce using rule 97 (RETURN)

    BITWISE_OPERATOR     go to state 102
    LOGICAL_OPERATOR     go to state 103
    RELATIONAL_OPERATOR  go to state 104


State 88

   28 BLOCK_END: '}' .

    $default  reduce using rule 28 (BLOCK_END)


State 89

   26 BLOCK: BLOCK_START STATEMENTS BLOCK_END .

    $default  reduce using rule 26 (BLOCK)


State 90

   31 IF_BLOCK: IF_HEADER LINE_STATEMENT .

    $default  reduce using rule 31 (IF_BLOCK)


State 91

  101 RELATIONAL_OPERATOR: '>' .

    $default  reduce using rule 101 (RELATIONAL_OPERATOR)


State 92

  103 RELATIONAL_OPERATOR: '<' .

    $default  reduce using rule 103 (RELATIONAL_OPERATOR)


State 93

  102 RELATIONAL_OPERATOR: T_REL_OP_GREATER_THAN_EQUAL .

    $default  reduce using rule 102 (RELATIONAL_OPERATOR)


State 94

  104 RELATIONAL_OPERATOR: T_REL_OP_LESS_THAN_EQUAL .

    $default  reduce using rule 104 (RELATIONAL_OPERATOR)


State 95

  100 RELATIONAL_OPERATOR: T_REL_OP_EQUAL .

    $default  reduce using rule 100 (RELATIONAL_OPERATOR)


State 96

  105 RELATIONAL_OPERATOR: T_REL_OP_NOT_EQUAL .

    $default  reduce using rule 105 (RELATIONAL_OPERATOR)


State 97

   99 LOGICAL_OPERATOR: T_LOG_OP_OR .

    $default  reduce using rule 99 (LOGICAL_OPERATOR)


State 98

   98 LOGICAL_OPERATOR: T_LOG_OP_AND .

    $default  reduce using rule 98 (LOGICAL_OPERATOR)


State 99

   42 BITWISE_OPERATOR: T_BIT_OP_AND .

    $default  reduce using rule 42 (BITWISE_OPERATOR)


State 100

   43 BITWISE_OPERATOR: T_BIT_OP_OR .

    $default  reduce using rule 43 (BITWISE_OPERATOR)


State 101

   44 BITWISE_OPERATOR: T_BIT_OP_XOR .

    $default  reduce using rule 44 (BITWISE_OPERATOR)


State 102

   47 CONDITIONAL_EXPRESSION: EXPRESSION BITWISE_OPERATOR . EXPRESSION_GRAMMAR

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 81
    '!'               shift, and go to state 33
    T_OP_DECREMENT    shift, and go to state 34
    '('               shift, and go to state 40

    EXPRESSION_GRAMMAR     go to state 128
    EXPRESSION_TERM        go to state 53
    EXPRESSION_F           go to state 54
    IDENTIFIER_OR_LITERAL  go to state 64


State 103

   45 CONDITIONAL_EXPRESSION: EXPRESSION LOGICAL_OPERATOR . EXPRESSION_GRAMMAR

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 81
    '!'               shift, and go to state 33
    T_OP_DECREMENT    shift, and go to state 34
    '('               shift, and go to state 40

    EXPRESSION_GRAMMAR     go to state 129
    EXPRESSION_TERM        go to state 53
    EXPRESSION_F           go to state 54
    IDENTIFIER_OR_LITERAL  go to state 64


State 104

   46 CONDITIONAL_EXPRESSION: EXPRESSION RELATIONAL_OPERATOR . EXPRESSION_GRAMMAR

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 81
    '!'               shift, and go to state 33
    T_OP_DECREMENT    shift, and go to state 34
    '('               shift, and go to state 40

    EXPRESSION_GRAMMAR     go to state 130
    EXPRESSION_TERM        go to state 53
    EXPRESSION_F           go to state 54
    IDENTIFIER_OR_LITERAL  go to state 64


State 105

   59 EXPRESSION_GRAMMAR: EXPRESSION_GRAMMAR '+' . EXPRESSION_TERM

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 81
    '!'               shift, and go to state 33
    T_OP_DECREMENT    shift, and go to state 34
    '('               shift, and go to state 40

    EXPRESSION_TERM        go to state 131
    EXPRESSION_F           go to state 54
    IDENTIFIER_OR_LITERAL  go to state 64


State 106

   60 EXPRESSION_GRAMMAR: EXPRESSION_GRAMMAR '-' . EXPRESSION_TERM

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 81
    '!'               shift, and go to state 33
    T_OP_DECREMENT    shift, and go to state 34
    '('               shift, and go to state 40

    EXPRESSION_TERM        go to state 132
    EXPRESSION_F           go to state 54
    IDENTIFIER_OR_LITERAL  go to state 64


State 107

   62 EXPRESSION_TERM: EXPRESSION_TERM '*' . EXPRESSION_F

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 81
    T_OP_DECREMENT    shift, and go to state 34
    '('               shift, and go to state 40

    EXPRESSION_F           go to state 133
    IDENTIFIER_OR_LITERAL  go to state 64


State 108

   63 EXPRESSION_TERM: EXPRESSION_TERM '/' . EXPRESSION_F

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 81
    T_OP_DECREMENT    shift, and go to state 34
    '('               shift, and go to state 40

    EXPRESSION_F           go to state 134
    IDENTIFIER_OR_LITERAL  go to state 64


State 109

   64 EXPRESSION_TERM: EXPRESSION_TERM '%' . EXPRESSION_F

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 81
    T_OP_DECREMENT    shift, and go to state 34
    '('               shift, and go to state 40

    EXPRESSION_F           go to state 135
    IDENTIFIER_OR_LITERAL  go to state 64


State 110

   29 STATEMENTS: STATEMENT STATEMENTS .

    $default  reduce using rule 29 (STATEMENTS)


State 111

   73 STATEMENT: LINE_STATEMENT ';' .

    $default  reduce using rule 73 (STATEMENT)


State 112

   48 ASSIGNMENT: T_IDENTIFIER . ASSIGNMENT_OPERATOR EXPRESSION_GRAMMAR
   49           | T_IDENTIFIER . ASSIGNMENT_OPERATOR ASSIGNMENT
   87 VARIABLE_LIST: T_IDENTIFIER . ',' VARIABLE_LIST
   89              | T_IDENTIFIER .

    '='                       shift, and go to state 70
    T_OP_ADD_ASSIGNMENT       shift, and go to state 71
    T_OP_SUBTRACT_ASSIGNMENT  shift, and go to state 72
    T_OP_MULTIPLY_ASSIGNMENT  shift, and go to state 73
    T_OP_DIVIDE_ASSIGNMENT    shift, and go to state 74
    T_OP_MOD_ASSIGNMENT       shift, and go to state 75
    ','                       shift, and go to state 136

    $default  reduce using rule 89 (VARIABLE_LIST)

    ASSIGNMENT_OPERATOR  go to state 77


State 113

   88 VARIABLE_LIST: ASSIGNMENT . ',' VARIABLE_LIST
   90              | ASSIGNMENT .

    ','  shift, and go to state 137

    $default  reduce using rule 90 (VARIABLE_LIST)


State 114

   85 VARIABLE_DECLARATION: VARIABLE_DECLARATION_TYPE VARIABLE_LIST .

    $default  reduce using rule 85 (VARIABLE_DECLARATION)


State 115

   15 FUNCTION_PROTOTYPE: TYPE T_IDENTIFIER '(' . TYPE_LIST ')' ';'
   16                   | TYPE T_IDENTIFIER '(' . ')' ';'
   19 FUNCTION_DEFINITION: TYPE T_IDENTIFIER '(' . FUNCTION_PARAMETER_LIST ')' ';'
   20 FUNCTION_DECLARATION: TYPE T_IDENTIFIER '(' . FUNCTION_PARAMETER_LIST ')' BLOCK
   21                     | TYPE T_IDENTIFIER '(' . ')' BLOCK

    T_TYPE_INT     shift, and go to state 1
    T_TYPE_FLOAT   shift, and go to state 2
    T_TYPE_DOUBLE  shift, and go to state 3
    T_TYPE_STRING  shift, and go to state 4
    T_TYPE_CHAR    shift, and go to state 5
    T_TYPE_VOID    shift, and go to state 6
    ')'            shift, and go to state 138

    TYPE_LIST                go to state 139
    FUNCTION_PARAMETER_LIST  go to state 140
    TYPE                     go to state 141


State 116

    6 INCLUDE: T_HEADER_INCLUDE '<' T_HEADER_FILE '>' .

    $default  reduce using rule 6 (INCLUDE)


State 117

    4 INCLUDE: INCLUDE T_HEADER_INCLUDE '<' T_HEADER_FILE . '>'

    '>'  shift, and go to state 142


State 118

   49 ASSIGNMENT: T_IDENTIFIER ASSIGNMENT_OPERATOR ASSIGNMENT .

    $default  reduce using rule 49 (ASSIGNMENT)


State 119

   48 ASSIGNMENT: T_IDENTIFIER ASSIGNMENT_OPERATOR EXPRESSION_GRAMMAR .
   59 EXPRESSION_GRAMMAR: EXPRESSION_GRAMMAR . '+' EXPRESSION_TERM
   60                   | EXPRESSION_GRAMMAR . '-' EXPRESSION_TERM

    '+'  shift, and go to state 105
    '-'  shift, and go to state 106

    $default  reduce using rule 48 (ASSIGNMENT)


State 120

   32 IF_BLOCK: T_CONSTRUCT_IF '(' EXPRESSION . ')' BLOCK_STATEMENT
   33 IF_HEADER: T_CONSTRUCT_IF '(' EXPRESSION . ')'
   45 CONDITIONAL_EXPRESSION: EXPRESSION . LOGICAL_OPERATOR EXPRESSION_GRAMMAR
   46                       | EXPRESSION . RELATIONAL_OPERATOR EXPRESSION_GRAMMAR
   47                       | EXPRESSION . BITWISE_OPERATOR EXPRESSION_GRAMMAR

    '>'                          shift, and go to state 91
    '<'                          shift, and go to state 92
    T_REL_OP_GREATER_THAN_EQUAL  shift, and go to state 93
    T_REL_OP_LESS_THAN_EQUAL     shift, and go to state 94
    T_REL_OP_EQUAL               shift, and go to state 95
    T_REL_OP_NOT_EQUAL           shift, and go to state 96
    T_LOG_OP_OR                  shift, and go to state 97
    T_LOG_OP_AND                 shift, and go to state 98
    T_BIT_OP_AND                 shift, and go to state 99
    T_BIT_OP_OR                  shift, and go to state 100
    T_BIT_OP_XOR                 shift, and go to state 101
    ')'                          shift, and go to state 143

    BITWISE_OPERATOR     go to state 102
    LOGICAL_OPERATOR     go to state 103
    RELATIONAL_OPERATOR  go to state 104


State 121

   35 FOR_BLOCK: T_CONSTRUCT_FOR '(' FOR_INIT_STATEMENT . ';' FOR_CONDITION_STATEMENT ';' FOR_ACTION_STATEMENT ')' STATEMENT

    ';'  shift, and go to state 144


State 122

   37 FOR_INIT_STATEMENT: LINE_STATEMENT .

    $default  reduce using rule 37 (FOR_INIT_STATEMENT)


State 123

   45 CONDITIONAL_EXPRESSION: EXPRESSION . LOGICAL_OPERATOR EXPRESSION_GRAMMAR
   46                       | EXPRESSION . RELATIONAL_OPERATOR EXPRESSION_GRAMMAR
   47                       | EXPRESSION . BITWISE_OPERATOR EXPRESSION_GRAMMAR
   92 EXTRACTION_LIST: EXPRESSION . T_IO_EXTRACTION EXTRACTION_LIST
   93                | EXPRESSION .

    '>'                          shift, and go to state 91
    '<'                          shift, and go to state 92
    T_REL_OP_GREATER_THAN_EQUAL  shift, and go to state 93
    T_REL_OP_LESS_THAN_EQUAL     shift, and go to state 94
    T_REL_OP_EQUAL               shift, and go to state 95
    T_REL_OP_NOT_EQUAL           shift, and go to state 96
    T_LOG_OP_OR                  shift, and go to state 97
    T_LOG_OP_AND                 shift, and go to state 98
    T_BIT_OP_AND                 shift, and go to state 99
    T_BIT_OP_OR                  shift, and go to state 100
    T_BIT_OP_XOR                 shift, and go to state 101
    T_IO_EXTRACTION              shift, and go to state 145

    $default  reduce using rule 93 (EXTRACTION_LIST)

    BITWISE_OPERATOR     go to state 102
    LOGICAL_OPERATOR     go to state 103
    RELATIONAL_OPERATOR  go to state 104


State 124

   91 COUT: T_IO_COUT T_IO_EXTRACTION EXTRACTION_LIST .

    $default  reduce using rule 91 (COUT)


State 125

   95 INSERTION_LIST: T_IDENTIFIER . T_IO_EXTRACTION INSERTION_LIST
   96               | T_IDENTIFIER .

    T_IO_EXTRACTION  shift, and go to state 146

    $default  reduce using rule 96 (INSERTION_LIST)


State 126

   94 CIN: T_IO_CIN T_IO_INSERTION INSERTION_LIST .

    $default  reduce using rule 94 (CIN)


State 127

   68 EXPRESSION_F: '(' EXPRESSION ')' .

    $default  reduce using rule 68 (EXPRESSION_F)


State 128

   47 CONDITIONAL_EXPRESSION: EXPRESSION BITWISE_OPERATOR EXPRESSION_GRAMMAR .
   59 EXPRESSION_GRAMMAR: EXPRESSION_GRAMMAR . '+' EXPRESSION_TERM
   60                   | EXPRESSION_GRAMMAR . '-' EXPRESSION_TERM

    '+'  shift, and go to state 105
    '-'  shift, and go to state 106

    $default  reduce using rule 47 (CONDITIONAL_EXPRESSION)


State 129

   45 CONDITIONAL_EXPRESSION: EXPRESSION LOGICAL_OPERATOR EXPRESSION_GRAMMAR .
   59 EXPRESSION_GRAMMAR: EXPRESSION_GRAMMAR . '+' EXPRESSION_TERM
   60                   | EXPRESSION_GRAMMAR . '-' EXPRESSION_TERM

    '+'  shift, and go to state 105
    '-'  shift, and go to state 106

    $default  reduce using rule 45 (CONDITIONAL_EXPRESSION)


State 130

   46 CONDITIONAL_EXPRESSION: EXPRESSION RELATIONAL_OPERATOR EXPRESSION_GRAMMAR .
   59 EXPRESSION_GRAMMAR: EXPRESSION_GRAMMAR . '+' EXPRESSION_TERM
   60                   | EXPRESSION_GRAMMAR . '-' EXPRESSION_TERM

    '+'  shift, and go to state 105
    '-'  shift, and go to state 106

    $default  reduce using rule 46 (CONDITIONAL_EXPRESSION)


State 131

   59 EXPRESSION_GRAMMAR: EXPRESSION_GRAMMAR '+' EXPRESSION_TERM .
   62 EXPRESSION_TERM: EXPRESSION_TERM . '*' EXPRESSION_F
   63                | EXPRESSION_TERM . '/' EXPRESSION_F
   64                | EXPRESSION_TERM . '%' EXPRESSION_F

    '*'  shift, and go to state 107
    '/'  shift, and go to state 108
    '%'  shift, and go to state 109

    $default  reduce using rule 59 (EXPRESSION_GRAMMAR)


State 132

   60 EXPRESSION_GRAMMAR: EXPRESSION_GRAMMAR '-' EXPRESSION_TERM .
   62 EXPRESSION_TERM: EXPRESSION_TERM . '*' EXPRESSION_F
   63                | EXPRESSION_TERM . '/' EXPRESSION_F
   64                | EXPRESSION_TERM . '%' EXPRESSION_F

    '*'  shift, and go to state 107
    '/'  shift, and go to state 108
    '%'  shift, and go to state 109

    $default  reduce using rule 60 (EXPRESSION_GRAMMAR)


State 133

   62 EXPRESSION_TERM: EXPRESSION_TERM '*' EXPRESSION_F .

    $default  reduce using rule 62 (EXPRESSION_TERM)


State 134

   63 EXPRESSION_TERM: EXPRESSION_TERM '/' EXPRESSION_F .

    $default  reduce using rule 63 (EXPRESSION_TERM)


State 135

   64 EXPRESSION_TERM: EXPRESSION_TERM '%' EXPRESSION_F .

    $default  reduce using rule 64 (EXPRESSION_TERM)


State 136

   87 VARIABLE_LIST: T_IDENTIFIER ',' . VARIABLE_LIST

    T_IDENTIFIER  shift, and go to state 112

    ASSIGNMENT     go to state 113
    VARIABLE_LIST  go to state 147


State 137

   88 VARIABLE_LIST: ASSIGNMENT ',' . VARIABLE_LIST

    T_IDENTIFIER  shift, and go to state 112

    ASSIGNMENT     go to state 113
    VARIABLE_LIST  go to state 148


State 138

   16 FUNCTION_PROTOTYPE: TYPE T_IDENTIFIER '(' ')' . ';'
   21 FUNCTION_DECLARATION: TYPE T_IDENTIFIER '(' ')' . BLOCK

    '{'  shift, and go to state 7
    ';'  shift, and go to state 149

    BLOCK        go to state 150
    BLOCK_START  go to state 18


State 139

   15 FUNCTION_PROTOTYPE: TYPE T_IDENTIFIER '(' TYPE_LIST . ')' ';'

    ')'  shift, and go to state 151


State 140

   19 FUNCTION_DEFINITION: TYPE T_IDENTIFIER '(' FUNCTION_PARAMETER_LIST . ')' ';'
   20 FUNCTION_DECLARATION: TYPE T_IDENTIFIER '(' FUNCTION_PARAMETER_LIST . ')' BLOCK

    ')'  shift, and go to state 152


State 141

   17 TYPE_LIST: TYPE . ',' TYPE_LIST
   18          | TYPE .
   22 FUNCTION_PARAMETER_LIST: TYPE . T_IDENTIFIER ',' FUNCTION_PARAMETER_LIST
   23                        | TYPE . T_IDENTIFIER '=' EXPRESSION ',' FUNCTION_PARAMETER_LIST
   24                        | TYPE . T_IDENTIFIER
   25                        | TYPE . T_IDENTIFIER '=' EXPRESSION

    T_IDENTIFIER  shift, and go to state 153
    ','           shift, and go to state 154

    $default  reduce using rule 18 (TYPE_LIST)


State 142

    4 INCLUDE: INCLUDE T_HEADER_INCLUDE '<' T_HEADER_FILE '>' .

    $default  reduce using rule 4 (INCLUDE)


State 143

   32 IF_BLOCK: T_CONSTRUCT_IF '(' EXPRESSION ')' . BLOCK_STATEMENT
   33 IF_HEADER: T_CONSTRUCT_IF '(' EXPRESSION ')' .

    T_CONSTRUCT_IF    shift, and go to state 30
    T_CONSTRUCT_ELSE  shift, and go to state 31
    T_CONSTRUCT_FOR   shift, and go to state 32
    '{'               shift, and go to state 7

    $default  reduce using rule 33 (IF_HEADER)

    BLOCK            go to state 43
    BLOCK_START      go to state 18
    IF_BLOCK         go to state 45
    IF_HEADER        go to state 46
    ELSE_BLOCK       go to state 47
    FOR_BLOCK        go to state 48
    BLOCK_STATEMENT  go to state 155


State 144

   35 FOR_BLOCK: T_CONSTRUCT_FOR '(' FOR_INIT_STATEMENT ';' . FOR_CONDITION_STATEMENT ';' FOR_ACTION_STATEMENT ')' STATEMENT

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 29
    '!'               shift, and go to state 33
    T_OP_DECREMENT    shift, and go to state 34
    '('               shift, and go to state 40

    $default  reduce using rule 38 (FOR_CONDITION_STATEMENT)

    FOR_CONDITION_STATEMENT  go to state 156
    CONDITIONAL_EXPRESSION   go to state 157
    ASSIGNMENT               go to state 50
    EXPRESSION               go to state 158
    EXPRESSION_GRAMMAR       go to state 52
    EXPRESSION_TERM          go to state 53
    EXPRESSION_F             go to state 54
    IDENTIFIER_OR_LITERAL    go to state 64


State 145

   92 EXTRACTION_LIST: EXPRESSION T_IO_EXTRACTION . EXTRACTION_LIST

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 29
    '!'               shift, and go to state 33
    T_OP_DECREMENT    shift, and go to state 34
    '('               shift, and go to state 40

    CONDITIONAL_EXPRESSION  go to state 49
    ASSIGNMENT              go to state 50
    EXPRESSION              go to state 123
    EXPRESSION_GRAMMAR      go to state 52
    EXPRESSION_TERM         go to state 53
    EXPRESSION_F            go to state 54
    EXTRACTION_LIST         go to state 159
    IDENTIFIER_OR_LITERAL   go to state 64


State 146

   95 INSERTION_LIST: T_IDENTIFIER T_IO_EXTRACTION . INSERTION_LIST

    T_IDENTIFIER  shift, and go to state 125

    INSERTION_LIST  go to state 160


State 147

   87 VARIABLE_LIST: T_IDENTIFIER ',' VARIABLE_LIST .

    $default  reduce using rule 87 (VARIABLE_LIST)


State 148

   88 VARIABLE_LIST: ASSIGNMENT ',' VARIABLE_LIST .

    $default  reduce using rule 88 (VARIABLE_LIST)


State 149

   16 FUNCTION_PROTOTYPE: TYPE T_IDENTIFIER '(' ')' ';' .

    $default  reduce using rule 16 (FUNCTION_PROTOTYPE)


State 150

   21 FUNCTION_DECLARATION: TYPE T_IDENTIFIER '(' ')' BLOCK .

    $default  reduce using rule 21 (FUNCTION_DECLARATION)


State 151

   15 FUNCTION_PROTOTYPE: TYPE T_IDENTIFIER '(' TYPE_LIST ')' . ';'

    ';'  shift, and go to state 161


State 152

   19 FUNCTION_DEFINITION: TYPE T_IDENTIFIER '(' FUNCTION_PARAMETER_LIST ')' . ';'
   20 FUNCTION_DECLARATION: TYPE T_IDENTIFIER '(' FUNCTION_PARAMETER_LIST ')' . BLOCK

    '{'  shift, and go to state 7
    ';'  shift, and go to state 162

    BLOCK        go to state 163
    BLOCK_START  go to state 18


State 153

   22 FUNCTION_PARAMETER_LIST: TYPE T_IDENTIFIER . ',' FUNCTION_PARAMETER_LIST
   23                        | TYPE T_IDENTIFIER . '=' EXPRESSION ',' FUNCTION_PARAMETER_LIST
   24                        | TYPE T_IDENTIFIER .
   25                        | TYPE T_IDENTIFIER . '=' EXPRESSION

    '='  shift, and go to state 164
    ','  shift, and go to state 165

    $default  reduce using rule 24 (FUNCTION_PARAMETER_LIST)


State 154

   17 TYPE_LIST: TYPE ',' . TYPE_LIST

    T_TYPE_INT     shift, and go to state 1
    T_TYPE_FLOAT   shift, and go to state 2
    T_TYPE_DOUBLE  shift, and go to state 3
    T_TYPE_STRING  shift, and go to state 4
    T_TYPE_CHAR    shift, and go to state 5
    T_TYPE_VOID    shift, and go to state 6

    TYPE_LIST  go to state 166
    TYPE       go to state 167


State 155

   32 IF_BLOCK: T_CONSTRUCT_IF '(' EXPRESSION ')' BLOCK_STATEMENT .

    $default  reduce using rule 32 (IF_BLOCK)


State 156

   35 FOR_BLOCK: T_CONSTRUCT_FOR '(' FOR_INIT_STATEMENT ';' FOR_CONDITION_STATEMENT . ';' FOR_ACTION_STATEMENT ')' STATEMENT

    ';'  shift, and go to state 168


State 157

   39 FOR_CONDITION_STATEMENT: CONDITIONAL_EXPRESSION .
   57 EXPRESSION: CONDITIONAL_EXPRESSION .

    ';'       reduce using rule 39 (FOR_CONDITION_STATEMENT)
    $default  reduce using rule 57 (EXPRESSION)


State 158

   45 CONDITIONAL_EXPRESSION: EXPRESSION . LOGICAL_OPERATOR EXPRESSION_GRAMMAR
   46                       | EXPRESSION . RELATIONAL_OPERATOR EXPRESSION_GRAMMAR
   47                       | EXPRESSION . BITWISE_OPERATOR EXPRESSION_GRAMMAR

    '>'                          shift, and go to state 91
    '<'                          shift, and go to state 92
    T_REL_OP_GREATER_THAN_EQUAL  shift, and go to state 93
    T_REL_OP_LESS_THAN_EQUAL     shift, and go to state 94
    T_REL_OP_EQUAL               shift, and go to state 95
    T_REL_OP_NOT_EQUAL           shift, and go to state 96
    T_LOG_OP_OR                  shift, and go to state 97
    T_LOG_OP_AND                 shift, and go to state 98
    T_BIT_OP_AND                 shift, and go to state 99
    T_BIT_OP_OR                  shift, and go to state 100
    T_BIT_OP_XOR                 shift, and go to state 101

    BITWISE_OPERATOR     go to state 102
    LOGICAL_OPERATOR     go to state 103
    RELATIONAL_OPERATOR  go to state 104


State 159

   92 EXTRACTION_LIST: EXPRESSION T_IO_EXTRACTION EXTRACTION_LIST .

    $default  reduce using rule 92 (EXTRACTION_LIST)


State 160

   95 INSERTION_LIST: T_IDENTIFIER T_IO_EXTRACTION INSERTION_LIST .

    $default  reduce using rule 95 (INSERTION_LIST)


State 161

   15 FUNCTION_PROTOTYPE: TYPE T_IDENTIFIER '(' TYPE_LIST ')' ';' .

    $default  reduce using rule 15 (FUNCTION_PROTOTYPE)


State 162

   19 FUNCTION_DEFINITION: TYPE T_IDENTIFIER '(' FUNCTION_PARAMETER_LIST ')' ';' .

    $default  reduce using rule 19 (FUNCTION_DEFINITION)


State 163

   20 FUNCTION_DECLARATION: TYPE T_IDENTIFIER '(' FUNCTION_PARAMETER_LIST ')' BLOCK .

    $default  reduce using rule 20 (FUNCTION_DECLARATION)


State 164

   23 FUNCTION_PARAMETER_LIST: TYPE T_IDENTIFIER '=' . EXPRESSION ',' FUNCTION_PARAMETER_LIST
   25                        | TYPE T_IDENTIFIER '=' . EXPRESSION

    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 29
    '!'               shift, and go to state 33
    T_OP_DECREMENT    shift, and go to state 34
    '('               shift, and go to state 40

    CONDITIONAL_EXPRESSION  go to state 49
    ASSIGNMENT              go to state 50
    EXPRESSION              go to state 169
    EXPRESSION_GRAMMAR      go to state 52
    EXPRESSION_TERM         go to state 53
    EXPRESSION_F            go to state 54
    IDENTIFIER_OR_LITERAL   go to state 64


State 165

   22 FUNCTION_PARAMETER_LIST: TYPE T_IDENTIFIER ',' . FUNCTION_PARAMETER_LIST

    T_TYPE_INT     shift, and go to state 1
    T_TYPE_FLOAT   shift, and go to state 2
    T_TYPE_DOUBLE  shift, and go to state 3
    T_TYPE_STRING  shift, and go to state 4
    T_TYPE_CHAR    shift, and go to state 5
    T_TYPE_VOID    shift, and go to state 6

    FUNCTION_PARAMETER_LIST  go to state 170
    TYPE                     go to state 171


State 166

   17 TYPE_LIST: TYPE ',' TYPE_LIST .

    $default  reduce using rule 17 (TYPE_LIST)


State 167

   17 TYPE_LIST: TYPE . ',' TYPE_LIST
   18          | TYPE .

    ','  shift, and go to state 154

    $default  reduce using rule 18 (TYPE_LIST)


State 168

   35 FOR_BLOCK: T_CONSTRUCT_FOR '(' FOR_INIT_STATEMENT ';' FOR_CONDITION_STATEMENT ';' . FOR_ACTION_STATEMENT ')' STATEMENT

    T_TYPE_INT        shift, and go to state 1
    T_TYPE_FLOAT      shift, and go to state 2
    T_TYPE_DOUBLE     shift, and go to state 3
    T_TYPE_STRING     shift, and go to state 4
    T_TYPE_CHAR       shift, and go to state 5
    T_TYPE_VOID       shift, and go to state 6
    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 29
    '!'               shift, and go to state 33
    T_OP_DECREMENT    shift, and go to state 34
    T_IO_COUT         shift, and go to state 35
    T_IO_CIN          shift, and go to state 36
    T_JUMP_BREAK      shift, and go to state 37
    T_JUMP_EXIT       shift, and go to state 38
    T_JUMP_CONTINUE   shift, and go to state 39
    '('               shift, and go to state 40
    T_RETURN          shift, and go to state 42

    $default  reduce using rule 40 (FOR_ACTION_STATEMENT)

    FOR_ACTION_STATEMENT       go to state 172
    CONDITIONAL_EXPRESSION     go to state 49
    ASSIGNMENT                 go to state 50
    EXPRESSION                 go to state 51
    EXPRESSION_GRAMMAR         go to state 52
    EXPRESSION_TERM            go to state 53
    EXPRESSION_F               go to state 54
    JUMP_STATEMENT             go to state 57
    LINE_STATEMENT             go to state 173
    VARIABLE_DECLARATION       go to state 59
    VARIABLE_DECLARATION_TYPE  go to state 60
    COUT                       go to state 61
    CIN                        go to state 62
    RETURN                     go to state 63
    IDENTIFIER_OR_LITERAL      go to state 64
    TYPE                       go to state 65


State 169

   23 FUNCTION_PARAMETER_LIST: TYPE T_IDENTIFIER '=' EXPRESSION . ',' FUNCTION_PARAMETER_LIST
   25                        | TYPE T_IDENTIFIER '=' EXPRESSION .
   45 CONDITIONAL_EXPRESSION: EXPRESSION . LOGICAL_OPERATOR EXPRESSION_GRAMMAR
   46                       | EXPRESSION . RELATIONAL_OPERATOR EXPRESSION_GRAMMAR
   47                       | EXPRESSION . BITWISE_OPERATOR EXPRESSION_GRAMMAR

    '>'                          shift, and go to state 91
    '<'                          shift, and go to state 92
    T_REL_OP_GREATER_THAN_EQUAL  shift, and go to state 93
    T_REL_OP_LESS_THAN_EQUAL     shift, and go to state 94
    T_REL_OP_EQUAL               shift, and go to state 95
    T_REL_OP_NOT_EQUAL           shift, and go to state 96
    T_LOG_OP_OR                  shift, and go to state 97
    T_LOG_OP_AND                 shift, and go to state 98
    T_BIT_OP_AND                 shift, and go to state 99
    T_BIT_OP_OR                  shift, and go to state 100
    T_BIT_OP_XOR                 shift, and go to state 101
    ','                          shift, and go to state 174

    $default  reduce using rule 25 (FUNCTION_PARAMETER_LIST)

    BITWISE_OPERATOR     go to state 102
    LOGICAL_OPERATOR     go to state 103
    RELATIONAL_OPERATOR  go to state 104


State 170

   22 FUNCTION_PARAMETER_LIST: TYPE T_IDENTIFIER ',' FUNCTION_PARAMETER_LIST .

    $default  reduce using rule 22 (FUNCTION_PARAMETER_LIST)


State 171

   22 FUNCTION_PARAMETER_LIST: TYPE . T_IDENTIFIER ',' FUNCTION_PARAMETER_LIST
   23                        | TYPE . T_IDENTIFIER '=' EXPRESSION ',' FUNCTION_PARAMETER_LIST
   24                        | TYPE . T_IDENTIFIER
   25                        | TYPE . T_IDENTIFIER '=' EXPRESSION

    T_IDENTIFIER  shift, and go to state 153


State 172

   35 FOR_BLOCK: T_CONSTRUCT_FOR '(' FOR_INIT_STATEMENT ';' FOR_CONDITION_STATEMENT ';' FOR_ACTION_STATEMENT . ')' STATEMENT

    ')'  shift, and go to state 175


State 173

   41 FOR_ACTION_STATEMENT: LINE_STATEMENT .

    $default  reduce using rule 41 (FOR_ACTION_STATEMENT)


State 174

   23 FUNCTION_PARAMETER_LIST: TYPE T_IDENTIFIER '=' EXPRESSION ',' . FUNCTION_PARAMETER_LIST

    T_TYPE_INT     shift, and go to state 1
    T_TYPE_FLOAT   shift, and go to state 2
    T_TYPE_DOUBLE  shift, and go to state 3
    T_TYPE_STRING  shift, and go to state 4
    T_TYPE_CHAR    shift, and go to state 5
    T_TYPE_VOID    shift, and go to state 6

    FUNCTION_PARAMETER_LIST  go to state 176
    TYPE                     go to state 171


State 175

   35 FOR_BLOCK: T_CONSTRUCT_FOR '(' FOR_INIT_STATEMENT ';' FOR_CONDITION_STATEMENT ';' FOR_ACTION_STATEMENT ')' . STATEMENT

    T_TYPE_INT        shift, and go to state 1
    T_TYPE_FLOAT      shift, and go to state 2
    T_TYPE_DOUBLE     shift, and go to state 3
    T_TYPE_STRING     shift, and go to state 4
    T_TYPE_CHAR       shift, and go to state 5
    T_TYPE_VOID       shift, and go to state 6
    T_NUMBER_LITERAL  shift, and go to state 26
    T_STRING_LITERAL  shift, and go to state 27
    T_CHAR_LITERAL    shift, and go to state 28
    T_IDENTIFIER      shift, and go to state 29
    T_CONSTRUCT_IF    shift, and go to state 30
    T_CONSTRUCT_ELSE  shift, and go to state 31
    T_CONSTRUCT_FOR   shift, and go to state 32
    '{'               shift, and go to state 7
    '!'               shift, and go to state 33
    T_OP_DECREMENT    shift, and go to state 34
    T_IO_COUT         shift, and go to state 35
    T_IO_CIN          shift, and go to state 36
    T_JUMP_BREAK      shift, and go to state 37
    T_JUMP_EXIT       shift, and go to state 38
    T_JUMP_CONTINUE   shift, and go to state 39
    '('               shift, and go to state 40
    ';'               shift, and go to state 41
    T_RETURN          shift, and go to state 42

    BLOCK                      go to state 43
    BLOCK_START                go to state 18
    IF_BLOCK                   go to state 45
    IF_HEADER                  go to state 46
    ELSE_BLOCK                 go to state 47
    FOR_BLOCK                  go to state 48
    CONDITIONAL_EXPRESSION     go to state 49
    ASSIGNMENT                 go to state 50
    EXPRESSION                 go to state 51
    EXPRESSION_GRAMMAR         go to state 52
    EXPRESSION_TERM            go to state 53
    EXPRESSION_F               go to state 54
    BLOCK_STATEMENT            go to state 55
    STATEMENT                  go to state 177
    JUMP_STATEMENT             go to state 57
    LINE_STATEMENT             go to state 58
    VARIABLE_DECLARATION       go to state 59
    VARIABLE_DECLARATION_TYPE  go to state 60
    COUT                       go to state 61
    CIN                        go to state 62
    RETURN                     go to state 63
    IDENTIFIER_OR_LITERAL      go to state 64
    TYPE                       go to state 65


State 176

   23 FUNCTION_PARAMETER_LIST: TYPE T_IDENTIFIER '=' EXPRESSION ',' FUNCTION_PARAMETER_LIST .

    $default  reduce using rule 23 (FUNCTION_PARAMETER_LIST)


State 177

   35 FOR_BLOCK: T_CONSTRUCT_FOR '(' FOR_INIT_STATEMENT ';' FOR_CONDITION_STATEMENT ';' FOR_ACTION_STATEMENT ')' STATEMENT .

    $default  reduce using rule 35 (FOR_BLOCK)
